// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCostReport Create a CostReport.
//
// swagger:model createCostReport
type CreateCostReport struct {

	// The tokens for any BusinessMetrics to attach to the CostReport, and the unit scale.
	BusinessMetricTokensWithMetadata []*CreateCostReportBusinessMetricTokensWithMetadataItems0 `json:"business_metric_tokens_with_metadata"`

	// The chart type of the CostReport.
	// Enum: ["area","line","pie","bar"]
	ChartType *string `json:"chart_type,omitempty"`

	// The date bin of the CostReport.
	// Enum: ["cumulative","day","week","month"]
	DateBin *string `json:"date_bin,omitempty"`

	// The date interval of the CostReport. Incompatible with 'start_date' and 'end_date' parameters. Defaults to 'this_month' if start_date and end_date are not provided.
	// Enum: ["this_month","last_7_days","last_30_days","last_month","last_3_months","last_6_months","custom","last_12_months","last_24_months","last_36_months","next_month","next_3_months","next_6_months","next_12_months","year_to_date"]
	DateInterval string `json:"date_interval,omitempty"`

	// The end date of the CostReport. ISO 8601 Formatted. Incompatible with 'date_interval' parameter.
	// Required: true
	EndDate *string `json:"end_date"`

	// The filter query language to apply to the CostReport. Additional documentation available at https://docs.vantage.sh/vql.
	Filter string `json:"filter,omitempty"`

	// The token of the Folder to add the CostReport to. Determines the Workspace the report is assigned to.
	FolderToken string `json:"folder_token,omitempty"`

	// Grouping values for aggregating costs on the report. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tagged, tag:<tag_value>. If providing multiple groupings, join as comma separated values: groupings=provider,service,region
	Groupings string `json:"groupings,omitempty"`

	// The previous period end date of the CostReport. ISO 8601 Formatted.
	// Required: true
	PreviousPeriodEndDate *string `json:"previous_period_end_date"`

	// The previous period start date of the CostReport. ISO 8601 Formatted.
	PreviousPeriodStartDate string `json:"previous_period_start_date,omitempty"`

	// The tokens of the SavedFilters to apply to the CostReport.
	SavedFilterTokens []string `json:"saved_filter_tokens"`

	// settings
	Settings *CreateCostReportSettings `json:"settings,omitempty"`

	// The start date of the CostReport. ISO 8601 Formatted. Incompatible with 'date_interval' parameter.
	StartDate string `json:"start_date,omitempty"`

	// The title of the CostReport.
	// Required: true
	Title *string `json:"title"`

	// The token of the Workspace to add the Cost Report to. Ignored if 'folder_token' is set. Required if the API token is associated with multiple Workspaces.
	WorkspaceToken string `json:"workspace_token,omitempty"`
}

// Validate validates this create cost report
func (m *CreateCostReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessMetricTokensWithMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChartType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateBin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousPeriodEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCostReport) validateBusinessMetricTokensWithMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessMetricTokensWithMetadata) { // not required
		return nil
	}

	for i := 0; i < len(m.BusinessMetricTokensWithMetadata); i++ {
		if swag.IsZero(m.BusinessMetricTokensWithMetadata[i]) { // not required
			continue
		}

		if m.BusinessMetricTokensWithMetadata[i] != nil {
			if err := m.BusinessMetricTokensWithMetadata[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("business_metric_tokens_with_metadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("business_metric_tokens_with_metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var createCostReportTypeChartTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["area","line","pie","bar"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCostReportTypeChartTypePropEnum = append(createCostReportTypeChartTypePropEnum, v)
	}
}

const (

	// CreateCostReportChartTypeArea captures enum value "area"
	CreateCostReportChartTypeArea string = "area"

	// CreateCostReportChartTypeLine captures enum value "line"
	CreateCostReportChartTypeLine string = "line"

	// CreateCostReportChartTypePie captures enum value "pie"
	CreateCostReportChartTypePie string = "pie"

	// CreateCostReportChartTypeBar captures enum value "bar"
	CreateCostReportChartTypeBar string = "bar"
)

// prop value enum
func (m *CreateCostReport) validateChartTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCostReportTypeChartTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateCostReport) validateChartType(formats strfmt.Registry) error {
	if swag.IsZero(m.ChartType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChartTypeEnum("chart_type", "body", *m.ChartType); err != nil {
		return err
	}

	return nil
}

var createCostReportTypeDateBinPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cumulative","day","week","month"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCostReportTypeDateBinPropEnum = append(createCostReportTypeDateBinPropEnum, v)
	}
}

const (

	// CreateCostReportDateBinCumulative captures enum value "cumulative"
	CreateCostReportDateBinCumulative string = "cumulative"

	// CreateCostReportDateBinDay captures enum value "day"
	CreateCostReportDateBinDay string = "day"

	// CreateCostReportDateBinWeek captures enum value "week"
	CreateCostReportDateBinWeek string = "week"

	// CreateCostReportDateBinMonth captures enum value "month"
	CreateCostReportDateBinMonth string = "month"
)

// prop value enum
func (m *CreateCostReport) validateDateBinEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCostReportTypeDateBinPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateCostReport) validateDateBin(formats strfmt.Registry) error {
	if swag.IsZero(m.DateBin) { // not required
		return nil
	}

	// value enum
	if err := m.validateDateBinEnum("date_bin", "body", *m.DateBin); err != nil {
		return err
	}

	return nil
}

var createCostReportTypeDateIntervalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["this_month","last_7_days","last_30_days","last_month","last_3_months","last_6_months","custom","last_12_months","last_24_months","last_36_months","next_month","next_3_months","next_6_months","next_12_months","year_to_date"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCostReportTypeDateIntervalPropEnum = append(createCostReportTypeDateIntervalPropEnum, v)
	}
}

const (

	// CreateCostReportDateIntervalThisMonth captures enum value "this_month"
	CreateCostReportDateIntervalThisMonth string = "this_month"

	// CreateCostReportDateIntervalLast7Days captures enum value "last_7_days"
	CreateCostReportDateIntervalLast7Days string = "last_7_days"

	// CreateCostReportDateIntervalLast30Days captures enum value "last_30_days"
	CreateCostReportDateIntervalLast30Days string = "last_30_days"

	// CreateCostReportDateIntervalLastMonth captures enum value "last_month"
	CreateCostReportDateIntervalLastMonth string = "last_month"

	// CreateCostReportDateIntervalLast3Months captures enum value "last_3_months"
	CreateCostReportDateIntervalLast3Months string = "last_3_months"

	// CreateCostReportDateIntervalLast6Months captures enum value "last_6_months"
	CreateCostReportDateIntervalLast6Months string = "last_6_months"

	// CreateCostReportDateIntervalCustom captures enum value "custom"
	CreateCostReportDateIntervalCustom string = "custom"

	// CreateCostReportDateIntervalLast12Months captures enum value "last_12_months"
	CreateCostReportDateIntervalLast12Months string = "last_12_months"

	// CreateCostReportDateIntervalLast24Months captures enum value "last_24_months"
	CreateCostReportDateIntervalLast24Months string = "last_24_months"

	// CreateCostReportDateIntervalLast36Months captures enum value "last_36_months"
	CreateCostReportDateIntervalLast36Months string = "last_36_months"

	// CreateCostReportDateIntervalNextMonth captures enum value "next_month"
	CreateCostReportDateIntervalNextMonth string = "next_month"

	// CreateCostReportDateIntervalNext3Months captures enum value "next_3_months"
	CreateCostReportDateIntervalNext3Months string = "next_3_months"

	// CreateCostReportDateIntervalNext6Months captures enum value "next_6_months"
	CreateCostReportDateIntervalNext6Months string = "next_6_months"

	// CreateCostReportDateIntervalNext12Months captures enum value "next_12_months"
	CreateCostReportDateIntervalNext12Months string = "next_12_months"

	// CreateCostReportDateIntervalYearToDate captures enum value "year_to_date"
	CreateCostReportDateIntervalYearToDate string = "year_to_date"
)

// prop value enum
func (m *CreateCostReport) validateDateIntervalEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCostReportTypeDateIntervalPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateCostReport) validateDateInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.DateInterval) { // not required
		return nil
	}

	// value enum
	if err := m.validateDateIntervalEnum("date_interval", "body", m.DateInterval); err != nil {
		return err
	}

	return nil
}

func (m *CreateCostReport) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("end_date", "body", m.EndDate); err != nil {
		return err
	}

	return nil
}

func (m *CreateCostReport) validatePreviousPeriodEndDate(formats strfmt.Registry) error {

	if err := validate.Required("previous_period_end_date", "body", m.PreviousPeriodEndDate); err != nil {
		return err
	}

	return nil
}

func (m *CreateCostReport) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *CreateCostReport) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create cost report based on the context it is used
func (m *CreateCostReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBusinessMetricTokensWithMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCostReport) contextValidateBusinessMetricTokensWithMetadata(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BusinessMetricTokensWithMetadata); i++ {

		if m.BusinessMetricTokensWithMetadata[i] != nil {

			if swag.IsZero(m.BusinessMetricTokensWithMetadata[i]) { // not required
				return nil
			}

			if err := m.BusinessMetricTokensWithMetadata[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("business_metric_tokens_with_metadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("business_metric_tokens_with_metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateCostReport) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {

		if swag.IsZero(m.Settings) { // not required
			return nil
		}

		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCostReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCostReport) UnmarshalBinary(b []byte) error {
	var res CreateCostReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateCostReportBusinessMetricTokensWithMetadataItems0 create cost report business metric tokens with metadata items0
//
// swagger:model CreateCostReportBusinessMetricTokensWithMetadataItems0
type CreateCostReportBusinessMetricTokensWithMetadataItems0 struct {

	// The token of the BusinessMetric to attach to the CostReport.
	// Required: true
	BusinessMetricToken *string `json:"business_metric_token"`

	// Include only values with these labels in the CostReport.
	LabelFilter []string `json:"label_filter"`

	// Determines the scale of the BusinessMetric's values within the CostReport.
	// Enum: ["per_unit","per_hundred","per_thousand","per_million","per_billion"]
	UnitScale *string `json:"unit_scale,omitempty"`
}

// Validate validates this create cost report business metric tokens with metadata items0
func (m *CreateCostReportBusinessMetricTokensWithMetadataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessMetricToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitScale(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCostReportBusinessMetricTokensWithMetadataItems0) validateBusinessMetricToken(formats strfmt.Registry) error {

	if err := validate.Required("business_metric_token", "body", m.BusinessMetricToken); err != nil {
		return err
	}

	return nil
}

var createCostReportBusinessMetricTokensWithMetadataItems0TypeUnitScalePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["per_unit","per_hundred","per_thousand","per_million","per_billion"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCostReportBusinessMetricTokensWithMetadataItems0TypeUnitScalePropEnum = append(createCostReportBusinessMetricTokensWithMetadataItems0TypeUnitScalePropEnum, v)
	}
}

const (

	// CreateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerUnit captures enum value "per_unit"
	CreateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerUnit string = "per_unit"

	// CreateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerHundred captures enum value "per_hundred"
	CreateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerHundred string = "per_hundred"

	// CreateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerThousand captures enum value "per_thousand"
	CreateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerThousand string = "per_thousand"

	// CreateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerMillion captures enum value "per_million"
	CreateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerMillion string = "per_million"

	// CreateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerBillion captures enum value "per_billion"
	CreateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerBillion string = "per_billion"
)

// prop value enum
func (m *CreateCostReportBusinessMetricTokensWithMetadataItems0) validateUnitScaleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createCostReportBusinessMetricTokensWithMetadataItems0TypeUnitScalePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateCostReportBusinessMetricTokensWithMetadataItems0) validateUnitScale(formats strfmt.Registry) error {
	if swag.IsZero(m.UnitScale) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnitScaleEnum("unit_scale", "body", *m.UnitScale); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create cost report business metric tokens with metadata items0 based on context it is used
func (m *CreateCostReportBusinessMetricTokensWithMetadataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateCostReportBusinessMetricTokensWithMetadataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCostReportBusinessMetricTokensWithMetadataItems0) UnmarshalBinary(b []byte) error {
	var res CreateCostReportBusinessMetricTokensWithMetadataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateCostReportSettings Report settings.
//
// swagger:model CreateCostReportSettings
type CreateCostReportSettings struct {

	// Report will aggregate by.
	AggregateBy *string `json:"aggregate_by,omitempty"`

	// Report will amortize.
	Amortize *bool `json:"amortize,omitempty"`

	// Report will include credits.
	IncludeCredits *bool `json:"include_credits,omitempty"`

	// Report will include discounts.
	IncludeDiscounts *bool `json:"include_discounts,omitempty"`

	// Report will include refunds.
	IncludeRefunds *bool `json:"include_refunds,omitempty"`

	// Report will include tax.
	IncludeTax *bool `json:"include_tax,omitempty"`

	// Report will show unallocated costs.
	Unallocated *bool `json:"unallocated,omitempty"`
}

// Validate validates this create cost report settings
func (m *CreateCostReportSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create cost report settings based on context it is used
func (m *CreateCostReportSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateCostReportSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCostReportSettings) UnmarshalBinary(b []byte) error {
	var res CreateCostReportSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
