// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ForecastedCost forecasted cost
//
// swagger:model ForecastedCost
type ForecastedCost struct {

	// The amount of the forecasted cost.
	// Example: 4.25
	Amount string `json:"amount,omitempty"`

	// The date the forecasted cost is projected to accrue. ISO 8601 Formatted.
	// Example: 2035-09-05+00:00
	Date string `json:"date,omitempty"`

	// links
	Links interface{} `json:"links,omitempty"`

	// The cost provider which incurred the cost. Will be 'all' for all combined providers.
	// Example: aws
	// Enum: ["aws","azure","gcp","snowflake","databricks","mongo","datadog","fastly","new_relic","opencost","open_ai","oracle","confluent","planetscale","coralogix","kubernetes","custom_provider","github","linode","grafana","clickhouse","temporal","twilio","azure_csp","kubernetes_agent","anthropic","anyscale"]
	Provider string `json:"provider,omitempty"`

	// The service for the forecasted cost. Will be 'all' for all combined services
	// Example: Amazon Elastic Compute Cloud - Compute
	Service string `json:"service,omitempty"`
}

// Validate validates this forecasted cost
func (m *ForecastedCost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var forecastedCostTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aws","azure","gcp","snowflake","databricks","mongo","datadog","fastly","new_relic","opencost","open_ai","oracle","confluent","planetscale","coralogix","kubernetes","custom_provider","github","linode","grafana","clickhouse","temporal","twilio","azure_csp","kubernetes_agent","anthropic","anyscale"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		forecastedCostTypeProviderPropEnum = append(forecastedCostTypeProviderPropEnum, v)
	}
}

const (

	// ForecastedCostProviderAws captures enum value "aws"
	ForecastedCostProviderAws string = "aws"

	// ForecastedCostProviderAzure captures enum value "azure"
	ForecastedCostProviderAzure string = "azure"

	// ForecastedCostProviderGcp captures enum value "gcp"
	ForecastedCostProviderGcp string = "gcp"

	// ForecastedCostProviderSnowflake captures enum value "snowflake"
	ForecastedCostProviderSnowflake string = "snowflake"

	// ForecastedCostProviderDatabricks captures enum value "databricks"
	ForecastedCostProviderDatabricks string = "databricks"

	// ForecastedCostProviderMongo captures enum value "mongo"
	ForecastedCostProviderMongo string = "mongo"

	// ForecastedCostProviderDatadog captures enum value "datadog"
	ForecastedCostProviderDatadog string = "datadog"

	// ForecastedCostProviderFastly captures enum value "fastly"
	ForecastedCostProviderFastly string = "fastly"

	// ForecastedCostProviderNewRelic captures enum value "new_relic"
	ForecastedCostProviderNewRelic string = "new_relic"

	// ForecastedCostProviderOpencost captures enum value "opencost"
	ForecastedCostProviderOpencost string = "opencost"

	// ForecastedCostProviderOpenAi captures enum value "open_ai"
	ForecastedCostProviderOpenAi string = "open_ai"

	// ForecastedCostProviderOracle captures enum value "oracle"
	ForecastedCostProviderOracle string = "oracle"

	// ForecastedCostProviderConfluent captures enum value "confluent"
	ForecastedCostProviderConfluent string = "confluent"

	// ForecastedCostProviderPlanetscale captures enum value "planetscale"
	ForecastedCostProviderPlanetscale string = "planetscale"

	// ForecastedCostProviderCoralogix captures enum value "coralogix"
	ForecastedCostProviderCoralogix string = "coralogix"

	// ForecastedCostProviderKubernetes captures enum value "kubernetes"
	ForecastedCostProviderKubernetes string = "kubernetes"

	// ForecastedCostProviderCustomProvider captures enum value "custom_provider"
	ForecastedCostProviderCustomProvider string = "custom_provider"

	// ForecastedCostProviderGithub captures enum value "github"
	ForecastedCostProviderGithub string = "github"

	// ForecastedCostProviderLinode captures enum value "linode"
	ForecastedCostProviderLinode string = "linode"

	// ForecastedCostProviderGrafana captures enum value "grafana"
	ForecastedCostProviderGrafana string = "grafana"

	// ForecastedCostProviderClickhouse captures enum value "clickhouse"
	ForecastedCostProviderClickhouse string = "clickhouse"

	// ForecastedCostProviderTemporal captures enum value "temporal"
	ForecastedCostProviderTemporal string = "temporal"

	// ForecastedCostProviderTwilio captures enum value "twilio"
	ForecastedCostProviderTwilio string = "twilio"

	// ForecastedCostProviderAzureCsp captures enum value "azure_csp"
	ForecastedCostProviderAzureCsp string = "azure_csp"

	// ForecastedCostProviderKubernetesAgent captures enum value "kubernetes_agent"
	ForecastedCostProviderKubernetesAgent string = "kubernetes_agent"

	// ForecastedCostProviderAnthropic captures enum value "anthropic"
	ForecastedCostProviderAnthropic string = "anthropic"

	// ForecastedCostProviderAnyscale captures enum value "anyscale"
	ForecastedCostProviderAnyscale string = "anyscale"
)

// prop value enum
func (m *ForecastedCost) validateProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, forecastedCostTypeProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ForecastedCost) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this forecasted cost based on context it is used
func (m *ForecastedCost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ForecastedCost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForecastedCost) UnmarshalBinary(b []byte) error {
	var res ForecastedCost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
