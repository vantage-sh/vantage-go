// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateCostAlert Update a Cost Alert
//
// swagger:model updateCostAlert
type UpdateCostAlert struct {

	// The email recipients for the Cost Alert.
	EmailRecipients []string `json:"email_recipients"`

	// The period of time used to compare costs. Options are 'day', 'week', 'month', 'quarter'.
	Interval string `json:"interval,omitempty"`

	// The tokens of the reports to alert on.
	ReportTokens []string `json:"report_tokens"`

	// The Slack channels that will receive the alert. Make sure your slack integration is connected at https://console.vantage.sh/settings/slack.
	SlackChannels []string `json:"slack_channels"`

	// The Microsoft Teams channels that will receive the alert. Make sure your teams integration is connected at https://console.vantage.sh/settings/microsoft_teams.
	TeamsChannels []string `json:"teams_channels"`

	// The threshold value for the Cost Alert.
	Threshold float32 `json:"threshold,omitempty"`

	// The title of the Cost Alert.
	Title string `json:"title,omitempty"`

	// The unit type used to compare costs. Options are 'currency' or 'percentage'.
	UnitType string `json:"unit_type,omitempty"`
}

// Validate validates this update cost alert
func (m *UpdateCostAlert) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update cost alert based on context it is used
func (m *UpdateCostAlert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateCostAlert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateCostAlert) UnmarshalBinary(b []byte) error {
	var res UpdateCostAlert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
