// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BillingProfile BillingProfile model
//
// swagger:model BillingProfile
type BillingProfile struct {

	// Banking details for payments (MSP accounts only)
	BankingInformationAttributes *BankingInformation `json:"banking_information_attributes,omitempty"`

	// Billing address and contact information
	BillingInformationAttributes *BillingInformation `json:"billing_information_attributes,omitempty"`

	// Business-specific information and custom fields
	BusinessInformationAttributes *BusinessInformation `json:"business_information_attributes,omitempty"`

	// The date and time, in UTC, the billing profile was created. ISO 8601 formatted.
	// Example: 2023-08-04T00:00:00Z
	CreatedAt string `json:"created_at,omitempty"`

	// Number of managed accounts using this billing profile
	ManagedAccountsCount string `json:"managed_accounts_count,omitempty"`

	// Display name for the billing profile
	Nickname string `json:"nickname,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// The date and time, in UTC, the billing profile was last updated. ISO 8601 formatted.
	// Example: 2023-08-04T00:00:00Z
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this billing profile
func (m *BillingProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankingInformationAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingInformationAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessInformationAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingProfile) validateBankingInformationAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.BankingInformationAttributes) { // not required
		return nil
	}

	if m.BankingInformationAttributes != nil {
		if err := m.BankingInformationAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("banking_information_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("banking_information_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *BillingProfile) validateBillingInformationAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingInformationAttributes) { // not required
		return nil
	}

	if m.BillingInformationAttributes != nil {
		if err := m.BillingInformationAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_information_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billing_information_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *BillingProfile) validateBusinessInformationAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessInformationAttributes) { // not required
		return nil
	}

	if m.BusinessInformationAttributes != nil {
		if err := m.BusinessInformationAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business_information_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("business_information_attributes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this billing profile based on the context it is used
func (m *BillingProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBankingInformationAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillingInformationAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBusinessInformationAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingProfile) contextValidateBankingInformationAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.BankingInformationAttributes != nil {

		if swag.IsZero(m.BankingInformationAttributes) { // not required
			return nil
		}

		if err := m.BankingInformationAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("banking_information_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("banking_information_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *BillingProfile) contextValidateBillingInformationAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.BillingInformationAttributes != nil {

		if swag.IsZero(m.BillingInformationAttributes) { // not required
			return nil
		}

		if err := m.BillingInformationAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_information_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billing_information_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *BillingProfile) contextValidateBusinessInformationAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.BusinessInformationAttributes != nil {

		if swag.IsZero(m.BusinessInformationAttributes) { // not required
			return nil
		}

		if err := m.BusinessInformationAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business_information_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("business_information_attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BillingProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillingProfile) UnmarshalBinary(b []byte) error {
	var res BillingProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
