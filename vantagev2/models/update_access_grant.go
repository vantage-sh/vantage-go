// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAccessGrant Update an AccessGrant.
//
// swagger:model updateAccessGrant
type UpdateAccessGrant struct {

	// Allowed or denied access to resource.
	// Required: true
	// Enum: [denied allowed]
	Access *string `json:"access"`
}

// Validate validates this update access grant
func (m *UpdateAccessGrant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateAccessGrantTypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["denied","allowed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateAccessGrantTypeAccessPropEnum = append(updateAccessGrantTypeAccessPropEnum, v)
	}
}

const (

	// UpdateAccessGrantAccessDenied captures enum value "denied"
	UpdateAccessGrantAccessDenied string = "denied"

	// UpdateAccessGrantAccessAllowed captures enum value "allowed"
	UpdateAccessGrantAccessAllowed string = "allowed"
)

// prop value enum
func (m *UpdateAccessGrant) validateAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateAccessGrantTypeAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateAccessGrant) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", m.Access); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessEnum("access", "body", *m.Access); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update access grant based on context it is used
func (m *UpdateAccessGrant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAccessGrant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAccessGrant) UnmarshalBinary(b []byte) error {
	var res UpdateAccessGrant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
