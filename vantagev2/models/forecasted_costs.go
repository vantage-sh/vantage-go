// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ForecastedCosts ForecastedCosts model
//
// swagger:model ForecastedCosts
type ForecastedCosts struct {

	// The currency of the forecasted costs.
	// Example: USD
	Currency string `json:"currency,omitempty"`

	// forecasted costs
	ForecastedCosts []*ForecastedCost `json:"forecasted_costs"`

	// links
	Links interface{} `json:"links,omitempty"`
}

// Validate validates this forecasted costs
func (m *ForecastedCosts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForecastedCosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForecastedCosts) validateForecastedCosts(formats strfmt.Registry) error {
	if swag.IsZero(m.ForecastedCosts) { // not required
		return nil
	}

	for i := 0; i < len(m.ForecastedCosts); i++ {
		if swag.IsZero(m.ForecastedCosts[i]) { // not required
			continue
		}

		if m.ForecastedCosts[i] != nil {
			if err := m.ForecastedCosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forecasted_costs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("forecasted_costs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this forecasted costs based on the context it is used
func (m *ForecastedCosts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateForecastedCosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForecastedCosts) contextValidateForecastedCosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ForecastedCosts); i++ {

		if m.ForecastedCosts[i] != nil {

			if swag.IsZero(m.ForecastedCosts[i]) { // not required
				return nil
			}

			if err := m.ForecastedCosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forecasted_costs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("forecasted_costs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ForecastedCosts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForecastedCosts) UnmarshalBinary(b []byte) error {
	var res ForecastedCosts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
