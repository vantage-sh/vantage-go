// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateCostReport Update a CostReport.
//
// swagger:model updateCostReport
type UpdateCostReport struct {

	// The tokens for any BusinessMetrics to attach to the CostReport, and the unit scale.
	BusinessMetricTokensWithMetadata []*UpdateCostReportBusinessMetricTokensWithMetadataItems0 `json:"business_metric_tokens_with_metadata"`

	// The filter query language to apply to the CostReport. Additional documentation available at https://docs.vantage.sh/vql.
	Filter string `json:"filter,omitempty"`

	// The token of the Folder to add the CostReport to. Determines the Workspace the report is assigned to.
	FolderToken string `json:"folder_token,omitempty"`

	// Grouping values for aggregating costs on the report. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tagged, tag:<tag_value>. If providing multiple groupings, join as comma separated values: groupings=provider,service,region
	Groupings string `json:"groupings,omitempty"`

	// The tokens of the SavedFilters to apply to the CostReport.
	SavedFilterTokens []string `json:"saved_filter_tokens"`

	// settings
	Settings *UpdateCostReportSettings `json:"settings,omitempty"`

	// The title of the CostReport.
	Title string `json:"title,omitempty"`
}

// Validate validates this update cost report
func (m *UpdateCostReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessMetricTokensWithMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCostReport) validateBusinessMetricTokensWithMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessMetricTokensWithMetadata) { // not required
		return nil
	}

	for i := 0; i < len(m.BusinessMetricTokensWithMetadata); i++ {
		if swag.IsZero(m.BusinessMetricTokensWithMetadata[i]) { // not required
			continue
		}

		if m.BusinessMetricTokensWithMetadata[i] != nil {
			if err := m.BusinessMetricTokensWithMetadata[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("business_metric_tokens_with_metadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("business_metric_tokens_with_metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateCostReport) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update cost report based on the context it is used
func (m *UpdateCostReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBusinessMetricTokensWithMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCostReport) contextValidateBusinessMetricTokensWithMetadata(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BusinessMetricTokensWithMetadata); i++ {

		if m.BusinessMetricTokensWithMetadata[i] != nil {

			if swag.IsZero(m.BusinessMetricTokensWithMetadata[i]) { // not required
				return nil
			}

			if err := m.BusinessMetricTokensWithMetadata[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("business_metric_tokens_with_metadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("business_metric_tokens_with_metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateCostReport) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {

		if swag.IsZero(m.Settings) { // not required
			return nil
		}

		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateCostReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateCostReport) UnmarshalBinary(b []byte) error {
	var res UpdateCostReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateCostReportBusinessMetricTokensWithMetadataItems0 update cost report business metric tokens with metadata items0
//
// swagger:model UpdateCostReportBusinessMetricTokensWithMetadataItems0
type UpdateCostReportBusinessMetricTokensWithMetadataItems0 struct {

	// The token of the BusinessMetric to attach to the CostReport.
	// Required: true
	BusinessMetricToken *string `json:"business_metric_token"`

	// Determines the scale of the BusinessMetric's values within the CostReport.
	// Enum: [per_unit per_hundred per_thousand per_million per_billion]
	UnitScale *string `json:"unit_scale,omitempty"`
}

// Validate validates this update cost report business metric tokens with metadata items0
func (m *UpdateCostReportBusinessMetricTokensWithMetadataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessMetricToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitScale(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCostReportBusinessMetricTokensWithMetadataItems0) validateBusinessMetricToken(formats strfmt.Registry) error {

	if err := validate.Required("business_metric_token", "body", m.BusinessMetricToken); err != nil {
		return err
	}

	return nil
}

var updateCostReportBusinessMetricTokensWithMetadataItems0TypeUnitScalePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["per_unit","per_hundred","per_thousand","per_million","per_billion"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateCostReportBusinessMetricTokensWithMetadataItems0TypeUnitScalePropEnum = append(updateCostReportBusinessMetricTokensWithMetadataItems0TypeUnitScalePropEnum, v)
	}
}

const (

	// UpdateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerUnit captures enum value "per_unit"
	UpdateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerUnit string = "per_unit"

	// UpdateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerHundred captures enum value "per_hundred"
	UpdateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerHundred string = "per_hundred"

	// UpdateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerThousand captures enum value "per_thousand"
	UpdateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerThousand string = "per_thousand"

	// UpdateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerMillion captures enum value "per_million"
	UpdateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerMillion string = "per_million"

	// UpdateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerBillion captures enum value "per_billion"
	UpdateCostReportBusinessMetricTokensWithMetadataItems0UnitScalePerBillion string = "per_billion"
)

// prop value enum
func (m *UpdateCostReportBusinessMetricTokensWithMetadataItems0) validateUnitScaleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateCostReportBusinessMetricTokensWithMetadataItems0TypeUnitScalePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateCostReportBusinessMetricTokensWithMetadataItems0) validateUnitScale(formats strfmt.Registry) error {
	if swag.IsZero(m.UnitScale) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnitScaleEnum("unit_scale", "body", *m.UnitScale); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update cost report business metric tokens with metadata items0 based on context it is used
func (m *UpdateCostReportBusinessMetricTokensWithMetadataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateCostReportBusinessMetricTokensWithMetadataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateCostReportBusinessMetricTokensWithMetadataItems0) UnmarshalBinary(b []byte) error {
	var res UpdateCostReportBusinessMetricTokensWithMetadataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateCostReportSettings Report settings.
//
// swagger:model UpdateCostReportSettings
type UpdateCostReportSettings struct {

	// Report will amortize.
	Amortize bool `json:"amortize,omitempty"`

	// Report will include credits.
	IncludeCredits bool `json:"include_credits,omitempty"`

	// Report will include discounts.
	IncludeDiscounts bool `json:"include_discounts,omitempty"`

	// Report will include refunds.
	IncludeRefunds bool `json:"include_refunds,omitempty"`

	// Report will include tax.
	IncludeTax bool `json:"include_tax,omitempty"`

	// Report will show unallocated costs.
	Unallocated bool `json:"unallocated,omitempty"`
}

// Validate validates this update cost report settings
func (m *UpdateCostReportSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update cost report settings based on context it is used
func (m *UpdateCostReportSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateCostReportSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateCostReportSettings) UnmarshalBinary(b []byte) error {
	var res UpdateCostReportSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
