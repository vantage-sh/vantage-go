// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudwatchFields cloudwatch fields
//
// swagger:model CloudwatchFields
type CloudwatchFields struct {

	// The dimensions used to pull specific statistical data for Cloudwatch metrics.
	Dimensions []*CloudwatchDimension `json:"dimensions"`

	// The dimension used to aggregate the Cloudwatch metrics.
	LabelDimension string `json:"label_dimension,omitempty"`

	// The metric name used to import Cloudwatch metrics.
	// Example: CPUUtilization
	MetricName string `json:"metric_name,omitempty"`

	// The namespace used to import Cloudwatch metrics.
	// Example: AWS/EC2
	Namespace string `json:"namespace,omitempty"`

	// The region used to import Cloudwatch metrics.
	// Example: us-east-1
	Region string `json:"region,omitempty"`

	// The time aggregation function used to import Cloudwatch metrics.
	// Example: Average
	// Enum: ["Sum","Average","Minimum","Maximum"]
	Stat string `json:"stat,omitempty"`
}

// Validate validates this cloudwatch fields
func (m *CloudwatchFields) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudwatchFields) validateDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.Dimensions) { // not required
		return nil
	}

	for i := 0; i < len(m.Dimensions); i++ {
		if swag.IsZero(m.Dimensions[i]) { // not required
			continue
		}

		if m.Dimensions[i] != nil {
			if err := m.Dimensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dimensions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dimensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var cloudwatchFieldsTypeStatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sum","Average","Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudwatchFieldsTypeStatPropEnum = append(cloudwatchFieldsTypeStatPropEnum, v)
	}
}

const (

	// CloudwatchFieldsStatSum captures enum value "Sum"
	CloudwatchFieldsStatSum string = "Sum"

	// CloudwatchFieldsStatAverage captures enum value "Average"
	CloudwatchFieldsStatAverage string = "Average"

	// CloudwatchFieldsStatMinimum captures enum value "Minimum"
	CloudwatchFieldsStatMinimum string = "Minimum"

	// CloudwatchFieldsStatMaximum captures enum value "Maximum"
	CloudwatchFieldsStatMaximum string = "Maximum"
)

// prop value enum
func (m *CloudwatchFields) validateStatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cloudwatchFieldsTypeStatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CloudwatchFields) validateStat(formats strfmt.Registry) error {
	if swag.IsZero(m.Stat) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatEnum("stat", "body", m.Stat); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cloudwatch fields based on the context it is used
func (m *CloudwatchFields) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudwatchFields) contextValidateDimensions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Dimensions); i++ {

		if m.Dimensions[i] != nil {

			if swag.IsZero(m.Dimensions[i]) { // not required
				return nil
			}

			if err := m.Dimensions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dimensions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dimensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudwatchFields) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudwatchFields) UnmarshalBinary(b []byte) error {
	var res CloudwatchFields
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
