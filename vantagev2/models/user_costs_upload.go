// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserCostsUpload UserCostsUpload model
//
// swagger:model UserCostsUpload
type UserCostsUpload struct {

	// The total amount of the costs in the UserCostsUpload.
	// Example: 1234.56
	Amount string `json:"amount,omitempty"`

	// When the UserCostsUpload was uploaded.
	// Example: 2021-01-01T00:00:00Z
	CreatedAt string `json:"created_at,omitempty"`

	// The token of the Creator of the UserCostsUpload.
	// Example: usr_1234
	CreatedByToken string `json:"created_by_token,omitempty"`

	// The end date of the costs in the UserCostsUpload.
	// Example: 2021-01-31
	EndDate string `json:"end_date,omitempty"`

	// The filename of the uploaded costs UserCostsUpload.
	// Example: usr_csts_upld_1234.parquet
	Filename string `json:"filename,omitempty"`

	// Import status of the UserCostsUpload.
	// Example: processing
	ImportStatus string `json:"import_status,omitempty"`

	// The start date of the costs in the UserCostsUpload.
	// Example: 2021-01-01
	StartDate string `json:"start_date,omitempty"`

	// The token of the UserCostsUpload.
	// Example: usr_csts_upld_1234
	Token string `json:"token,omitempty"`
}

// Validate validates this user costs upload
func (m *UserCostsUpload) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user costs upload based on context it is used
func (m *UserCostsUpload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserCostsUpload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserCostsUpload) UnmarshalBinary(b []byte) error {
	var res UserCostsUpload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
