// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Invoice Invoice model
//
// swagger:model Invoice
type Invoice struct {

	// Name of the managed account this invoice belongs to
	AccountName string `json:"account_name,omitempty"`

	// Token of the managed account this invoice belongs to
	AccountToken string `json:"account_token,omitempty"`

	// End date of the billing period. ISO 8601 formatted.
	BillingPeriodEnd string `json:"billing_period_end,omitempty"`

	// Start date of the billing period. ISO 8601 formatted.
	BillingPeriodStart string `json:"billing_period_start,omitempty"`

	// The date and time, in UTC, the invoice was created. ISO 8601 formatted.
	CreatedAt string `json:"created_at,omitempty"`

	// Sequential invoice number for the MSP account
	InvoiceNumber string `json:"invoice_number,omitempty"`

	// Token of the MSP account that owns this invoice
	MspAccountToken string `json:"msp_account_token,omitempty"`

	// Current status of the invoice
	Status string `json:"status,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// Total amount for the invoice period
	Total string `json:"total,omitempty"`

	// The date and time, in UTC, the invoice was last updated. ISO 8601 formatted.
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this invoice
func (m *Invoice) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this invoice based on context it is used
func (m *Invoice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Invoice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Invoice) UnmarshalBinary(b []byte) error {
	var res Invoice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
