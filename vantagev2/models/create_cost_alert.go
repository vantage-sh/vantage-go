// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCostAlert Create a new Cost Alert
//
// swagger:model createCostAlert
type CreateCostAlert struct {

	// The email recipients for the Cost Alert.
	EmailRecipients []string `json:"email_recipients"`

	// The period of time used to compare costs. Options are 'day', 'week', 'month', 'quarter'.
	// Required: true
	Interval *string `json:"interval"`

	// The tokens of the reports to alert on.
	ReportTokens []string `json:"report_tokens"`

	// The Slack channels that will receive the alert.
	SlackChannels []string `json:"slack_channels"`

	// The Microsoft Teams channels that will receive the alert.
	TeamsChannels []string `json:"teams_channels"`

	// The threshold value for the Cost Alert.
	// Required: true
	Threshold *float32 `json:"threshold"`

	// The title of the Cost Alert.
	// Required: true
	Title *string `json:"title"`

	// The unit type used to compare costs. Options are 'currency' or 'percentage'.
	// Required: true
	UnitType *string `json:"unit_type"`

	// The token of the Workspace to add the Cost Alert to.
	// Required: true
	WorkspaceToken *string `json:"workspace_token"`
}

// Validate validates this create cost alert
func (m *CreateCostAlert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCostAlert) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *CreateCostAlert) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", m.Threshold); err != nil {
		return err
	}

	return nil
}

func (m *CreateCostAlert) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *CreateCostAlert) validateUnitType(formats strfmt.Registry) error {

	if err := validate.Required("unit_type", "body", m.UnitType); err != nil {
		return err
	}

	return nil
}

func (m *CreateCostAlert) validateWorkspaceToken(formats strfmt.Registry) error {

	if err := validate.Required("workspace_token", "body", m.WorkspaceToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create cost alert based on context it is used
func (m *CreateCostAlert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateCostAlert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCostAlert) UnmarshalBinary(b []byte) error {
	var res CreateCostAlert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
