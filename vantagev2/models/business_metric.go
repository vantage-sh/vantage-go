// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BusinessMetric BusinessMetric model
//
// swagger:model BusinessMetric
type BusinessMetric struct {

	// The tokens for any CostReports that use the BusinessMetric, the unit scale, and label filter.
	CostReportTokensWithMetadata []*AttachedCostReportForBusinessMetric `json:"cost_report_tokens_with_metadata"`

	// The token of the Creator of the BusinessMetric.
	// Example: usr_1234
	CreatedByToken string `json:"created_by_token,omitempty"`

	// The fields used to generate the UnitCosts for the BusinessMetric.
	ImportFields interface{} `json:"import_fields,omitempty"`

	// The type of import for the BusinessMetric.
	// Example: datadog_metrics
	// Enum: ["datadog_metrics","cloudwatch","csv"]
	ImportType string `json:"import_type,omitempty"`

	// The Integration token used to import the BusinessMetric.
	IntegrationToken string `json:"integration_token,omitempty"`

	// The title of the BusinessMetric.
	// Example: Total Revenue
	Title string `json:"title,omitempty"`

	// The token of the BusinessMetric.
	// Example: bsnss_mtrc_1234
	Token string `json:"token,omitempty"`
}

// Validate validates this business metric
func (m *BusinessMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCostReportTokensWithMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BusinessMetric) validateCostReportTokensWithMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.CostReportTokensWithMetadata) { // not required
		return nil
	}

	for i := 0; i < len(m.CostReportTokensWithMetadata); i++ {
		if swag.IsZero(m.CostReportTokensWithMetadata[i]) { // not required
			continue
		}

		if m.CostReportTokensWithMetadata[i] != nil {
			if err := m.CostReportTokensWithMetadata[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cost_report_tokens_with_metadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cost_report_tokens_with_metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var businessMetricTypeImportTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["datadog_metrics","cloudwatch","csv"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		businessMetricTypeImportTypePropEnum = append(businessMetricTypeImportTypePropEnum, v)
	}
}

const (

	// BusinessMetricImportTypeDatadogMetrics captures enum value "datadog_metrics"
	BusinessMetricImportTypeDatadogMetrics string = "datadog_metrics"

	// BusinessMetricImportTypeCloudwatch captures enum value "cloudwatch"
	BusinessMetricImportTypeCloudwatch string = "cloudwatch"

	// BusinessMetricImportTypeCsv captures enum value "csv"
	BusinessMetricImportTypeCsv string = "csv"
)

// prop value enum
func (m *BusinessMetric) validateImportTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, businessMetricTypeImportTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BusinessMetric) validateImportType(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportType) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportTypeEnum("import_type", "body", m.ImportType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this business metric based on the context it is used
func (m *BusinessMetric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCostReportTokensWithMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BusinessMetric) contextValidateCostReportTokensWithMetadata(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CostReportTokensWithMetadata); i++ {

		if m.CostReportTokensWithMetadata[i] != nil {

			if swag.IsZero(m.CostReportTokensWithMetadata[i]) { // not required
				return nil
			}

			if err := m.CostReportTokensWithMetadata[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cost_report_tokens_with_metadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cost_report_tokens_with_metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BusinessMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BusinessMetric) UnmarshalBinary(b []byte) error {
	var res BusinessMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
