// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataExport DataExport model
//
// swagger:model DataExport
type DataExport struct {

	// attributes
	Attributes string `json:"attributes,omitempty"`

	// created at
	// Example: 2025-03-20T12:00:00Z
	CreatedAt string `json:"created_at,omitempty"`

	// export type
	// Example: cost_report
	ExportType string `json:"export_type,omitempty"`

	// manifest
	Manifest *DataExportManifest `json:"manifest,omitempty"`

	// status
	// Example: pending
	Status string `json:"status,omitempty"`

	// token
	// Example: dta_xprt_abcd1234567890
	Token string `json:"token,omitempty"`
}

// Validate validates this data export
func (m *DataExport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManifest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataExport) validateManifest(formats strfmt.Registry) error {
	if swag.IsZero(m.Manifest) { // not required
		return nil
	}

	if m.Manifest != nil {
		if err := m.Manifest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manifest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manifest")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this data export based on the context it is used
func (m *DataExport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateManifest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataExport) contextValidateManifest(ctx context.Context, formats strfmt.Registry) error {

	if m.Manifest != nil {

		if swag.IsZero(m.Manifest) { // not required
			return nil
		}

		if err := m.Manifest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manifest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manifest")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataExport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataExport) UnmarshalBinary(b []byte) error {
	var res DataExport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
