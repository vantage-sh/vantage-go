// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateBillingProfile Create a billing profile (MSP invoicing required).
//
// swagger:model createBillingProfile
type CreateBillingProfile struct {

	// banking information attributes
	BankingInformationAttributes *CreateBillingProfileBankingInformationAttributes `json:"banking_information_attributes,omitempty"`

	// billing information attributes
	BillingInformationAttributes *CreateBillingProfileBillingInformationAttributes `json:"billing_information_attributes,omitempty"`

	// business information attributes
	BusinessInformationAttributes *CreateBillingProfileBusinessInformationAttributes `json:"business_information_attributes,omitempty"`

	// Display name for the billing profile
	// Required: true
	Nickname *string `json:"nickname"`
}

// Validate validates this create billing profile
func (m *CreateBillingProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankingInformationAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingInformationAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessInformationAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNickname(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBillingProfile) validateBankingInformationAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.BankingInformationAttributes) { // not required
		return nil
	}

	if m.BankingInformationAttributes != nil {
		if err := m.BankingInformationAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("banking_information_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("banking_information_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *CreateBillingProfile) validateBillingInformationAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingInformationAttributes) { // not required
		return nil
	}

	if m.BillingInformationAttributes != nil {
		if err := m.BillingInformationAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_information_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billing_information_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *CreateBillingProfile) validateBusinessInformationAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessInformationAttributes) { // not required
		return nil
	}

	if m.BusinessInformationAttributes != nil {
		if err := m.BusinessInformationAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business_information_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("business_information_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *CreateBillingProfile) validateNickname(formats strfmt.Registry) error {

	if err := validate.Required("nickname", "body", m.Nickname); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create billing profile based on the context it is used
func (m *CreateBillingProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBankingInformationAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillingInformationAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBusinessInformationAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBillingProfile) contextValidateBankingInformationAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.BankingInformationAttributes != nil {

		if swag.IsZero(m.BankingInformationAttributes) { // not required
			return nil
		}

		if err := m.BankingInformationAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("banking_information_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("banking_information_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *CreateBillingProfile) contextValidateBillingInformationAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.BillingInformationAttributes != nil {

		if swag.IsZero(m.BillingInformationAttributes) { // not required
			return nil
		}

		if err := m.BillingInformationAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_information_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billing_information_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *CreateBillingProfile) contextValidateBusinessInformationAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.BusinessInformationAttributes != nil {

		if swag.IsZero(m.BusinessInformationAttributes) { // not required
			return nil
		}

		if err := m.BusinessInformationAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business_information_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("business_information_attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateBillingProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBillingProfile) UnmarshalBinary(b []byte) error {
	var res CreateBillingProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateBillingProfileBankingInformationAttributes Banking details (MSP accounts only)
//
// swagger:model CreateBillingProfileBankingInformationAttributes
type CreateBillingProfileBankingInformationAttributes struct {

	// Name of the bank
	BankName string `json:"bank_name,omitempty"`

	// Name of the account beneficiary
	BeneficiaryName string `json:"beneficiary_name,omitempty"`

	// secure data
	SecureData *CreateBillingProfileBankingInformationAttributesSecureData `json:"secure_data,omitempty"`

	// Tax identification number
	TaxID string `json:"tax_id,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this create billing profile banking information attributes
func (m *CreateBillingProfileBankingInformationAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSecureData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBillingProfileBankingInformationAttributes) validateSecureData(formats strfmt.Registry) error {
	if swag.IsZero(m.SecureData) { // not required
		return nil
	}

	if m.SecureData != nil {
		if err := m.SecureData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("banking_information_attributes" + "." + "secure_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("banking_information_attributes" + "." + "secure_data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create billing profile banking information attributes based on the context it is used
func (m *CreateBillingProfileBankingInformationAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecureData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBillingProfileBankingInformationAttributes) contextValidateSecureData(ctx context.Context, formats strfmt.Registry) error {

	if m.SecureData != nil {

		if swag.IsZero(m.SecureData) { // not required
			return nil
		}

		if err := m.SecureData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("banking_information_attributes" + "." + "secure_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("banking_information_attributes" + "." + "secure_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateBillingProfileBankingInformationAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBillingProfileBankingInformationAttributes) UnmarshalBinary(b []byte) error {
	var res CreateBillingProfileBankingInformationAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateBillingProfileBankingInformationAttributesSecureData Encrypted banking details
//
// swagger:model CreateBillingProfileBankingInformationAttributesSecureData
type CreateBillingProfileBankingInformationAttributesSecureData struct {

	// Bank account number (US)
	AccountNumber string `json:"account_number,omitempty"`

	// International Bank Account Number (EU)
	Iban string `json:"iban,omitempty"`

	// Bank routing number (US)
	RoutingNumber string `json:"routing_number,omitempty"`

	// SWIFT/BIC code (EU)
	SwiftBic string `json:"swift_bic,omitempty"`
}

// Validate validates this create billing profile banking information attributes secure data
func (m *CreateBillingProfileBankingInformationAttributesSecureData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create billing profile banking information attributes secure data based on context it is used
func (m *CreateBillingProfileBankingInformationAttributesSecureData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateBillingProfileBankingInformationAttributesSecureData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBillingProfileBankingInformationAttributesSecureData) UnmarshalBinary(b []byte) error {
	var res CreateBillingProfileBankingInformationAttributesSecureData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateBillingProfileBillingInformationAttributes Billing address and contact information
//
// swagger:model CreateBillingProfileBillingInformationAttributes
type CreateBillingProfileBillingInformationAttributes struct {

	// First line of billing address
	AddressLine1 string `json:"address_line_1,omitempty"`

	// Second line of billing address
	AddressLine2 string `json:"address_line_2,omitempty"`

	// Array of billing email addresses
	BillingEmail []string `json:"billing_email"`

	// City for billing address
	City string `json:"city,omitempty"`

	// Company name for billing
	CompanyName string `json:"company_name,omitempty"`

	// ISO country code
	CountryCode string `json:"country_code,omitempty"`

	// Postal or ZIP code
	PostalCode string `json:"postal_code,omitempty"`

	// State or province for billing address
	State string `json:"state,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this create billing profile billing information attributes
func (m *CreateBillingProfileBillingInformationAttributes) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create billing profile billing information attributes based on context it is used
func (m *CreateBillingProfileBillingInformationAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateBillingProfileBillingInformationAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBillingProfileBillingInformationAttributes) UnmarshalBinary(b []byte) error {
	var res CreateBillingProfileBillingInformationAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateBillingProfileBusinessInformationAttributes Business information and custom fields
//
// swagger:model CreateBillingProfileBusinessInformationAttributes
type CreateBillingProfileBusinessInformationAttributes struct {

	// metadata
	Metadata *CreateBillingProfileBusinessInformationAttributesMetadata `json:"metadata,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this create billing profile business information attributes
func (m *CreateBillingProfileBusinessInformationAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBillingProfileBusinessInformationAttributes) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business_information_attributes" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("business_information_attributes" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create billing profile business information attributes based on the context it is used
func (m *CreateBillingProfileBusinessInformationAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBillingProfileBusinessInformationAttributes) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {

		if swag.IsZero(m.Metadata) { // not required
			return nil
		}

		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business_information_attributes" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("business_information_attributes" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateBillingProfileBusinessInformationAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBillingProfileBusinessInformationAttributes) UnmarshalBinary(b []byte) error {
	var res CreateBillingProfileBusinessInformationAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateBillingProfileBusinessInformationAttributesMetadata Business metadata including custom fields
//
// swagger:model CreateBillingProfileBusinessInformationAttributesMetadata
type CreateBillingProfileBusinessInformationAttributesMetadata struct {

	// Array of custom field objects
	CustomFields []*CreateBillingProfileBusinessInformationAttributesMetadataCustomFieldsItems0 `json:"custom_fields"`
}

// Validate validates this create billing profile business information attributes metadata
func (m *CreateBillingProfileBusinessInformationAttributesMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBillingProfileBusinessInformationAttributesMetadata) validateCustomFields(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomFields) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomFields); i++ {
		if swag.IsZero(m.CustomFields[i]) { // not required
			continue
		}

		if m.CustomFields[i] != nil {
			if err := m.CustomFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("business_information_attributes" + "." + "metadata" + "." + "custom_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("business_information_attributes" + "." + "metadata" + "." + "custom_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create billing profile business information attributes metadata based on the context it is used
func (m *CreateBillingProfileBusinessInformationAttributesMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateBillingProfileBusinessInformationAttributesMetadata) contextValidateCustomFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomFields); i++ {

		if m.CustomFields[i] != nil {

			if swag.IsZero(m.CustomFields[i]) { // not required
				return nil
			}

			if err := m.CustomFields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("business_information_attributes" + "." + "metadata" + "." + "custom_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("business_information_attributes" + "." + "metadata" + "." + "custom_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateBillingProfileBusinessInformationAttributesMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBillingProfileBusinessInformationAttributesMetadata) UnmarshalBinary(b []byte) error {
	var res CreateBillingProfileBusinessInformationAttributesMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateBillingProfileBusinessInformationAttributesMetadataCustomFieldsItems0 create billing profile business information attributes metadata custom fields items0
//
// swagger:model CreateBillingProfileBusinessInformationAttributesMetadataCustomFieldsItems0
type CreateBillingProfileBusinessInformationAttributesMetadataCustomFieldsItems0 struct {

	// Custom field name
	Name string `json:"name,omitempty"`

	// Custom field value
	Value string `json:"value,omitempty"`
}

// Validate validates this create billing profile business information attributes metadata custom fields items0
func (m *CreateBillingProfileBusinessInformationAttributesMetadataCustomFieldsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create billing profile business information attributes metadata custom fields items0 based on context it is used
func (m *CreateBillingProfileBusinessInformationAttributesMetadataCustomFieldsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateBillingProfileBusinessInformationAttributesMetadataCustomFieldsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateBillingProfileBusinessInformationAttributesMetadataCustomFieldsItems0) UnmarshalBinary(b []byte) error {
	var res CreateBillingProfileBusinessInformationAttributesMetadataCustomFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
