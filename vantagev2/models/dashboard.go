// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Dashboard Dashboard model
//
// swagger:model Dashboard
type Dashboard struct {

	// The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.
	// Example: 2023-08-04T00:00:00Z
	CreatedAt string `json:"created_at,omitempty"`

	// Determines how to group costs in the Dashboard.
	// Enum: ["cumulative","day","week","month"]
	DateBin string `json:"date_bin,omitempty"`

	// Determines the date range in the Dashboard. Guaranteed to be set to 'custom' if 'start_date' and 'end_date' are set.
	// Enum: ["this_month","last_7_days","last_30_days","last_month","last_3_months","last_6_months","custom","last_12_months","last_24_months","last_36_months","next_month","next_3_months","next_6_months","next_12_months"]
	DateInterval string `json:"date_interval,omitempty"`

	// The end date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
	// Example: 2023-09-04
	EndDate string `json:"end_date,omitempty"`

	// The tokens of the Saved Filters used in the Dashboard.
	SavedFilterTokens []string `json:"saved_filter_tokens"`

	// The start date for the date range for CostReports in the Dashboard. ISO 8601 Formatted. Overwrites 'date_interval' if set.
	// Example: 2023-08-04
	StartDate string `json:"start_date,omitempty"`

	// The title of the Dashboard.
	// Example: AWS Dashboard
	Title string `json:"title,omitempty"`

	// token
	// Example: dshbrd_abcd1234567890
	Token string `json:"token,omitempty"`

	// The date and time, in UTC, the Dashboard was created. ISO 8601 Formatted.
	// Example: 2023-08-04T00:00:00Z
	UpdatedAt string `json:"updated_at,omitempty"`

	// The tokens of the widgets displayed in the Dashboard. Currently only supports CostReport tokens.
	WidgetTokens []string `json:"widget_tokens"`

	// The token for the Workspace the Dashboard is a part of.
	// Example: wrkspc_abcd1234567890
	WorkspaceToken string `json:"workspace_token,omitempty"`
}

// Validate validates this dashboard
func (m *Dashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateBin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateInterval(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dashboardTypeDateBinPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cumulative","day","week","month"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dashboardTypeDateBinPropEnum = append(dashboardTypeDateBinPropEnum, v)
	}
}

const (

	// DashboardDateBinCumulative captures enum value "cumulative"
	DashboardDateBinCumulative string = "cumulative"

	// DashboardDateBinDay captures enum value "day"
	DashboardDateBinDay string = "day"

	// DashboardDateBinWeek captures enum value "week"
	DashboardDateBinWeek string = "week"

	// DashboardDateBinMonth captures enum value "month"
	DashboardDateBinMonth string = "month"
)

// prop value enum
func (m *Dashboard) validateDateBinEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dashboardTypeDateBinPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Dashboard) validateDateBin(formats strfmt.Registry) error {
	if swag.IsZero(m.DateBin) { // not required
		return nil
	}

	// value enum
	if err := m.validateDateBinEnum("date_bin", "body", m.DateBin); err != nil {
		return err
	}

	return nil
}

var dashboardTypeDateIntervalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["this_month","last_7_days","last_30_days","last_month","last_3_months","last_6_months","custom","last_12_months","last_24_months","last_36_months","next_month","next_3_months","next_6_months","next_12_months"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dashboardTypeDateIntervalPropEnum = append(dashboardTypeDateIntervalPropEnum, v)
	}
}

const (

	// DashboardDateIntervalThisMonth captures enum value "this_month"
	DashboardDateIntervalThisMonth string = "this_month"

	// DashboardDateIntervalLast7Days captures enum value "last_7_days"
	DashboardDateIntervalLast7Days string = "last_7_days"

	// DashboardDateIntervalLast30Days captures enum value "last_30_days"
	DashboardDateIntervalLast30Days string = "last_30_days"

	// DashboardDateIntervalLastMonth captures enum value "last_month"
	DashboardDateIntervalLastMonth string = "last_month"

	// DashboardDateIntervalLast3Months captures enum value "last_3_months"
	DashboardDateIntervalLast3Months string = "last_3_months"

	// DashboardDateIntervalLast6Months captures enum value "last_6_months"
	DashboardDateIntervalLast6Months string = "last_6_months"

	// DashboardDateIntervalCustom captures enum value "custom"
	DashboardDateIntervalCustom string = "custom"

	// DashboardDateIntervalLast12Months captures enum value "last_12_months"
	DashboardDateIntervalLast12Months string = "last_12_months"

	// DashboardDateIntervalLast24Months captures enum value "last_24_months"
	DashboardDateIntervalLast24Months string = "last_24_months"

	// DashboardDateIntervalLast36Months captures enum value "last_36_months"
	DashboardDateIntervalLast36Months string = "last_36_months"

	// DashboardDateIntervalNextMonth captures enum value "next_month"
	DashboardDateIntervalNextMonth string = "next_month"

	// DashboardDateIntervalNext3Months captures enum value "next_3_months"
	DashboardDateIntervalNext3Months string = "next_3_months"

	// DashboardDateIntervalNext6Months captures enum value "next_6_months"
	DashboardDateIntervalNext6Months string = "next_6_months"

	// DashboardDateIntervalNext12Months captures enum value "next_12_months"
	DashboardDateIntervalNext12Months string = "next_12_months"
)

// prop value enum
func (m *Dashboard) validateDateIntervalEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dashboardTypeDateIntervalPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Dashboard) validateDateInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.DateInterval) { // not required
		return nil
	}

	// value enum
	if err := m.validateDateIntervalEnum("date_interval", "body", m.DateInterval); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dashboard based on context it is used
func (m *Dashboard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Dashboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dashboard) UnmarshalBinary(b []byte) error {
	var res Dashboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
