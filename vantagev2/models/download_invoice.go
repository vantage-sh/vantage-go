// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DownloadInvoice Download invoice file (PDF or CSV).
//
// swagger:model downloadInvoice
type DownloadInvoice struct {

	// Type of file to download (pdf or csv)
	// Required: true
	// Enum: ["pdf","csv"]
	FileType *string `json:"file_type"`
}

// Validate validates this download invoice
func (m *DownloadInvoice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var downloadInvoiceTypeFileTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pdf","csv"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		downloadInvoiceTypeFileTypePropEnum = append(downloadInvoiceTypeFileTypePropEnum, v)
	}
}

const (

	// DownloadInvoiceFileTypePdf captures enum value "pdf"
	DownloadInvoiceFileTypePdf string = "pdf"

	// DownloadInvoiceFileTypeCsv captures enum value "csv"
	DownloadInvoiceFileTypeCsv string = "csv"
)

// prop value enum
func (m *DownloadInvoice) validateFileTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, downloadInvoiceTypeFileTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DownloadInvoice) validateFileType(formats strfmt.Registry) error {

	if err := validate.Required("file_type", "body", m.FileType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFileTypeEnum("file_type", "body", *m.FileType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this download invoice based on context it is used
func (m *DownloadInvoice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DownloadInvoice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DownloadInvoice) UnmarshalBinary(b []byte) error {
	var res DownloadInvoice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
