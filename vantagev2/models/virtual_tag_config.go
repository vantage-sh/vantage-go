// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualTagConfig VirtualTagConfig model
//
// swagger:model VirtualTagConfig
type VirtualTagConfig struct {

	// The earliest month VirtualTagConfig should be backfilled to.
	// Example: 2023-12-01
	BackfillUntil string `json:"backfill_until,omitempty"`

	// The token of the User who created the VirtualTagConfig.
	// Example: usr_1234
	CreatedByToken string `json:"created_by_token,omitempty"`

	// The key of the VirtualTagConfig.
	// Example: Cost Center
	Key string `json:"key,omitempty"`

	// Whether the VirtualTagConfig can override a provider-supplied tag on a matching Cost.
	Overridable bool `json:"overridable,omitempty"`

	// The token of the VirtualTagConfig.
	// Example: vtag_1234
	Token string `json:"token,omitempty"`

	// Values for the VirtualTagConfig, with match precedence determined by their relative order in the list.
	Values []*VirtualTagConfigValue `json:"values"`
}

// Validate validates this virtual tag config
func (m *VirtualTagConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualTagConfig) validateValues(formats strfmt.Registry) error {
	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this virtual tag config based on the context it is used
func (m *VirtualTagConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualTagConfig) contextValidateValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Values); i++ {

		if m.Values[i] != nil {

			if swag.IsZero(m.Values[i]) { // not required
				return nil
			}

			if err := m.Values[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualTagConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualTagConfig) UnmarshalBinary(b []byte) error {
	var res VirtualTagConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
