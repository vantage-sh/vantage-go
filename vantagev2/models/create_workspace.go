// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateWorkspace Create a workspace
//
// swagger:model createWorkspace
type CreateWorkspace struct {

	// Currency code for the workspace.
	Currency string `json:"currency,omitempty"`

	// Enable currency conversion for the workspace.
	EnableCurrencyConversion *bool `json:"enable_currency_conversion,omitempty"`

	// The date to use for currency conversion.
	// Enum: ["daily_rate","end_of_billing_period_rate"]
	ExchangeRateDate *string `json:"exchange_rate_date,omitempty"`

	// Name of the workspace.
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this create workspace
func (m *CreateWorkspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExchangeRateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createWorkspaceTypeExchangeRateDatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["daily_rate","end_of_billing_period_rate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createWorkspaceTypeExchangeRateDatePropEnum = append(createWorkspaceTypeExchangeRateDatePropEnum, v)
	}
}

const (

	// CreateWorkspaceExchangeRateDateDailyRate captures enum value "daily_rate"
	CreateWorkspaceExchangeRateDateDailyRate string = "daily_rate"

	// CreateWorkspaceExchangeRateDateEndOfBillingPeriodRate captures enum value "end_of_billing_period_rate"
	CreateWorkspaceExchangeRateDateEndOfBillingPeriodRate string = "end_of_billing_period_rate"
)

// prop value enum
func (m *CreateWorkspace) validateExchangeRateDateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createWorkspaceTypeExchangeRateDatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateWorkspace) validateExchangeRateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeRateDate) { // not required
		return nil
	}

	// value enum
	if err := m.validateExchangeRateDateEnum("exchange_rate_date", "body", *m.ExchangeRateDate); err != nil {
		return err
	}

	return nil
}

func (m *CreateWorkspace) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create workspace based on context it is used
func (m *CreateWorkspace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateWorkspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateWorkspace) UnmarshalBinary(b []byte) error {
	var res CreateWorkspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
