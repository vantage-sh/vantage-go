// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateVirtualTagConfig Create a new VirtualTagConfig.
//
// swagger:model createVirtualTagConfig
type CreateVirtualTagConfig struct {

	// The earliest month the VirtualTagConfig should be backfilled to.
	// Format: date
	BackfillUntil strfmt.Date `json:"backfill_until,omitempty"`

	// The key of the VirtualTagConfig.
	// Required: true
	Key *string `json:"key"`

	// Whether the VirtualTagConfig can override a provider-supplied tag on a matching Cost.
	// Required: true
	Overridable *bool `json:"overridable"`

	// Values for the VirtualTagConfig, with match precedence determined by order in the list.
	Values []*CreateVirtualTagConfigValuesItems0 `json:"values"`
}

// Validate validates this create virtual tag config
func (m *CreateVirtualTagConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackfillUntil(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverridable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVirtualTagConfig) validateBackfillUntil(formats strfmt.Registry) error {
	if swag.IsZero(m.BackfillUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("backfill_until", "body", "date", m.BackfillUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateVirtualTagConfig) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *CreateVirtualTagConfig) validateOverridable(formats strfmt.Registry) error {

	if err := validate.Required("overridable", "body", m.Overridable); err != nil {
		return err
	}

	return nil
}

func (m *CreateVirtualTagConfig) validateValues(formats strfmt.Registry) error {
	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create virtual tag config based on the context it is used
func (m *CreateVirtualTagConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVirtualTagConfig) contextValidateValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Values); i++ {

		if m.Values[i] != nil {

			if swag.IsZero(m.Values[i]) { // not required
				return nil
			}

			if err := m.Values[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateVirtualTagConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateVirtualTagConfig) UnmarshalBinary(b []byte) error {
	var res CreateVirtualTagConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateVirtualTagConfigValuesItems0 create virtual tag config values items0
//
// swagger:model CreateVirtualTagConfigValuesItems0
type CreateVirtualTagConfigValuesItems0 struct {

	// The filter query language to apply to the value. Additional documentation available at https://docs.vantage.sh/vql.
	Filter string `json:"filter,omitempty"`

	// The name of the value.
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this create virtual tag config values items0
func (m *CreateVirtualTagConfigValuesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVirtualTagConfigValuesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create virtual tag config values items0 based on context it is used
func (m *CreateVirtualTagConfigValuesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateVirtualTagConfigValuesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateVirtualTagConfigValuesItems0) UnmarshalBinary(b []byte) error {
	var res CreateVirtualTagConfigValuesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
