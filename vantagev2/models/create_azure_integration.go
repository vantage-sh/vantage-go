// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAzureIntegration Create an Azure Integration
//
// swagger:model createAzureIntegration
type CreateAzureIntegration struct {

	// Service Principal Application ID.
	// Required: true
	AppID *string `json:"app_id"`

	// Service Principal Password.
	// Required: true
	Password *string `json:"password"`

	// Azure AD Tenant ID.
	// Required: true
	Tenant *string `json:"tenant"`
}

// Validate validates this create azure integration
func (m *CreateAzureIntegration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAzureIntegration) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("app_id", "body", m.AppID); err != nil {
		return err
	}

	return nil
}

func (m *CreateAzureIntegration) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *CreateAzureIntegration) validateTenant(formats strfmt.Registry) error {

	if err := validate.Required("tenant", "body", m.Tenant); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create azure integration based on context it is used
func (m *CreateAzureIntegration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateAzureIntegration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAzureIntegration) UnmarshalBinary(b []byte) error {
	var res CreateAzureIntegration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
