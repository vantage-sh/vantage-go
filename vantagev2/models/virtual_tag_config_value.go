// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualTagConfigValue virtual tag config value
//
// swagger:model VirtualTagConfigValue
type VirtualTagConfigValue struct {

	// The token of the associated BusinessMetric.
	// Example: bsnss_mtrc_abc123
	BusinessMetricToken string `json:"business_metric_token,omitempty"`

	// The associated cost metric.
	CostMetric *VirtualTagConfigValueCostMetric `json:"cost_metric,omitempty"`

	// The filter VQL for the Value.
	// Example: costs.provider = 'aws' AND costs.service = 'Amazon Simple Storage Service'
	Filter string `json:"filter,omitempty"`

	// The name of the Value.
	// Example: Informatics
	Name string `json:"name,omitempty"`
}

// Validate validates this virtual tag config value
func (m *VirtualTagConfigValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCostMetric(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualTagConfigValue) validateCostMetric(formats strfmt.Registry) error {
	if swag.IsZero(m.CostMetric) { // not required
		return nil
	}

	if m.CostMetric != nil {
		if err := m.CostMetric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cost_metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cost_metric")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual tag config value based on the context it is used
func (m *VirtualTagConfigValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCostMetric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualTagConfigValue) contextValidateCostMetric(ctx context.Context, formats strfmt.Registry) error {

	if m.CostMetric != nil {

		if swag.IsZero(m.CostMetric) { // not required
			return nil
		}

		if err := m.CostMetric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cost_metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cost_metric")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualTagConfigValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualTagConfigValue) UnmarshalBinary(b []byte) error {
	var res VirtualTagConfigValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
