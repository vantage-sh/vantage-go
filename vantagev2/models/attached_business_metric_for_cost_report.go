// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachedBusinessMetricForCostReport attached business metric for cost report
//
// swagger:model AttachedBusinessMetricForCostReport
type AttachedBusinessMetricForCostReport struct {

	// The token of the BusinessMetric that's attached to the CostReport.
	// Example: bsnss_mtrc_1234
	BusinessMetricToken string `json:"business_metric_token,omitempty"`

	// The labels that the BusinessMetric is filtered by within a particular CostReport.
	LabelFilter []string `json:"label_filter,omitempty"`

	// Determines the scale of the BusinessMetric's values within a particular CostReport.
	// Example: per_hundred
	// Enum: ["per_unit","per_hundred","per_thousand","per_million","per_billion"]
	UnitScale string `json:"unit_scale,omitempty"`
}

// Validate validates this attached business metric for cost report
func (m *AttachedBusinessMetricForCostReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnitScale(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var attachedBusinessMetricForCostReportTypeUnitScalePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["per_unit","per_hundred","per_thousand","per_million","per_billion"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attachedBusinessMetricForCostReportTypeUnitScalePropEnum = append(attachedBusinessMetricForCostReportTypeUnitScalePropEnum, v)
	}
}

const (

	// AttachedBusinessMetricForCostReportUnitScalePerUnit captures enum value "per_unit"
	AttachedBusinessMetricForCostReportUnitScalePerUnit string = "per_unit"

	// AttachedBusinessMetricForCostReportUnitScalePerHundred captures enum value "per_hundred"
	AttachedBusinessMetricForCostReportUnitScalePerHundred string = "per_hundred"

	// AttachedBusinessMetricForCostReportUnitScalePerThousand captures enum value "per_thousand"
	AttachedBusinessMetricForCostReportUnitScalePerThousand string = "per_thousand"

	// AttachedBusinessMetricForCostReportUnitScalePerMillion captures enum value "per_million"
	AttachedBusinessMetricForCostReportUnitScalePerMillion string = "per_million"

	// AttachedBusinessMetricForCostReportUnitScalePerBillion captures enum value "per_billion"
	AttachedBusinessMetricForCostReportUnitScalePerBillion string = "per_billion"
)

// prop value enum
func (m *AttachedBusinessMetricForCostReport) validateUnitScaleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, attachedBusinessMetricForCostReportTypeUnitScalePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AttachedBusinessMetricForCostReport) validateUnitScale(formats strfmt.Registry) error {
	if swag.IsZero(m.UnitScale) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnitScaleEnum("unit_scale", "body", m.UnitScale); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this attached business metric for cost report based on context it is used
func (m *AttachedBusinessMetricForCostReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AttachedBusinessMetricForCostReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttachedBusinessMetricForCostReport) UnmarshalBinary(b []byte) error {
	var res AttachedBusinessMetricForCostReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
