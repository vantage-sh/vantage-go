// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DashboardWidgetSettings dashboard widget settings
//
// swagger:model DashboardWidgetSettings
type DashboardWidgetSettings struct {

	// display type
	// Enum: ["table","chart"]
	DisplayType string `json:"display_type,omitempty"`
}

// Validate validates this dashboard widget settings
func (m *DashboardWidgetSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dashboardWidgetSettingsTypeDisplayTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["table","chart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dashboardWidgetSettingsTypeDisplayTypePropEnum = append(dashboardWidgetSettingsTypeDisplayTypePropEnum, v)
	}
}

const (

	// DashboardWidgetSettingsDisplayTypeTable captures enum value "table"
	DashboardWidgetSettingsDisplayTypeTable string = "table"

	// DashboardWidgetSettingsDisplayTypeChart captures enum value "chart"
	DashboardWidgetSettingsDisplayTypeChart string = "chart"
)

// prop value enum
func (m *DashboardWidgetSettings) validateDisplayTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dashboardWidgetSettingsTypeDisplayTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DashboardWidgetSettings) validateDisplayType(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplayType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDisplayTypeEnum("display_type", "body", m.DisplayType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dashboard widget settings based on context it is used
func (m *DashboardWidgetSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DashboardWidgetSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardWidgetSettings) UnmarshalBinary(b []byte) error {
	var res DashboardWidgetSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
