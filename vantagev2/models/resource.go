// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Resource Resource model
//
// swagger:model Resource
type Resource struct {

	// The provider account where the resource is located.
	AccountID string `json:"account_id,omitempty"`

	// The provider billing account this resource is charged to.
	BillingAccountID string `json:"billing_account_id,omitempty"`

	// The cost of the resource broken down by category.
	Costs []*ResourceCost `json:"costs"`

	// The date and time when Vantage first observed the resource.
	CreatedAt string `json:"created_at,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// Type-specific attributes of the resource.
	Metadata string `json:"metadata,omitempty"`

	// The provider of the resource.
	// Example: aws
	Provider string `json:"provider,omitempty"`

	// The region where the resource is located. Region values are specific to each provider.
	// Example: us-west-2
	Region string `json:"region,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// The kind of resource.
	// Example: aws_instance
	Type string `json:"type,omitempty"`

	// The unique identifier for the resource.
	// Example: i-0a1b2c3d4e5f6g7h8
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this resource
func (m *Resource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resource) validateCosts(formats strfmt.Registry) error {
	if swag.IsZero(m.Costs) { // not required
		return nil
	}

	for i := 0; i < len(m.Costs); i++ {
		if swag.IsZero(m.Costs[i]) { // not required
			continue
		}

		if m.Costs[i] != nil {
			if err := m.Costs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("costs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this resource based on the context it is used
func (m *Resource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resource) contextValidateCosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Costs); i++ {

		if m.Costs[i] != nil {

			if swag.IsZero(m.Costs[i]) { // not required
				return nil
			}

			if err := m.Costs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("costs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Resource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Resource) UnmarshalBinary(b []byte) error {
	var res Resource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
