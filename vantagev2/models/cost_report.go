// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CostReport CostReport model
//
// swagger:model CostReport
type CostReport struct {

	// The tokens for the BusinessMetrics assigned to the CostReport, the unit scale, and label filter.
	BusinessMetricTokensWithMetadata []*AttachedBusinessMetricForCostReport `json:"business_metric_tokens_with_metadata"`

	// The date and time, in UTC, the report was created. ISO 8601 Formatted.
	// Example: 2021-07-09T00:00:00Z
	CreatedAt string `json:"created_at,omitempty"`

	// The filter applied to the CostReport. Additional documentation available at https://docs.vantage.sh/vql.
	Filter string `json:"filter,omitempty"`

	// The token for the Folder the CostReport is a part of.
	FolderToken string `json:"folder_token,omitempty"`

	// The grouping aggregations applied to the filtered data.
	// Example: provider, service
	Groupings string `json:"groupings,omitempty"`

	// The tokens for the SavedFilters assigned to the CostReport.
	SavedFilterTokens []string `json:"saved_filter_tokens"`

	// settings
	Settings *CostReportSettings `json:"settings,omitempty"`

	// The title of the CostReport.
	// Example: Production Environment
	Title string `json:"title,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// The token for the Workspace the CostReport is a part of.
	WorkspaceToken string `json:"workspace_token,omitempty"`
}

// Validate validates this cost report
func (m *CostReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessMetricTokensWithMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CostReport) validateBusinessMetricTokensWithMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessMetricTokensWithMetadata) { // not required
		return nil
	}

	for i := 0; i < len(m.BusinessMetricTokensWithMetadata); i++ {
		if swag.IsZero(m.BusinessMetricTokensWithMetadata[i]) { // not required
			continue
		}

		if m.BusinessMetricTokensWithMetadata[i] != nil {
			if err := m.BusinessMetricTokensWithMetadata[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("business_metric_tokens_with_metadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("business_metric_tokens_with_metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CostReport) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cost report based on the context it is used
func (m *CostReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBusinessMetricTokensWithMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CostReport) contextValidateBusinessMetricTokensWithMetadata(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BusinessMetricTokensWithMetadata); i++ {

		if m.BusinessMetricTokensWithMetadata[i] != nil {

			if swag.IsZero(m.BusinessMetricTokensWithMetadata[i]) { // not required
				return nil
			}

			if err := m.BusinessMetricTokensWithMetadata[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("business_metric_tokens_with_metadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("business_metric_tokens_with_metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CostReport) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {

		if swag.IsZero(m.Settings) { // not required
			return nil
		}

		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CostReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CostReport) UnmarshalBinary(b []byte) error {
	var res CostReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CostReportSettings Report settings.
//
// swagger:model CostReportSettings
type CostReportSettings struct {

	// Report will amortize.
	Amortize *bool `json:"amortize,omitempty"`

	// Report will include credits.
	IncludeCredits *bool `json:"include_credits,omitempty"`

	// Report will include discounts.
	IncludeDiscounts *bool `json:"include_discounts,omitempty"`

	// Report will include refunds.
	IncludeRefunds *bool `json:"include_refunds,omitempty"`

	// Report will include tax.
	IncludeTax *bool `json:"include_tax,omitempty"`

	// Report will show unallocated costs.
	Unallocated *bool `json:"unallocated,omitempty"`
}

// Validate validates this cost report settings
func (m *CostReportSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cost report settings based on context it is used
func (m *CostReportSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CostReportSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CostReportSettings) UnmarshalBinary(b []byte) error {
	var res CostReportSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
