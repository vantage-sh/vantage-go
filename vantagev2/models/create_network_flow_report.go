// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNetworkFlowReport Create a NetworkFlowReport.
//
// swagger:model createNetworkFlowReport
type CreateNetworkFlowReport struct {

	// The date interval of the NetworkFlowReport. Unless 'custom' is used, this is incompatible with 'start_date' and 'end_date' parameters. Defaults to 'last_7_days'.
	// Enum: ["last_3_days","last_7_days","custom"]
	DateInterval string `json:"date_interval,omitempty"`

	// The end date of the NetworkFlowReport. YYYY-MM-DD formatted. Incompatible with 'date_interval' parameter.
	// Format: date
	EndDate strfmt.Date `json:"end_date,omitempty"`

	// The filter query language to apply to the NetworkFlowReport. Additional documentation available at https://docs.vantage.sh/vql.
	Filter string `json:"filter,omitempty"`

	// The flow direction of the NetworkFlowReport.
	// Enum: ["ingress","egress"]
	FlowDirection string `json:"flow_direction,omitempty"`

	// The dimension by which the logs in the report are sorted. Defaults to costs.
	// Enum: ["costs","bytes"]
	FlowWeight string `json:"flow_weight,omitempty"`

	// Grouping values for aggregating data on the NetworkFlowReport. Valid groupings: account_id, az_id, dstaddr, dsthostname, flow_direction, interface_id, instance_id, peer_resource_uuid, peer_account_id, peer_vpc_id, peer_region, peer_az_id, peer_subnet_id, peer_interface_id, peer_instance_id, region, resource_uuid, srcaddr, srchostname, subnet_id, traffic_category, traffic_path, vpc_id.
	Groupings []string `json:"groupings"`

	// The start date of the NetworkFlowReport. YYYY-MM-DD formatted. Incompatible with 'date_interval' parameter.
	// Format: date
	StartDate strfmt.Date `json:"start_date,omitempty"`

	// The title of the NetworkFlowReport.
	// Required: true
	Title *string `json:"title"`

	// The Workspace in which the NetworkFlowReport will be created.
	// Required: true
	WorkspaceToken *string `json:"workspace_token"`
}

// Validate validates this create network flow report
func (m *CreateNetworkFlowReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlowWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkFlowReportTypeDateIntervalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["last_3_days","last_7_days","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkFlowReportTypeDateIntervalPropEnum = append(createNetworkFlowReportTypeDateIntervalPropEnum, v)
	}
}

const (

	// CreateNetworkFlowReportDateIntervalLast3Days captures enum value "last_3_days"
	CreateNetworkFlowReportDateIntervalLast3Days string = "last_3_days"

	// CreateNetworkFlowReportDateIntervalLast7Days captures enum value "last_7_days"
	CreateNetworkFlowReportDateIntervalLast7Days string = "last_7_days"

	// CreateNetworkFlowReportDateIntervalCustom captures enum value "custom"
	CreateNetworkFlowReportDateIntervalCustom string = "custom"
)

// prop value enum
func (m *CreateNetworkFlowReport) validateDateIntervalEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkFlowReportTypeDateIntervalPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateNetworkFlowReport) validateDateInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.DateInterval) { // not required
		return nil
	}

	// value enum
	if err := m.validateDateIntervalEnum("date_interval", "body", m.DateInterval); err != nil {
		return err
	}

	return nil
}

func (m *CreateNetworkFlowReport) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_date", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var createNetworkFlowReportTypeFlowDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingress","egress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkFlowReportTypeFlowDirectionPropEnum = append(createNetworkFlowReportTypeFlowDirectionPropEnum, v)
	}
}

const (

	// CreateNetworkFlowReportFlowDirectionIngress captures enum value "ingress"
	CreateNetworkFlowReportFlowDirectionIngress string = "ingress"

	// CreateNetworkFlowReportFlowDirectionEgress captures enum value "egress"
	CreateNetworkFlowReportFlowDirectionEgress string = "egress"
)

// prop value enum
func (m *CreateNetworkFlowReport) validateFlowDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkFlowReportTypeFlowDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateNetworkFlowReport) validateFlowDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowDirection) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlowDirectionEnum("flow_direction", "body", m.FlowDirection); err != nil {
		return err
	}

	return nil
}

var createNetworkFlowReportTypeFlowWeightPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["costs","bytes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkFlowReportTypeFlowWeightPropEnum = append(createNetworkFlowReportTypeFlowWeightPropEnum, v)
	}
}

const (

	// CreateNetworkFlowReportFlowWeightCosts captures enum value "costs"
	CreateNetworkFlowReportFlowWeightCosts string = "costs"

	// CreateNetworkFlowReportFlowWeightBytes captures enum value "bytes"
	CreateNetworkFlowReportFlowWeightBytes string = "bytes"
)

// prop value enum
func (m *CreateNetworkFlowReport) validateFlowWeightEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkFlowReportTypeFlowWeightPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateNetworkFlowReport) validateFlowWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowWeight) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlowWeightEnum("flow_weight", "body", m.FlowWeight); err != nil {
		return err
	}

	return nil
}

var createNetworkFlowReportGroupingsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["account_id","az_id","dstaddr","dsthostname","flow_direction","interface_id","instance_id","peer_resource_uuid","peer_account_id","peer_vpc_id","peer_region","peer_az_id","peer_subnet_id","peer_interface_id","peer_instance_id","region","resource_uuid","srcaddr","srchostname","subnet_id","traffic_category","traffic_path","vpc_id"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkFlowReportGroupingsItemsEnum = append(createNetworkFlowReportGroupingsItemsEnum, v)
	}
}

func (m *CreateNetworkFlowReport) validateGroupingsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkFlowReportGroupingsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateNetworkFlowReport) validateGroupings(formats strfmt.Registry) error {
	if swag.IsZero(m.Groupings) { // not required
		return nil
	}

	for i := 0; i < len(m.Groupings); i++ {

		// value enum
		if err := m.validateGroupingsItemsEnum("groupings"+"."+strconv.Itoa(i), "body", m.Groupings[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *CreateNetworkFlowReport) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateNetworkFlowReport) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *CreateNetworkFlowReport) validateWorkspaceToken(formats strfmt.Registry) error {

	if err := validate.Required("workspace_token", "body", m.WorkspaceToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network flow report based on context it is used
func (m *CreateNetworkFlowReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateNetworkFlowReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateNetworkFlowReport) UnmarshalBinary(b []byte) error {
	var res CreateNetworkFlowReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
