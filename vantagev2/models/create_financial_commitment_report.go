// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateFinancialCommitmentReport Create a FinancialCommitmentReport.
//
// swagger:model createFinancialCommitmentReport
type CreateFinancialCommitmentReport struct {

	// The date bucket of the FinancialCommitmentReport.
	// Enum: ["day","week","month"]
	DateBucket string `json:"date_bucket,omitempty"`

	// The date interval of the FinancialCommitmentReport. Incompatible with 'start_date' and 'end_date' parameters. Defaults to 'this_month' if start_date and end_date are not provided.
	// Enum: ["this_month","last_7_days","last_30_days","last_month","last_3_months","last_6_months","custom","last_12_months","last_24_months","last_36_months","year_to_date","last_3_days"]
	DateInterval string `json:"date_interval,omitempty"`

	// The end date of the FinancialCommitmentReport. YYYY-MM-DD formatted. Incompatible with 'date_interval' parameter.
	// Example: 2024-03-01
	// Format: date
	EndDate strfmt.Date `json:"end_date,omitempty"`

	// The filter query language to apply to the FinancialCommitmentReport. Additional documentation available at https://docs.vantage.sh/vql.
	Filter string `json:"filter,omitempty"`

	// Grouping values for aggregating costs on the FinancialCommitmentReport. Valid groupings: cost_type, commitment_type, service, resource_account_id, provider_account_id, region, cost_category, cost_sub_category, instance_type, tag, label:<label_name>.
	Groupings []string `json:"groupings"`

	// The scope for the costs. Possible values: discountable, all.
	// Enum: ["discountable","all"]
	OnDemandCostsScope string `json:"on_demand_costs_scope,omitempty"`

	// The start date of the FinancialCommitmentReport. YYYY-MM-DD formatted. Incompatible with 'date_interval' parameter.
	// Example: 2024-03-01
	// Format: date
	StartDate strfmt.Date `json:"start_date,omitempty"`

	// The title of the FinancialCommitmentReport.
	// Required: true
	Title *string `json:"title"`

	// The Workspace in which the FinancialCommitmentReport will be created.
	// Required: true
	WorkspaceToken *string `json:"workspace_token"`
}

// Validate validates this create financial commitment report
func (m *CreateFinancialCommitmentReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnDemandCostsScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createFinancialCommitmentReportTypeDateBucketPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["day","week","month"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createFinancialCommitmentReportTypeDateBucketPropEnum = append(createFinancialCommitmentReportTypeDateBucketPropEnum, v)
	}
}

const (

	// CreateFinancialCommitmentReportDateBucketDay captures enum value "day"
	CreateFinancialCommitmentReportDateBucketDay string = "day"

	// CreateFinancialCommitmentReportDateBucketWeek captures enum value "week"
	CreateFinancialCommitmentReportDateBucketWeek string = "week"

	// CreateFinancialCommitmentReportDateBucketMonth captures enum value "month"
	CreateFinancialCommitmentReportDateBucketMonth string = "month"
)

// prop value enum
func (m *CreateFinancialCommitmentReport) validateDateBucketEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createFinancialCommitmentReportTypeDateBucketPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateFinancialCommitmentReport) validateDateBucket(formats strfmt.Registry) error {
	if swag.IsZero(m.DateBucket) { // not required
		return nil
	}

	// value enum
	if err := m.validateDateBucketEnum("date_bucket", "body", m.DateBucket); err != nil {
		return err
	}

	return nil
}

var createFinancialCommitmentReportTypeDateIntervalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["this_month","last_7_days","last_30_days","last_month","last_3_months","last_6_months","custom","last_12_months","last_24_months","last_36_months","year_to_date","last_3_days"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createFinancialCommitmentReportTypeDateIntervalPropEnum = append(createFinancialCommitmentReportTypeDateIntervalPropEnum, v)
	}
}

const (

	// CreateFinancialCommitmentReportDateIntervalThisMonth captures enum value "this_month"
	CreateFinancialCommitmentReportDateIntervalThisMonth string = "this_month"

	// CreateFinancialCommitmentReportDateIntervalLast7Days captures enum value "last_7_days"
	CreateFinancialCommitmentReportDateIntervalLast7Days string = "last_7_days"

	// CreateFinancialCommitmentReportDateIntervalLast30Days captures enum value "last_30_days"
	CreateFinancialCommitmentReportDateIntervalLast30Days string = "last_30_days"

	// CreateFinancialCommitmentReportDateIntervalLastMonth captures enum value "last_month"
	CreateFinancialCommitmentReportDateIntervalLastMonth string = "last_month"

	// CreateFinancialCommitmentReportDateIntervalLast3Months captures enum value "last_3_months"
	CreateFinancialCommitmentReportDateIntervalLast3Months string = "last_3_months"

	// CreateFinancialCommitmentReportDateIntervalLast6Months captures enum value "last_6_months"
	CreateFinancialCommitmentReportDateIntervalLast6Months string = "last_6_months"

	// CreateFinancialCommitmentReportDateIntervalCustom captures enum value "custom"
	CreateFinancialCommitmentReportDateIntervalCustom string = "custom"

	// CreateFinancialCommitmentReportDateIntervalLast12Months captures enum value "last_12_months"
	CreateFinancialCommitmentReportDateIntervalLast12Months string = "last_12_months"

	// CreateFinancialCommitmentReportDateIntervalLast24Months captures enum value "last_24_months"
	CreateFinancialCommitmentReportDateIntervalLast24Months string = "last_24_months"

	// CreateFinancialCommitmentReportDateIntervalLast36Months captures enum value "last_36_months"
	CreateFinancialCommitmentReportDateIntervalLast36Months string = "last_36_months"

	// CreateFinancialCommitmentReportDateIntervalYearToDate captures enum value "year_to_date"
	CreateFinancialCommitmentReportDateIntervalYearToDate string = "year_to_date"

	// CreateFinancialCommitmentReportDateIntervalLast3Days captures enum value "last_3_days"
	CreateFinancialCommitmentReportDateIntervalLast3Days string = "last_3_days"
)

// prop value enum
func (m *CreateFinancialCommitmentReport) validateDateIntervalEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createFinancialCommitmentReportTypeDateIntervalPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateFinancialCommitmentReport) validateDateInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.DateInterval) { // not required
		return nil
	}

	// value enum
	if err := m.validateDateIntervalEnum("date_interval", "body", m.DateInterval); err != nil {
		return err
	}

	return nil
}

func (m *CreateFinancialCommitmentReport) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_date", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var createFinancialCommitmentReportTypeOnDemandCostsScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["discountable","all"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createFinancialCommitmentReportTypeOnDemandCostsScopePropEnum = append(createFinancialCommitmentReportTypeOnDemandCostsScopePropEnum, v)
	}
}

const (

	// CreateFinancialCommitmentReportOnDemandCostsScopeDiscountable captures enum value "discountable"
	CreateFinancialCommitmentReportOnDemandCostsScopeDiscountable string = "discountable"

	// CreateFinancialCommitmentReportOnDemandCostsScopeAll captures enum value "all"
	CreateFinancialCommitmentReportOnDemandCostsScopeAll string = "all"
)

// prop value enum
func (m *CreateFinancialCommitmentReport) validateOnDemandCostsScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createFinancialCommitmentReportTypeOnDemandCostsScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateFinancialCommitmentReport) validateOnDemandCostsScope(formats strfmt.Registry) error {
	if swag.IsZero(m.OnDemandCostsScope) { // not required
		return nil
	}

	// value enum
	if err := m.validateOnDemandCostsScopeEnum("on_demand_costs_scope", "body", m.OnDemandCostsScope); err != nil {
		return err
	}

	return nil
}

func (m *CreateFinancialCommitmentReport) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateFinancialCommitmentReport) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *CreateFinancialCommitmentReport) validateWorkspaceToken(formats strfmt.Registry) error {

	if err := validate.Required("workspace_token", "body", m.WorkspaceToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create financial commitment report based on context it is used
func (m *CreateFinancialCommitmentReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateFinancialCommitmentReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateFinancialCommitmentReport) UnmarshalBinary(b []byte) error {
	var res CreateFinancialCommitmentReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
