// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateVirtualTagConfig Updates an existing VirtualTagConfig.
//
// swagger:model updateVirtualTagConfig
type UpdateVirtualTagConfig struct {

	// The earliest month the VirtualTagConfig should be backfilled to.
	// Format: date
	BackfillUntil *strfmt.Date `json:"backfill_until,omitempty"`

	// The key of the VirtualTagConfig.
	Key string `json:"key,omitempty"`

	// Whether the VirtualTagConfig can override a provider-supplied tag on a matching Cost.
	Overridable *bool `json:"overridable,omitempty"`

	// Values for the VirtualTagConfig, with match precedence determined by order in the list.
	Values []*UpdateVirtualTagConfigValuesItems0 `json:"values"`
}

// Validate validates this update virtual tag config
func (m *UpdateVirtualTagConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackfillUntil(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateVirtualTagConfig) validateBackfillUntil(formats strfmt.Registry) error {
	if swag.IsZero(m.BackfillUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("backfill_until", "body", "date", m.BackfillUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateVirtualTagConfig) validateValues(formats strfmt.Registry) error {
	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update virtual tag config based on the context it is used
func (m *UpdateVirtualTagConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateVirtualTagConfig) contextValidateValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Values); i++ {

		if m.Values[i] != nil {

			if swag.IsZero(m.Values[i]) { // not required
				return nil
			}

			if err := m.Values[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateVirtualTagConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateVirtualTagConfig) UnmarshalBinary(b []byte) error {
	var res UpdateVirtualTagConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateVirtualTagConfigValuesItems0 update virtual tag config values items0
//
// swagger:model UpdateVirtualTagConfigValuesItems0
type UpdateVirtualTagConfigValuesItems0 struct {

	// The token of an associated business metric.
	BusinessMetricToken string `json:"business_metric_token,omitempty"`

	// cost metric
	CostMetric *UpdateVirtualTagConfigValuesItems0CostMetric `json:"cost_metric,omitempty"`

	// The filter query language to apply to the value. Additional documentation available at https://docs.vantage.sh/vql.
	// Required: true
	Filter *string `json:"filter"`

	// The name of the value.
	Name string `json:"name,omitempty"`
}

// Validate validates this update virtual tag config values items0
func (m *UpdateVirtualTagConfigValuesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCostMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateVirtualTagConfigValuesItems0) validateCostMetric(formats strfmt.Registry) error {
	if swag.IsZero(m.CostMetric) { // not required
		return nil
	}

	if m.CostMetric != nil {
		if err := m.CostMetric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cost_metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cost_metric")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateVirtualTagConfigValuesItems0) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("filter", "body", m.Filter); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update virtual tag config values items0 based on the context it is used
func (m *UpdateVirtualTagConfigValuesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCostMetric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateVirtualTagConfigValuesItems0) contextValidateCostMetric(ctx context.Context, formats strfmt.Registry) error {

	if m.CostMetric != nil {

		if swag.IsZero(m.CostMetric) { // not required
			return nil
		}

		if err := m.CostMetric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cost_metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cost_metric")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateVirtualTagConfigValuesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateVirtualTagConfigValuesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateVirtualTagConfigValuesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateVirtualTagConfigValuesItems0CostMetric update virtual tag config values items0 cost metric
//
// swagger:model UpdateVirtualTagConfigValuesItems0CostMetric
type UpdateVirtualTagConfigValuesItems0CostMetric struct {

	// aggregation
	// Required: true
	Aggregation *UpdateVirtualTagConfigValuesItems0CostMetricAggregation `json:"aggregation"`

	// filter
	// Required: true
	Filter *string `json:"filter"`
}

// Validate validates this update virtual tag config values items0 cost metric
func (m *UpdateVirtualTagConfigValuesItems0CostMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateVirtualTagConfigValuesItems0CostMetric) validateAggregation(formats strfmt.Registry) error {

	if err := validate.Required("cost_metric"+"."+"aggregation", "body", m.Aggregation); err != nil {
		return err
	}

	if m.Aggregation != nil {
		if err := m.Aggregation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cost_metric" + "." + "aggregation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cost_metric" + "." + "aggregation")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateVirtualTagConfigValuesItems0CostMetric) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("cost_metric"+"."+"filter", "body", m.Filter); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update virtual tag config values items0 cost metric based on the context it is used
func (m *UpdateVirtualTagConfigValuesItems0CostMetric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateVirtualTagConfigValuesItems0CostMetric) contextValidateAggregation(ctx context.Context, formats strfmt.Registry) error {

	if m.Aggregation != nil {

		if err := m.Aggregation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cost_metric" + "." + "aggregation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cost_metric" + "." + "aggregation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateVirtualTagConfigValuesItems0CostMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateVirtualTagConfigValuesItems0CostMetric) UnmarshalBinary(b []byte) error {
	var res UpdateVirtualTagConfigValuesItems0CostMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateVirtualTagConfigValuesItems0CostMetricAggregation update virtual tag config values items0 cost metric aggregation
//
// swagger:model UpdateVirtualTagConfigValuesItems0CostMetricAggregation
type UpdateVirtualTagConfigValuesItems0CostMetricAggregation struct {

	// tag
	// Required: true
	Tag *string `json:"tag"`
}

// Validate validates this update virtual tag config values items0 cost metric aggregation
func (m *UpdateVirtualTagConfigValuesItems0CostMetricAggregation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateVirtualTagConfigValuesItems0CostMetricAggregation) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("cost_metric"+"."+"aggregation"+"."+"tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update virtual tag config values items0 cost metric aggregation based on context it is used
func (m *UpdateVirtualTagConfigValuesItems0CostMetricAggregation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateVirtualTagConfigValuesItems0CostMetricAggregation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateVirtualTagConfigValuesItems0CostMetricAggregation) UnmarshalBinary(b []byte) error {
	var res UpdateVirtualTagConfigValuesItems0CostMetricAggregation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
