// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// GetReportNotificationReader is a Reader for the GetReportNotification structure.
type GetReportNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReportNotificationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetReportNotificationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /report_notifications/{report_notification_token}] getReportNotification", response, response.Code())
	}
}

// NewGetReportNotificationOK creates a GetReportNotificationOK with default headers values
func NewGetReportNotificationOK() *GetReportNotificationOK {
	return &GetReportNotificationOK{}
}

/*
GetReportNotificationOK describes a response with status code 200, with default header values.

GetReportNotificationOK get report notification o k
*/
type GetReportNotificationOK struct {
	Payload *models.ReportNotification
}

// IsSuccess returns true when this get report notification o k response has a 2xx status code
func (o *GetReportNotificationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get report notification o k response has a 3xx status code
func (o *GetReportNotificationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report notification o k response has a 4xx status code
func (o *GetReportNotificationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report notification o k response has a 5xx status code
func (o *GetReportNotificationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get report notification o k response a status code equal to that given
func (o *GetReportNotificationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get report notification o k response
func (o *GetReportNotificationOK) Code() int {
	return 200
}

func (o *GetReportNotificationOK) Error() string {
	return fmt.Sprintf("[GET /report_notifications/{report_notification_token}][%d] getReportNotificationOK  %+v", 200, o.Payload)
}

func (o *GetReportNotificationOK) String() string {
	return fmt.Sprintf("[GET /report_notifications/{report_notification_token}][%d] getReportNotificationOK  %+v", 200, o.Payload)
}

func (o *GetReportNotificationOK) GetPayload() *models.ReportNotification {
	return o.Payload
}

func (o *GetReportNotificationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportNotification)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportNotificationNotFound creates a GetReportNotificationNotFound with default headers values
func NewGetReportNotificationNotFound() *GetReportNotificationNotFound {
	return &GetReportNotificationNotFound{}
}

/*
GetReportNotificationNotFound describes a response with status code 404, with default header values.

NotFound
*/
type GetReportNotificationNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get report notification not found response has a 2xx status code
func (o *GetReportNotificationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report notification not found response has a 3xx status code
func (o *GetReportNotificationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report notification not found response has a 4xx status code
func (o *GetReportNotificationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report notification not found response has a 5xx status code
func (o *GetReportNotificationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get report notification not found response a status code equal to that given
func (o *GetReportNotificationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get report notification not found response
func (o *GetReportNotificationNotFound) Code() int {
	return 404
}

func (o *GetReportNotificationNotFound) Error() string {
	return fmt.Sprintf("[GET /report_notifications/{report_notification_token}][%d] getReportNotificationNotFound  %+v", 404, o.Payload)
}

func (o *GetReportNotificationNotFound) String() string {
	return fmt.Sprintf("[GET /report_notifications/{report_notification_token}][%d] getReportNotificationNotFound  %+v", 404, o.Payload)
}

func (o *GetReportNotificationNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetReportNotificationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
