// Code generated by go-swagger; DO NOT EDIT.

package network_flow_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// NewUpdateNetworkFlowReportParams creates a new UpdateNetworkFlowReportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateNetworkFlowReportParams() *UpdateNetworkFlowReportParams {
	return &UpdateNetworkFlowReportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateNetworkFlowReportParamsWithTimeout creates a new UpdateNetworkFlowReportParams object
// with the ability to set a timeout on a request.
func NewUpdateNetworkFlowReportParamsWithTimeout(timeout time.Duration) *UpdateNetworkFlowReportParams {
	return &UpdateNetworkFlowReportParams{
		timeout: timeout,
	}
}

// NewUpdateNetworkFlowReportParamsWithContext creates a new UpdateNetworkFlowReportParams object
// with the ability to set a context for a request.
func NewUpdateNetworkFlowReportParamsWithContext(ctx context.Context) *UpdateNetworkFlowReportParams {
	return &UpdateNetworkFlowReportParams{
		Context: ctx,
	}
}

// NewUpdateNetworkFlowReportParamsWithHTTPClient creates a new UpdateNetworkFlowReportParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateNetworkFlowReportParamsWithHTTPClient(client *http.Client) *UpdateNetworkFlowReportParams {
	return &UpdateNetworkFlowReportParams{
		HTTPClient: client,
	}
}

/*
UpdateNetworkFlowReportParams contains all the parameters to send to the API endpoint

	for the update network flow report operation.

	Typically these are written to a http.Request.
*/
type UpdateNetworkFlowReportParams struct {

	// NetworkFlowReportToken.
	NetworkFlowReportToken string

	// UpdateNetworkFlowReport.
	UpdateNetworkFlowReport *models.UpdateNetworkFlowReport

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update network flow report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateNetworkFlowReportParams) WithDefaults() *UpdateNetworkFlowReportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update network flow report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateNetworkFlowReportParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update network flow report params
func (o *UpdateNetworkFlowReportParams) WithTimeout(timeout time.Duration) *UpdateNetworkFlowReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update network flow report params
func (o *UpdateNetworkFlowReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update network flow report params
func (o *UpdateNetworkFlowReportParams) WithContext(ctx context.Context) *UpdateNetworkFlowReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update network flow report params
func (o *UpdateNetworkFlowReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update network flow report params
func (o *UpdateNetworkFlowReportParams) WithHTTPClient(client *http.Client) *UpdateNetworkFlowReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update network flow report params
func (o *UpdateNetworkFlowReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNetworkFlowReportToken adds the networkFlowReportToken to the update network flow report params
func (o *UpdateNetworkFlowReportParams) WithNetworkFlowReportToken(networkFlowReportToken string) *UpdateNetworkFlowReportParams {
	o.SetNetworkFlowReportToken(networkFlowReportToken)
	return o
}

// SetNetworkFlowReportToken adds the networkFlowReportToken to the update network flow report params
func (o *UpdateNetworkFlowReportParams) SetNetworkFlowReportToken(networkFlowReportToken string) {
	o.NetworkFlowReportToken = networkFlowReportToken
}

// WithUpdateNetworkFlowReport adds the updateNetworkFlowReport to the update network flow report params
func (o *UpdateNetworkFlowReportParams) WithUpdateNetworkFlowReport(updateNetworkFlowReport *models.UpdateNetworkFlowReport) *UpdateNetworkFlowReportParams {
	o.SetUpdateNetworkFlowReport(updateNetworkFlowReport)
	return o
}

// SetUpdateNetworkFlowReport adds the updateNetworkFlowReport to the update network flow report params
func (o *UpdateNetworkFlowReportParams) SetUpdateNetworkFlowReport(updateNetworkFlowReport *models.UpdateNetworkFlowReport) {
	o.UpdateNetworkFlowReport = updateNetworkFlowReport
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateNetworkFlowReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param network_flow_report_token
	if err := r.SetPathParam("network_flow_report_token", o.NetworkFlowReportToken); err != nil {
		return err
	}
	if o.UpdateNetworkFlowReport != nil {
		if err := r.SetBodyParam(o.UpdateNetworkFlowReport); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
