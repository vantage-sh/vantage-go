// Code generated by go-swagger; DO NOT EDIT.

package segments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// UpdateSegmentReader is a Reader for the UpdateSegment structure.
type UpdateSegmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSegmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSegmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSegmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSegmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /segments/{segment_token}] updateSegment", response, response.Code())
	}
}

// NewUpdateSegmentOK creates a UpdateSegmentOK with default headers values
func NewUpdateSegmentOK() *UpdateSegmentOK {
	return &UpdateSegmentOK{}
}

/*
UpdateSegmentOK describes a response with status code 200, with default header values.

UpdateSegmentOK update segment o k
*/
type UpdateSegmentOK struct {
	Payload *models.Segment
}

// IsSuccess returns true when this update segment o k response has a 2xx status code
func (o *UpdateSegmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update segment o k response has a 3xx status code
func (o *UpdateSegmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update segment o k response has a 4xx status code
func (o *UpdateSegmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update segment o k response has a 5xx status code
func (o *UpdateSegmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update segment o k response a status code equal to that given
func (o *UpdateSegmentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update segment o k response
func (o *UpdateSegmentOK) Code() int {
	return 200
}

func (o *UpdateSegmentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /segments/{segment_token}][%d] updateSegmentOK %s", 200, payload)
}

func (o *UpdateSegmentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /segments/{segment_token}][%d] updateSegmentOK %s", 200, payload)
}

func (o *UpdateSegmentOK) GetPayload() *models.Segment {
	return o.Payload
}

func (o *UpdateSegmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Segment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSegmentBadRequest creates a UpdateSegmentBadRequest with default headers values
func NewUpdateSegmentBadRequest() *UpdateSegmentBadRequest {
	return &UpdateSegmentBadRequest{}
}

/*
UpdateSegmentBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type UpdateSegmentBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update segment bad request response has a 2xx status code
func (o *UpdateSegmentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update segment bad request response has a 3xx status code
func (o *UpdateSegmentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update segment bad request response has a 4xx status code
func (o *UpdateSegmentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update segment bad request response has a 5xx status code
func (o *UpdateSegmentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update segment bad request response a status code equal to that given
func (o *UpdateSegmentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update segment bad request response
func (o *UpdateSegmentBadRequest) Code() int {
	return 400
}

func (o *UpdateSegmentBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /segments/{segment_token}][%d] updateSegmentBadRequest %s", 400, payload)
}

func (o *UpdateSegmentBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /segments/{segment_token}][%d] updateSegmentBadRequest %s", 400, payload)
}

func (o *UpdateSegmentBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateSegmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSegmentNotFound creates a UpdateSegmentNotFound with default headers values
func NewUpdateSegmentNotFound() *UpdateSegmentNotFound {
	return &UpdateSegmentNotFound{}
}

/*
UpdateSegmentNotFound describes a response with status code 404, with default header values.

NotFound
*/
type UpdateSegmentNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update segment not found response has a 2xx status code
func (o *UpdateSegmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update segment not found response has a 3xx status code
func (o *UpdateSegmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update segment not found response has a 4xx status code
func (o *UpdateSegmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update segment not found response has a 5xx status code
func (o *UpdateSegmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update segment not found response a status code equal to that given
func (o *UpdateSegmentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update segment not found response
func (o *UpdateSegmentNotFound) Code() int {
	return 404
}

func (o *UpdateSegmentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /segments/{segment_token}][%d] updateSegmentNotFound %s", 404, payload)
}

func (o *UpdateSegmentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /segments/{segment_token}][%d] updateSegmentNotFound %s", 404, payload)
}

func (o *UpdateSegmentNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateSegmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
