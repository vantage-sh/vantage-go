// Code generated by go-swagger; DO NOT EDIT.

package segments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// GetSegmentReader is a Reader for the GetSegment structure.
type GetSegmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSegmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSegmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetSegmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /segments/{segment_token}] getSegment", response, response.Code())
	}
}

// NewGetSegmentOK creates a GetSegmentOK with default headers values
func NewGetSegmentOK() *GetSegmentOK {
	return &GetSegmentOK{}
}

/*
GetSegmentOK describes a response with status code 200, with default header values.

GetSegmentOK get segment o k
*/
type GetSegmentOK struct {
	Payload *models.Segment
}

// IsSuccess returns true when this get segment o k response has a 2xx status code
func (o *GetSegmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get segment o k response has a 3xx status code
func (o *GetSegmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get segment o k response has a 4xx status code
func (o *GetSegmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get segment o k response has a 5xx status code
func (o *GetSegmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get segment o k response a status code equal to that given
func (o *GetSegmentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get segment o k response
func (o *GetSegmentOK) Code() int {
	return 200
}

func (o *GetSegmentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /segments/{segment_token}][%d] getSegmentOK %s", 200, payload)
}

func (o *GetSegmentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /segments/{segment_token}][%d] getSegmentOK %s", 200, payload)
}

func (o *GetSegmentOK) GetPayload() *models.Segment {
	return o.Payload
}

func (o *GetSegmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Segment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSegmentNotFound creates a GetSegmentNotFound with default headers values
func NewGetSegmentNotFound() *GetSegmentNotFound {
	return &GetSegmentNotFound{}
}

/*
GetSegmentNotFound describes a response with status code 404, with default header values.

NotFound
*/
type GetSegmentNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get segment not found response has a 2xx status code
func (o *GetSegmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get segment not found response has a 3xx status code
func (o *GetSegmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get segment not found response has a 4xx status code
func (o *GetSegmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get segment not found response has a 5xx status code
func (o *GetSegmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get segment not found response a status code equal to that given
func (o *GetSegmentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get segment not found response
func (o *GetSegmentNotFound) Code() int {
	return 404
}

func (o *GetSegmentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /segments/{segment_token}][%d] getSegmentNotFound %s", 404, payload)
}

func (o *GetSegmentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /segments/{segment_token}][%d] getSegmentNotFound %s", 404, payload)
}

func (o *GetSegmentNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetSegmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
