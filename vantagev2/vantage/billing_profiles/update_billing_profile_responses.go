// Code generated by go-swagger; DO NOT EDIT.

package billing_profiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// UpdateBillingProfileReader is a Reader for the UpdateBillingProfile structure.
type UpdateBillingProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateBillingProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateBillingProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateBillingProfileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateBillingProfileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /billing_profiles/{billing_profile_token}] updateBillingProfile", response, response.Code())
	}
}

// NewUpdateBillingProfileOK creates a UpdateBillingProfileOK with default headers values
func NewUpdateBillingProfileOK() *UpdateBillingProfileOK {
	return &UpdateBillingProfileOK{}
}

/*
UpdateBillingProfileOK describes a response with status code 200, with default header values.

UpdateBillingProfileOK update billing profile o k
*/
type UpdateBillingProfileOK struct {
	Payload *models.BillingProfile
}

// IsSuccess returns true when this update billing profile o k response has a 2xx status code
func (o *UpdateBillingProfileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update billing profile o k response has a 3xx status code
func (o *UpdateBillingProfileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update billing profile o k response has a 4xx status code
func (o *UpdateBillingProfileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update billing profile o k response has a 5xx status code
func (o *UpdateBillingProfileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update billing profile o k response a status code equal to that given
func (o *UpdateBillingProfileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update billing profile o k response
func (o *UpdateBillingProfileOK) Code() int {
	return 200
}

func (o *UpdateBillingProfileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing_profiles/{billing_profile_token}][%d] updateBillingProfileOK %s", 200, payload)
}

func (o *UpdateBillingProfileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing_profiles/{billing_profile_token}][%d] updateBillingProfileOK %s", 200, payload)
}

func (o *UpdateBillingProfileOK) GetPayload() *models.BillingProfile {
	return o.Payload
}

func (o *UpdateBillingProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BillingProfile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBillingProfileBadRequest creates a UpdateBillingProfileBadRequest with default headers values
func NewUpdateBillingProfileBadRequest() *UpdateBillingProfileBadRequest {
	return &UpdateBillingProfileBadRequest{}
}

/*
UpdateBillingProfileBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type UpdateBillingProfileBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update billing profile bad request response has a 2xx status code
func (o *UpdateBillingProfileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update billing profile bad request response has a 3xx status code
func (o *UpdateBillingProfileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update billing profile bad request response has a 4xx status code
func (o *UpdateBillingProfileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update billing profile bad request response has a 5xx status code
func (o *UpdateBillingProfileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update billing profile bad request response a status code equal to that given
func (o *UpdateBillingProfileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update billing profile bad request response
func (o *UpdateBillingProfileBadRequest) Code() int {
	return 400
}

func (o *UpdateBillingProfileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing_profiles/{billing_profile_token}][%d] updateBillingProfileBadRequest %s", 400, payload)
}

func (o *UpdateBillingProfileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing_profiles/{billing_profile_token}][%d] updateBillingProfileBadRequest %s", 400, payload)
}

func (o *UpdateBillingProfileBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateBillingProfileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBillingProfileNotFound creates a UpdateBillingProfileNotFound with default headers values
func NewUpdateBillingProfileNotFound() *UpdateBillingProfileNotFound {
	return &UpdateBillingProfileNotFound{}
}

/*
UpdateBillingProfileNotFound describes a response with status code 404, with default header values.

NotFound
*/
type UpdateBillingProfileNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update billing profile not found response has a 2xx status code
func (o *UpdateBillingProfileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update billing profile not found response has a 3xx status code
func (o *UpdateBillingProfileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update billing profile not found response has a 4xx status code
func (o *UpdateBillingProfileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update billing profile not found response has a 5xx status code
func (o *UpdateBillingProfileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update billing profile not found response a status code equal to that given
func (o *UpdateBillingProfileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update billing profile not found response
func (o *UpdateBillingProfileNotFound) Code() int {
	return 404
}

func (o *UpdateBillingProfileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing_profiles/{billing_profile_token}][%d] updateBillingProfileNotFound %s", 404, payload)
}

func (o *UpdateBillingProfileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /billing_profiles/{billing_profile_token}][%d] updateBillingProfileNotFound %s", 404, payload)
}

func (o *UpdateBillingProfileNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateBillingProfileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
