// Code generated by go-swagger; DO NOT EDIT.

package cost_alert_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCostAlertEventsParams creates a new GetCostAlertEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCostAlertEventsParams() *GetCostAlertEventsParams {
	return &GetCostAlertEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCostAlertEventsParamsWithTimeout creates a new GetCostAlertEventsParams object
// with the ability to set a timeout on a request.
func NewGetCostAlertEventsParamsWithTimeout(timeout time.Duration) *GetCostAlertEventsParams {
	return &GetCostAlertEventsParams{
		timeout: timeout,
	}
}

// NewGetCostAlertEventsParamsWithContext creates a new GetCostAlertEventsParams object
// with the ability to set a context for a request.
func NewGetCostAlertEventsParamsWithContext(ctx context.Context) *GetCostAlertEventsParams {
	return &GetCostAlertEventsParams{
		Context: ctx,
	}
}

// NewGetCostAlertEventsParamsWithHTTPClient creates a new GetCostAlertEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCostAlertEventsParamsWithHTTPClient(client *http.Client) *GetCostAlertEventsParams {
	return &GetCostAlertEventsParams{
		HTTPClient: client,
	}
}

/*
GetCostAlertEventsParams contains all the parameters to send to the API endpoint

	for the get cost alert events operation.

	Typically these are written to a http.Request.
*/
type GetCostAlertEventsParams struct {

	/* CostAlertToken.

	   The token of the CostAlertEvent.
	*/
	CostAlertToken string

	/* Limit.

	   The number of results to return. The maximum is 1000.

	   Format: int32
	*/
	Limit *int32

	/* Page.

	   The page of results to return.

	   Format: int32
	*/
	Page *int32

	/* ReportToken.

	   The token of the report associated with the CostAlertEvent.
	*/
	ReportToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get cost alert events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCostAlertEventsParams) WithDefaults() *GetCostAlertEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get cost alert events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCostAlertEventsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get cost alert events params
func (o *GetCostAlertEventsParams) WithTimeout(timeout time.Duration) *GetCostAlertEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cost alert events params
func (o *GetCostAlertEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cost alert events params
func (o *GetCostAlertEventsParams) WithContext(ctx context.Context) *GetCostAlertEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cost alert events params
func (o *GetCostAlertEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cost alert events params
func (o *GetCostAlertEventsParams) WithHTTPClient(client *http.Client) *GetCostAlertEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cost alert events params
func (o *GetCostAlertEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCostAlertToken adds the costAlertToken to the get cost alert events params
func (o *GetCostAlertEventsParams) WithCostAlertToken(costAlertToken string) *GetCostAlertEventsParams {
	o.SetCostAlertToken(costAlertToken)
	return o
}

// SetCostAlertToken adds the costAlertToken to the get cost alert events params
func (o *GetCostAlertEventsParams) SetCostAlertToken(costAlertToken string) {
	o.CostAlertToken = costAlertToken
}

// WithLimit adds the limit to the get cost alert events params
func (o *GetCostAlertEventsParams) WithLimit(limit *int32) *GetCostAlertEventsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get cost alert events params
func (o *GetCostAlertEventsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithPage adds the page to the get cost alert events params
func (o *GetCostAlertEventsParams) WithPage(page *int32) *GetCostAlertEventsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get cost alert events params
func (o *GetCostAlertEventsParams) SetPage(page *int32) {
	o.Page = page
}

// WithReportToken adds the reportToken to the get cost alert events params
func (o *GetCostAlertEventsParams) WithReportToken(reportToken *string) *GetCostAlertEventsParams {
	o.SetReportToken(reportToken)
	return o
}

// SetReportToken adds the reportToken to the get cost alert events params
func (o *GetCostAlertEventsParams) SetReportToken(reportToken *string) {
	o.ReportToken = reportToken
}

// WriteToRequest writes these params to a swagger request
func (o *GetCostAlertEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cost_alert_token
	if err := r.SetPathParam("cost_alert_token", o.CostAlertToken); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.ReportToken != nil {

		// query param report_token
		var qrReportToken string

		if o.ReportToken != nil {
			qrReportToken = *o.ReportToken
		}
		qReportToken := qrReportToken
		if qReportToken != "" {

			if err := r.SetQueryParam("report_token", qReportToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
