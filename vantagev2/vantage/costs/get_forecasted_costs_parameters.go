// Code generated by go-swagger; DO NOT EDIT.

package costs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetForecastedCostsParams creates a new GetForecastedCostsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetForecastedCostsParams() *GetForecastedCostsParams {
	return &GetForecastedCostsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetForecastedCostsParamsWithTimeout creates a new GetForecastedCostsParams object
// with the ability to set a timeout on a request.
func NewGetForecastedCostsParamsWithTimeout(timeout time.Duration) *GetForecastedCostsParams {
	return &GetForecastedCostsParams{
		timeout: timeout,
	}
}

// NewGetForecastedCostsParamsWithContext creates a new GetForecastedCostsParams object
// with the ability to set a context for a request.
func NewGetForecastedCostsParamsWithContext(ctx context.Context) *GetForecastedCostsParams {
	return &GetForecastedCostsParams{
		Context: ctx,
	}
}

// NewGetForecastedCostsParamsWithHTTPClient creates a new GetForecastedCostsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetForecastedCostsParamsWithHTTPClient(client *http.Client) *GetForecastedCostsParams {
	return &GetForecastedCostsParams{
		HTTPClient: client,
	}
}

/*
GetForecastedCostsParams contains all the parameters to send to the API endpoint

	for the get forecasted costs operation.

	Typically these are written to a http.Request.
*/
type GetForecastedCostsParams struct {

	// CostReportToken.
	CostReportToken string

	/* EndDate.

	   Last date you would like to filter forecasted costs from. ISO 8601 formatted.

	   Format: date-time
	*/
	EndDate *strfmt.DateTime

	/* Limit.

	   The amount of results to return. The maximum is 1000.

	   Format: int32
	*/
	Limit *int32

	/* Provider.

	   Limit the forecasted costs to a specific provider. 'all' is accepted to filter to overall forecast.
	*/
	Provider *string

	/* Service.

	   Limit the forecasted costs to a specific service. 'all' is accepted to filter to overall forecast. e.g. 'Amazon ElastiCache'.
	*/
	Service *string

	/* StartDate.

	   First date you would like to filter forecasted costs from. ISO 8601 formatted.

	   Format: date-time
	*/
	StartDate *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get forecasted costs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetForecastedCostsParams) WithDefaults() *GetForecastedCostsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get forecasted costs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetForecastedCostsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get forecasted costs params
func (o *GetForecastedCostsParams) WithTimeout(timeout time.Duration) *GetForecastedCostsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get forecasted costs params
func (o *GetForecastedCostsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get forecasted costs params
func (o *GetForecastedCostsParams) WithContext(ctx context.Context) *GetForecastedCostsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get forecasted costs params
func (o *GetForecastedCostsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get forecasted costs params
func (o *GetForecastedCostsParams) WithHTTPClient(client *http.Client) *GetForecastedCostsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get forecasted costs params
func (o *GetForecastedCostsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCostReportToken adds the costReportToken to the get forecasted costs params
func (o *GetForecastedCostsParams) WithCostReportToken(costReportToken string) *GetForecastedCostsParams {
	o.SetCostReportToken(costReportToken)
	return o
}

// SetCostReportToken adds the costReportToken to the get forecasted costs params
func (o *GetForecastedCostsParams) SetCostReportToken(costReportToken string) {
	o.CostReportToken = costReportToken
}

// WithEndDate adds the endDate to the get forecasted costs params
func (o *GetForecastedCostsParams) WithEndDate(endDate *strfmt.DateTime) *GetForecastedCostsParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get forecasted costs params
func (o *GetForecastedCostsParams) SetEndDate(endDate *strfmt.DateTime) {
	o.EndDate = endDate
}

// WithLimit adds the limit to the get forecasted costs params
func (o *GetForecastedCostsParams) WithLimit(limit *int32) *GetForecastedCostsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get forecasted costs params
func (o *GetForecastedCostsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithProvider adds the provider to the get forecasted costs params
func (o *GetForecastedCostsParams) WithProvider(provider *string) *GetForecastedCostsParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the get forecasted costs params
func (o *GetForecastedCostsParams) SetProvider(provider *string) {
	o.Provider = provider
}

// WithService adds the service to the get forecasted costs params
func (o *GetForecastedCostsParams) WithService(service *string) *GetForecastedCostsParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the get forecasted costs params
func (o *GetForecastedCostsParams) SetService(service *string) {
	o.Service = service
}

// WithStartDate adds the startDate to the get forecasted costs params
func (o *GetForecastedCostsParams) WithStartDate(startDate *strfmt.DateTime) *GetForecastedCostsParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get forecasted costs params
func (o *GetForecastedCostsParams) SetStartDate(startDate *strfmt.DateTime) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetForecastedCostsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cost_report_token
	if err := r.SetPathParam("cost_report_token", o.CostReportToken); err != nil {
		return err
	}

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate strfmt.DateTime

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate.String()
		if qEndDate != "" {

			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Provider != nil {

		// query param provider
		var qrProvider string

		if o.Provider != nil {
			qrProvider = *o.Provider
		}
		qProvider := qrProvider
		if qProvider != "" {

			if err := r.SetQueryParam("provider", qProvider); err != nil {
				return err
			}
		}
	}

	if o.Service != nil {

		// query param service
		var qrService string

		if o.Service != nil {
			qrService = *o.Service
		}
		qService := qrService
		if qService != "" {

			if err := r.SetQueryParam("service", qService); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate strfmt.DateTime

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {

			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
