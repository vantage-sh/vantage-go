// Code generated by go-swagger; DO NOT EDIT.

package costs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateCostExportParams creates a new CreateCostExportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateCostExportParams() *CreateCostExportParams {
	return &CreateCostExportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateCostExportParamsWithTimeout creates a new CreateCostExportParams object
// with the ability to set a timeout on a request.
func NewCreateCostExportParamsWithTimeout(timeout time.Duration) *CreateCostExportParams {
	return &CreateCostExportParams{
		timeout: timeout,
	}
}

// NewCreateCostExportParamsWithContext creates a new CreateCostExportParams object
// with the ability to set a context for a request.
func NewCreateCostExportParamsWithContext(ctx context.Context) *CreateCostExportParams {
	return &CreateCostExportParams{
		Context: ctx,
	}
}

// NewCreateCostExportParamsWithHTTPClient creates a new CreateCostExportParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateCostExportParamsWithHTTPClient(client *http.Client) *CreateCostExportParams {
	return &CreateCostExportParams{
		HTTPClient: client,
	}
}

/*
CreateCostExportParams contains all the parameters to send to the API endpoint

	for the create cost export operation.

	Typically these are written to a http.Request.
*/
type CreateCostExportParams struct {

	/* CostReportToken.

	   The CostReport token.
	*/
	CostReportToken *string

	/* DateBin.

	   The date bin of the costs. Defaults to the report's default or day.
	*/
	DateBin *string

	/* EndDate.

	   Last date you would like to filter costs to. ISO 8601 formatted.
	*/
	EndDate *string

	/* Filter.

	   The VQL filter to apply to the costs. If this is supplied you do not need cost_report_token.
	*/
	Filter *string

	/* Groupings.

	   Group the results by specific field(s). Defaults to provider, service, account_id. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tagged, tag:<tag_value>. If providing multiple groupings, join as comma separated values: groupings=provider,service,region
	*/
	Groupings []string

	/* Schema.

	   The schema of the data export.

	   Default: "vntg"
	*/
	Schema *string

	/* SettingsAggregateBy.

	   Results will aggregate by cost or usage.

	   Default: "cost"
	*/
	SettingsAggregateBy *string

	/* SettingsAmortize.

	   Results will amortize.

	   Default: true
	*/
	SettingsAmortize *bool

	/* SettingsIncludeCredits.

	   Results will include credits.
	*/
	SettingsIncludeCredits *bool

	/* SettingsIncludeDiscounts.

	   Results will include discounts.

	   Default: true
	*/
	SettingsIncludeDiscounts *bool

	/* SettingsIncludeRefunds.

	   Results will include refunds.
	*/
	SettingsIncludeRefunds *bool

	/* SettingsIncludeTax.

	   Results will include tax.

	   Default: true
	*/
	SettingsIncludeTax *bool

	/* SettingsUnallocated.

	   Results will show unallocated costs.
	*/
	SettingsUnallocated *bool

	/* StartDate.

	   First date you would like to filter costs from. ISO 8601 formatted.
	*/
	StartDate *string

	/* WorkspaceToken.

	   The token of the Workspace to query costs from. Ignored if 'cost_report_token' is set. Required if the API token is associated with multiple Workspaces.
	*/
	WorkspaceToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create cost export params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateCostExportParams) WithDefaults() *CreateCostExportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create cost export params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateCostExportParams) SetDefaults() {
	var (
		schemaDefault = string("vntg")

		settingsAggregateByDefault = string("cost")

		settingsAmortizeDefault = bool(true)

		settingsIncludeCreditsDefault = bool(false)

		settingsIncludeDiscountsDefault = bool(true)

		settingsIncludeRefundsDefault = bool(false)

		settingsIncludeTaxDefault = bool(true)

		settingsUnallocatedDefault = bool(false)
	)

	val := CreateCostExportParams{
		Schema:                   &schemaDefault,
		SettingsAggregateBy:      &settingsAggregateByDefault,
		SettingsAmortize:         &settingsAmortizeDefault,
		SettingsIncludeCredits:   &settingsIncludeCreditsDefault,
		SettingsIncludeDiscounts: &settingsIncludeDiscountsDefault,
		SettingsIncludeRefunds:   &settingsIncludeRefundsDefault,
		SettingsIncludeTax:       &settingsIncludeTaxDefault,
		SettingsUnallocated:      &settingsUnallocatedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the create cost export params
func (o *CreateCostExportParams) WithTimeout(timeout time.Duration) *CreateCostExportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create cost export params
func (o *CreateCostExportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create cost export params
func (o *CreateCostExportParams) WithContext(ctx context.Context) *CreateCostExportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create cost export params
func (o *CreateCostExportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create cost export params
func (o *CreateCostExportParams) WithHTTPClient(client *http.Client) *CreateCostExportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create cost export params
func (o *CreateCostExportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCostReportToken adds the costReportToken to the create cost export params
func (o *CreateCostExportParams) WithCostReportToken(costReportToken *string) *CreateCostExportParams {
	o.SetCostReportToken(costReportToken)
	return o
}

// SetCostReportToken adds the costReportToken to the create cost export params
func (o *CreateCostExportParams) SetCostReportToken(costReportToken *string) {
	o.CostReportToken = costReportToken
}

// WithDateBin adds the dateBin to the create cost export params
func (o *CreateCostExportParams) WithDateBin(dateBin *string) *CreateCostExportParams {
	o.SetDateBin(dateBin)
	return o
}

// SetDateBin adds the dateBin to the create cost export params
func (o *CreateCostExportParams) SetDateBin(dateBin *string) {
	o.DateBin = dateBin
}

// WithEndDate adds the endDate to the create cost export params
func (o *CreateCostExportParams) WithEndDate(endDate *string) *CreateCostExportParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the create cost export params
func (o *CreateCostExportParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithFilter adds the filter to the create cost export params
func (o *CreateCostExportParams) WithFilter(filter *string) *CreateCostExportParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the create cost export params
func (o *CreateCostExportParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithGroupings adds the groupings to the create cost export params
func (o *CreateCostExportParams) WithGroupings(groupings []string) *CreateCostExportParams {
	o.SetGroupings(groupings)
	return o
}

// SetGroupings adds the groupings to the create cost export params
func (o *CreateCostExportParams) SetGroupings(groupings []string) {
	o.Groupings = groupings
}

// WithSchema adds the schema to the create cost export params
func (o *CreateCostExportParams) WithSchema(schema *string) *CreateCostExportParams {
	o.SetSchema(schema)
	return o
}

// SetSchema adds the schema to the create cost export params
func (o *CreateCostExportParams) SetSchema(schema *string) {
	o.Schema = schema
}

// WithSettingsAggregateBy adds the settingsAggregateBy to the create cost export params
func (o *CreateCostExportParams) WithSettingsAggregateBy(settingsAggregateBy *string) *CreateCostExportParams {
	o.SetSettingsAggregateBy(settingsAggregateBy)
	return o
}

// SetSettingsAggregateBy adds the settingsAggregateBy to the create cost export params
func (o *CreateCostExportParams) SetSettingsAggregateBy(settingsAggregateBy *string) {
	o.SettingsAggregateBy = settingsAggregateBy
}

// WithSettingsAmortize adds the settingsAmortize to the create cost export params
func (o *CreateCostExportParams) WithSettingsAmortize(settingsAmortize *bool) *CreateCostExportParams {
	o.SetSettingsAmortize(settingsAmortize)
	return o
}

// SetSettingsAmortize adds the settingsAmortize to the create cost export params
func (o *CreateCostExportParams) SetSettingsAmortize(settingsAmortize *bool) {
	o.SettingsAmortize = settingsAmortize
}

// WithSettingsIncludeCredits adds the settingsIncludeCredits to the create cost export params
func (o *CreateCostExportParams) WithSettingsIncludeCredits(settingsIncludeCredits *bool) *CreateCostExportParams {
	o.SetSettingsIncludeCredits(settingsIncludeCredits)
	return o
}

// SetSettingsIncludeCredits adds the settingsIncludeCredits to the create cost export params
func (o *CreateCostExportParams) SetSettingsIncludeCredits(settingsIncludeCredits *bool) {
	o.SettingsIncludeCredits = settingsIncludeCredits
}

// WithSettingsIncludeDiscounts adds the settingsIncludeDiscounts to the create cost export params
func (o *CreateCostExportParams) WithSettingsIncludeDiscounts(settingsIncludeDiscounts *bool) *CreateCostExportParams {
	o.SetSettingsIncludeDiscounts(settingsIncludeDiscounts)
	return o
}

// SetSettingsIncludeDiscounts adds the settingsIncludeDiscounts to the create cost export params
func (o *CreateCostExportParams) SetSettingsIncludeDiscounts(settingsIncludeDiscounts *bool) {
	o.SettingsIncludeDiscounts = settingsIncludeDiscounts
}

// WithSettingsIncludeRefunds adds the settingsIncludeRefunds to the create cost export params
func (o *CreateCostExportParams) WithSettingsIncludeRefunds(settingsIncludeRefunds *bool) *CreateCostExportParams {
	o.SetSettingsIncludeRefunds(settingsIncludeRefunds)
	return o
}

// SetSettingsIncludeRefunds adds the settingsIncludeRefunds to the create cost export params
func (o *CreateCostExportParams) SetSettingsIncludeRefunds(settingsIncludeRefunds *bool) {
	o.SettingsIncludeRefunds = settingsIncludeRefunds
}

// WithSettingsIncludeTax adds the settingsIncludeTax to the create cost export params
func (o *CreateCostExportParams) WithSettingsIncludeTax(settingsIncludeTax *bool) *CreateCostExportParams {
	o.SetSettingsIncludeTax(settingsIncludeTax)
	return o
}

// SetSettingsIncludeTax adds the settingsIncludeTax to the create cost export params
func (o *CreateCostExportParams) SetSettingsIncludeTax(settingsIncludeTax *bool) {
	o.SettingsIncludeTax = settingsIncludeTax
}

// WithSettingsUnallocated adds the settingsUnallocated to the create cost export params
func (o *CreateCostExportParams) WithSettingsUnallocated(settingsUnallocated *bool) *CreateCostExportParams {
	o.SetSettingsUnallocated(settingsUnallocated)
	return o
}

// SetSettingsUnallocated adds the settingsUnallocated to the create cost export params
func (o *CreateCostExportParams) SetSettingsUnallocated(settingsUnallocated *bool) {
	o.SettingsUnallocated = settingsUnallocated
}

// WithStartDate adds the startDate to the create cost export params
func (o *CreateCostExportParams) WithStartDate(startDate *string) *CreateCostExportParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the create cost export params
func (o *CreateCostExportParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WithWorkspaceToken adds the workspaceToken to the create cost export params
func (o *CreateCostExportParams) WithWorkspaceToken(workspaceToken *string) *CreateCostExportParams {
	o.SetWorkspaceToken(workspaceToken)
	return o
}

// SetWorkspaceToken adds the workspaceToken to the create cost export params
func (o *CreateCostExportParams) SetWorkspaceToken(workspaceToken *string) {
	o.WorkspaceToken = workspaceToken
}

// WriteToRequest writes these params to a swagger request
func (o *CreateCostExportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CostReportToken != nil {

		// form param cost_report_token
		var frCostReportToken string
		if o.CostReportToken != nil {
			frCostReportToken = *o.CostReportToken
		}
		fCostReportToken := frCostReportToken
		if fCostReportToken != "" {
			if err := r.SetFormParam("cost_report_token", fCostReportToken); err != nil {
				return err
			}
		}
	}

	if o.DateBin != nil {

		// form param date_bin
		var frDateBin string
		if o.DateBin != nil {
			frDateBin = *o.DateBin
		}
		fDateBin := frDateBin
		if fDateBin != "" {
			if err := r.SetFormParam("date_bin", fDateBin); err != nil {
				return err
			}
		}
	}

	if o.EndDate != nil {

		// form param end_date
		var frEndDate string
		if o.EndDate != nil {
			frEndDate = *o.EndDate
		}
		fEndDate := frEndDate
		if fEndDate != "" {
			if err := r.SetFormParam("end_date", fEndDate); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// form param filter
		var frFilter string
		if o.Filter != nil {
			frFilter = *o.Filter
		}
		fFilter := frFilter
		if fFilter != "" {
			if err := r.SetFormParam("filter", fFilter); err != nil {
				return err
			}
		}
	}

	if o.Groupings != nil {

		// binding items for groupings
		joinedGroupings := o.bindParamGroupings(reg)

		// query array param groupings
		if err := r.SetQueryParam("groupings", joinedGroupings...); err != nil {
			return err
		}
	}

	if o.Schema != nil {

		// form param schema
		var frSchema string
		if o.Schema != nil {
			frSchema = *o.Schema
		}
		fSchema := frSchema
		if fSchema != "" {
			if err := r.SetFormParam("schema", fSchema); err != nil {
				return err
			}
		}
	}

	if o.SettingsAggregateBy != nil {

		// form param settings[aggregate_by]
		var frSettingsAggregateBy string
		if o.SettingsAggregateBy != nil {
			frSettingsAggregateBy = *o.SettingsAggregateBy
		}
		fSettingsAggregateBy := frSettingsAggregateBy
		if fSettingsAggregateBy != "" {
			if err := r.SetFormParam("settings[aggregate_by]", fSettingsAggregateBy); err != nil {
				return err
			}
		}
	}

	if o.SettingsAmortize != nil {

		// form param settings[amortize]
		var frSettingsAmortize bool
		if o.SettingsAmortize != nil {
			frSettingsAmortize = *o.SettingsAmortize
		}
		fSettingsAmortize := swag.FormatBool(frSettingsAmortize)
		if fSettingsAmortize != "" {
			if err := r.SetFormParam("settings[amortize]", fSettingsAmortize); err != nil {
				return err
			}
		}
	}

	if o.SettingsIncludeCredits != nil {

		// form param settings[include_credits]
		var frSettingsIncludeCredits bool
		if o.SettingsIncludeCredits != nil {
			frSettingsIncludeCredits = *o.SettingsIncludeCredits
		}
		fSettingsIncludeCredits := swag.FormatBool(frSettingsIncludeCredits)
		if fSettingsIncludeCredits != "" {
			if err := r.SetFormParam("settings[include_credits]", fSettingsIncludeCredits); err != nil {
				return err
			}
		}
	}

	if o.SettingsIncludeDiscounts != nil {

		// form param settings[include_discounts]
		var frSettingsIncludeDiscounts bool
		if o.SettingsIncludeDiscounts != nil {
			frSettingsIncludeDiscounts = *o.SettingsIncludeDiscounts
		}
		fSettingsIncludeDiscounts := swag.FormatBool(frSettingsIncludeDiscounts)
		if fSettingsIncludeDiscounts != "" {
			if err := r.SetFormParam("settings[include_discounts]", fSettingsIncludeDiscounts); err != nil {
				return err
			}
		}
	}

	if o.SettingsIncludeRefunds != nil {

		// form param settings[include_refunds]
		var frSettingsIncludeRefunds bool
		if o.SettingsIncludeRefunds != nil {
			frSettingsIncludeRefunds = *o.SettingsIncludeRefunds
		}
		fSettingsIncludeRefunds := swag.FormatBool(frSettingsIncludeRefunds)
		if fSettingsIncludeRefunds != "" {
			if err := r.SetFormParam("settings[include_refunds]", fSettingsIncludeRefunds); err != nil {
				return err
			}
		}
	}

	if o.SettingsIncludeTax != nil {

		// form param settings[include_tax]
		var frSettingsIncludeTax bool
		if o.SettingsIncludeTax != nil {
			frSettingsIncludeTax = *o.SettingsIncludeTax
		}
		fSettingsIncludeTax := swag.FormatBool(frSettingsIncludeTax)
		if fSettingsIncludeTax != "" {
			if err := r.SetFormParam("settings[include_tax]", fSettingsIncludeTax); err != nil {
				return err
			}
		}
	}

	if o.SettingsUnallocated != nil {

		// form param settings[unallocated]
		var frSettingsUnallocated bool
		if o.SettingsUnallocated != nil {
			frSettingsUnallocated = *o.SettingsUnallocated
		}
		fSettingsUnallocated := swag.FormatBool(frSettingsUnallocated)
		if fSettingsUnallocated != "" {
			if err := r.SetFormParam("settings[unallocated]", fSettingsUnallocated); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// form param start_date
		var frStartDate string
		if o.StartDate != nil {
			frStartDate = *o.StartDate
		}
		fStartDate := frStartDate
		if fStartDate != "" {
			if err := r.SetFormParam("start_date", fStartDate); err != nil {
				return err
			}
		}
	}

	if o.WorkspaceToken != nil {

		// form param workspace_token
		var frWorkspaceToken string
		if o.WorkspaceToken != nil {
			frWorkspaceToken = *o.WorkspaceToken
		}
		fWorkspaceToken := frWorkspaceToken
		if fWorkspaceToken != "" {
			if err := r.SetFormParam("workspace_token", fWorkspaceToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCreateCostExport binds the parameter groupings
func (o *CreateCostExportParams) bindParamGroupings(formats strfmt.Registry) []string {
	groupingsIR := o.Groupings

	var groupingsIC []string
	for _, groupingsIIR := range groupingsIR { // explode []string

		groupingsIIV := groupingsIIR // string as string
		groupingsIC = append(groupingsIC, groupingsIIV)
	}

	// items.CollectionFormat: "csv"
	groupingsIS := swag.JoinByFormat(groupingsIC, "csv")

	return groupingsIS
}
