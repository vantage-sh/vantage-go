// Code generated by go-swagger; DO NOT EDIT.

package costs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCostsParams creates a new GetCostsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCostsParams() *GetCostsParams {
	return &GetCostsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCostsParamsWithTimeout creates a new GetCostsParams object
// with the ability to set a timeout on a request.
func NewGetCostsParamsWithTimeout(timeout time.Duration) *GetCostsParams {
	return &GetCostsParams{
		timeout: timeout,
	}
}

// NewGetCostsParamsWithContext creates a new GetCostsParams object
// with the ability to set a context for a request.
func NewGetCostsParamsWithContext(ctx context.Context) *GetCostsParams {
	return &GetCostsParams{
		Context: ctx,
	}
}

// NewGetCostsParamsWithHTTPClient creates a new GetCostsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCostsParamsWithHTTPClient(client *http.Client) *GetCostsParams {
	return &GetCostsParams{
		HTTPClient: client,
	}
}

/*
GetCostsParams contains all the parameters to send to the API endpoint

	for the get costs operation.

	Typically these are written to a http.Request.
*/
type GetCostsParams struct {

	/* CostReportToken.

	   The CostReport token.
	*/
	CostReportToken *string

	/* DateBin.

	   The date bin of the costs. Defaults to the report's default or day.
	*/
	DateBin *string

	/* EndDate.

	   Last date you would like to filter costs to. ISO 8601 formatted.
	*/
	EndDate *string

	/* Filter.

	   The VQL filter to apply to the costs. If this is supplied you do not need cost_report_token.
	*/
	Filter *string

	/* Groupings.

	   Group the results by specific field(s). Defaults to provider, service, account_id. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tagged, tag:<tag_value>. If providing multiple groupings, join as comma separated values: groupings=provider,service,region
	*/
	Groupings []string

	/* Limit.

	   The amount of results to return. The maximum is 5000.

	   Format: int32
	*/
	Limit *int32

	/* Order.

	   Whether to order costs by date in an ascending or descending manner.

	   Default: "desc"
	*/
	Order *string

	/* Page.

	   The page of results to return.

	   Format: int32
	*/
	Page *int32

	/* SettingsAggregateBy.

	   Results will aggregate by cost or usage.

	   Default: "cost"
	*/
	SettingsAggregateBy *string

	/* SettingsAmortize.

	   Results will amortize.

	   Default: true
	*/
	SettingsAmortize *bool

	/* SettingsIncludeCredits.

	   Results will include credits.
	*/
	SettingsIncludeCredits *bool

	/* SettingsIncludeDiscounts.

	   Results will include discounts.

	   Default: true
	*/
	SettingsIncludeDiscounts *bool

	/* SettingsIncludeRefunds.

	   Results will include refunds.
	*/
	SettingsIncludeRefunds *bool

	/* SettingsIncludeTax.

	   Results will include tax.

	   Default: true
	*/
	SettingsIncludeTax *bool

	/* SettingsUnallocated.

	   Results will show unallocated costs.
	*/
	SettingsUnallocated *bool

	/* StartDate.

	   First date you would like to filter costs from. ISO 8601 formatted.
	*/
	StartDate *string

	/* WorkspaceToken.

	   The token of the Workspace to query costs from. Ignored if 'cost_report_token' is set. Required if the API token is associated with multiple Workspaces.
	*/
	WorkspaceToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get costs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCostsParams) WithDefaults() *GetCostsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get costs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCostsParams) SetDefaults() {
	var (
		orderDefault = string("desc")

		settingsAggregateByDefault = string("cost")

		settingsAmortizeDefault = bool(true)

		settingsIncludeCreditsDefault = bool(false)

		settingsIncludeDiscountsDefault = bool(true)

		settingsIncludeRefundsDefault = bool(false)

		settingsIncludeTaxDefault = bool(true)

		settingsUnallocatedDefault = bool(false)
	)

	val := GetCostsParams{
		Order:                    &orderDefault,
		SettingsAggregateBy:      &settingsAggregateByDefault,
		SettingsAmortize:         &settingsAmortizeDefault,
		SettingsIncludeCredits:   &settingsIncludeCreditsDefault,
		SettingsIncludeDiscounts: &settingsIncludeDiscountsDefault,
		SettingsIncludeRefunds:   &settingsIncludeRefundsDefault,
		SettingsIncludeTax:       &settingsIncludeTaxDefault,
		SettingsUnallocated:      &settingsUnallocatedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get costs params
func (o *GetCostsParams) WithTimeout(timeout time.Duration) *GetCostsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get costs params
func (o *GetCostsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get costs params
func (o *GetCostsParams) WithContext(ctx context.Context) *GetCostsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get costs params
func (o *GetCostsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get costs params
func (o *GetCostsParams) WithHTTPClient(client *http.Client) *GetCostsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get costs params
func (o *GetCostsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCostReportToken adds the costReportToken to the get costs params
func (o *GetCostsParams) WithCostReportToken(costReportToken *string) *GetCostsParams {
	o.SetCostReportToken(costReportToken)
	return o
}

// SetCostReportToken adds the costReportToken to the get costs params
func (o *GetCostsParams) SetCostReportToken(costReportToken *string) {
	o.CostReportToken = costReportToken
}

// WithDateBin adds the dateBin to the get costs params
func (o *GetCostsParams) WithDateBin(dateBin *string) *GetCostsParams {
	o.SetDateBin(dateBin)
	return o
}

// SetDateBin adds the dateBin to the get costs params
func (o *GetCostsParams) SetDateBin(dateBin *string) {
	o.DateBin = dateBin
}

// WithEndDate adds the endDate to the get costs params
func (o *GetCostsParams) WithEndDate(endDate *string) *GetCostsParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get costs params
func (o *GetCostsParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithFilter adds the filter to the get costs params
func (o *GetCostsParams) WithFilter(filter *string) *GetCostsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get costs params
func (o *GetCostsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithGroupings adds the groupings to the get costs params
func (o *GetCostsParams) WithGroupings(groupings []string) *GetCostsParams {
	o.SetGroupings(groupings)
	return o
}

// SetGroupings adds the groupings to the get costs params
func (o *GetCostsParams) SetGroupings(groupings []string) {
	o.Groupings = groupings
}

// WithLimit adds the limit to the get costs params
func (o *GetCostsParams) WithLimit(limit *int32) *GetCostsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get costs params
func (o *GetCostsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOrder adds the order to the get costs params
func (o *GetCostsParams) WithOrder(order *string) *GetCostsParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the get costs params
func (o *GetCostsParams) SetOrder(order *string) {
	o.Order = order
}

// WithPage adds the page to the get costs params
func (o *GetCostsParams) WithPage(page *int32) *GetCostsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get costs params
func (o *GetCostsParams) SetPage(page *int32) {
	o.Page = page
}

// WithSettingsAggregateBy adds the settingsAggregateBy to the get costs params
func (o *GetCostsParams) WithSettingsAggregateBy(settingsAggregateBy *string) *GetCostsParams {
	o.SetSettingsAggregateBy(settingsAggregateBy)
	return o
}

// SetSettingsAggregateBy adds the settingsAggregateBy to the get costs params
func (o *GetCostsParams) SetSettingsAggregateBy(settingsAggregateBy *string) {
	o.SettingsAggregateBy = settingsAggregateBy
}

// WithSettingsAmortize adds the settingsAmortize to the get costs params
func (o *GetCostsParams) WithSettingsAmortize(settingsAmortize *bool) *GetCostsParams {
	o.SetSettingsAmortize(settingsAmortize)
	return o
}

// SetSettingsAmortize adds the settingsAmortize to the get costs params
func (o *GetCostsParams) SetSettingsAmortize(settingsAmortize *bool) {
	o.SettingsAmortize = settingsAmortize
}

// WithSettingsIncludeCredits adds the settingsIncludeCredits to the get costs params
func (o *GetCostsParams) WithSettingsIncludeCredits(settingsIncludeCredits *bool) *GetCostsParams {
	o.SetSettingsIncludeCredits(settingsIncludeCredits)
	return o
}

// SetSettingsIncludeCredits adds the settingsIncludeCredits to the get costs params
func (o *GetCostsParams) SetSettingsIncludeCredits(settingsIncludeCredits *bool) {
	o.SettingsIncludeCredits = settingsIncludeCredits
}

// WithSettingsIncludeDiscounts adds the settingsIncludeDiscounts to the get costs params
func (o *GetCostsParams) WithSettingsIncludeDiscounts(settingsIncludeDiscounts *bool) *GetCostsParams {
	o.SetSettingsIncludeDiscounts(settingsIncludeDiscounts)
	return o
}

// SetSettingsIncludeDiscounts adds the settingsIncludeDiscounts to the get costs params
func (o *GetCostsParams) SetSettingsIncludeDiscounts(settingsIncludeDiscounts *bool) {
	o.SettingsIncludeDiscounts = settingsIncludeDiscounts
}

// WithSettingsIncludeRefunds adds the settingsIncludeRefunds to the get costs params
func (o *GetCostsParams) WithSettingsIncludeRefunds(settingsIncludeRefunds *bool) *GetCostsParams {
	o.SetSettingsIncludeRefunds(settingsIncludeRefunds)
	return o
}

// SetSettingsIncludeRefunds adds the settingsIncludeRefunds to the get costs params
func (o *GetCostsParams) SetSettingsIncludeRefunds(settingsIncludeRefunds *bool) {
	o.SettingsIncludeRefunds = settingsIncludeRefunds
}

// WithSettingsIncludeTax adds the settingsIncludeTax to the get costs params
func (o *GetCostsParams) WithSettingsIncludeTax(settingsIncludeTax *bool) *GetCostsParams {
	o.SetSettingsIncludeTax(settingsIncludeTax)
	return o
}

// SetSettingsIncludeTax adds the settingsIncludeTax to the get costs params
func (o *GetCostsParams) SetSettingsIncludeTax(settingsIncludeTax *bool) {
	o.SettingsIncludeTax = settingsIncludeTax
}

// WithSettingsUnallocated adds the settingsUnallocated to the get costs params
func (o *GetCostsParams) WithSettingsUnallocated(settingsUnallocated *bool) *GetCostsParams {
	o.SetSettingsUnallocated(settingsUnallocated)
	return o
}

// SetSettingsUnallocated adds the settingsUnallocated to the get costs params
func (o *GetCostsParams) SetSettingsUnallocated(settingsUnallocated *bool) {
	o.SettingsUnallocated = settingsUnallocated
}

// WithStartDate adds the startDate to the get costs params
func (o *GetCostsParams) WithStartDate(startDate *string) *GetCostsParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get costs params
func (o *GetCostsParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WithWorkspaceToken adds the workspaceToken to the get costs params
func (o *GetCostsParams) WithWorkspaceToken(workspaceToken *string) *GetCostsParams {
	o.SetWorkspaceToken(workspaceToken)
	return o
}

// SetWorkspaceToken adds the workspaceToken to the get costs params
func (o *GetCostsParams) SetWorkspaceToken(workspaceToken *string) {
	o.WorkspaceToken = workspaceToken
}

// WriteToRequest writes these params to a swagger request
func (o *GetCostsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CostReportToken != nil {

		// query param cost_report_token
		var qrCostReportToken string

		if o.CostReportToken != nil {
			qrCostReportToken = *o.CostReportToken
		}
		qCostReportToken := qrCostReportToken
		if qCostReportToken != "" {

			if err := r.SetQueryParam("cost_report_token", qCostReportToken); err != nil {
				return err
			}
		}
	}

	if o.DateBin != nil {

		// query param date_bin
		var qrDateBin string

		if o.DateBin != nil {
			qrDateBin = *o.DateBin
		}
		qDateBin := qrDateBin
		if qDateBin != "" {

			if err := r.SetQueryParam("date_bin", qDateBin); err != nil {
				return err
			}
		}
	}

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate string

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {

			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Groupings != nil {

		// binding items for groupings
		joinedGroupings := o.bindParamGroupings(reg)

		// query array param groupings
		if err := r.SetQueryParam("groupings", joinedGroupings...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.SettingsAggregateBy != nil {

		// query param settings[aggregate_by]
		var qrSettingsAggregateBy string

		if o.SettingsAggregateBy != nil {
			qrSettingsAggregateBy = *o.SettingsAggregateBy
		}
		qSettingsAggregateBy := qrSettingsAggregateBy
		if qSettingsAggregateBy != "" {

			if err := r.SetQueryParam("settings[aggregate_by]", qSettingsAggregateBy); err != nil {
				return err
			}
		}
	}

	if o.SettingsAmortize != nil {

		// query param settings[amortize]
		var qrSettingsAmortize bool

		if o.SettingsAmortize != nil {
			qrSettingsAmortize = *o.SettingsAmortize
		}
		qSettingsAmortize := swag.FormatBool(qrSettingsAmortize)
		if qSettingsAmortize != "" {

			if err := r.SetQueryParam("settings[amortize]", qSettingsAmortize); err != nil {
				return err
			}
		}
	}

	if o.SettingsIncludeCredits != nil {

		// query param settings[include_credits]
		var qrSettingsIncludeCredits bool

		if o.SettingsIncludeCredits != nil {
			qrSettingsIncludeCredits = *o.SettingsIncludeCredits
		}
		qSettingsIncludeCredits := swag.FormatBool(qrSettingsIncludeCredits)
		if qSettingsIncludeCredits != "" {

			if err := r.SetQueryParam("settings[include_credits]", qSettingsIncludeCredits); err != nil {
				return err
			}
		}
	}

	if o.SettingsIncludeDiscounts != nil {

		// query param settings[include_discounts]
		var qrSettingsIncludeDiscounts bool

		if o.SettingsIncludeDiscounts != nil {
			qrSettingsIncludeDiscounts = *o.SettingsIncludeDiscounts
		}
		qSettingsIncludeDiscounts := swag.FormatBool(qrSettingsIncludeDiscounts)
		if qSettingsIncludeDiscounts != "" {

			if err := r.SetQueryParam("settings[include_discounts]", qSettingsIncludeDiscounts); err != nil {
				return err
			}
		}
	}

	if o.SettingsIncludeRefunds != nil {

		// query param settings[include_refunds]
		var qrSettingsIncludeRefunds bool

		if o.SettingsIncludeRefunds != nil {
			qrSettingsIncludeRefunds = *o.SettingsIncludeRefunds
		}
		qSettingsIncludeRefunds := swag.FormatBool(qrSettingsIncludeRefunds)
		if qSettingsIncludeRefunds != "" {

			if err := r.SetQueryParam("settings[include_refunds]", qSettingsIncludeRefunds); err != nil {
				return err
			}
		}
	}

	if o.SettingsIncludeTax != nil {

		// query param settings[include_tax]
		var qrSettingsIncludeTax bool

		if o.SettingsIncludeTax != nil {
			qrSettingsIncludeTax = *o.SettingsIncludeTax
		}
		qSettingsIncludeTax := swag.FormatBool(qrSettingsIncludeTax)
		if qSettingsIncludeTax != "" {

			if err := r.SetQueryParam("settings[include_tax]", qSettingsIncludeTax); err != nil {
				return err
			}
		}
	}

	if o.SettingsUnallocated != nil {

		// query param settings[unallocated]
		var qrSettingsUnallocated bool

		if o.SettingsUnallocated != nil {
			qrSettingsUnallocated = *o.SettingsUnallocated
		}
		qSettingsUnallocated := swag.FormatBool(qrSettingsUnallocated)
		if qSettingsUnallocated != "" {

			if err := r.SetQueryParam("settings[unallocated]", qSettingsUnallocated); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate string

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {

			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}
	}

	if o.WorkspaceToken != nil {

		// query param workspace_token
		var qrWorkspaceToken string

		if o.WorkspaceToken != nil {
			qrWorkspaceToken = *o.WorkspaceToken
		}
		qWorkspaceToken := qrWorkspaceToken
		if qWorkspaceToken != "" {

			if err := r.SetQueryParam("workspace_token", qWorkspaceToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetCosts binds the parameter groupings
func (o *GetCostsParams) bindParamGroupings(formats strfmt.Registry) []string {
	groupingsIR := o.Groupings

	var groupingsIC []string
	for _, groupingsIIR := range groupingsIR { // explode []string

		groupingsIIV := groupingsIIR // string as string
		groupingsIC = append(groupingsIC, groupingsIIV)
	}

	// items.CollectionFormat: "csv"
	groupingsIS := swag.JoinByFormat(groupingsIC, "csv")

	return groupingsIS
}
