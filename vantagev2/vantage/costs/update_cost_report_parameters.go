// Code generated by go-swagger; DO NOT EDIT.

package costs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// NewUpdateCostReportParams creates a new UpdateCostReportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateCostReportParams() *UpdateCostReportParams {
	return &UpdateCostReportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateCostReportParamsWithTimeout creates a new UpdateCostReportParams object
// with the ability to set a timeout on a request.
func NewUpdateCostReportParamsWithTimeout(timeout time.Duration) *UpdateCostReportParams {
	return &UpdateCostReportParams{
		timeout: timeout,
	}
}

// NewUpdateCostReportParamsWithContext creates a new UpdateCostReportParams object
// with the ability to set a context for a request.
func NewUpdateCostReportParamsWithContext(ctx context.Context) *UpdateCostReportParams {
	return &UpdateCostReportParams{
		Context: ctx,
	}
}

// NewUpdateCostReportParamsWithHTTPClient creates a new UpdateCostReportParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateCostReportParamsWithHTTPClient(client *http.Client) *UpdateCostReportParams {
	return &UpdateCostReportParams{
		HTTPClient: client,
	}
}

/*
UpdateCostReportParams contains all the parameters to send to the API endpoint

	for the update cost report operation.

	Typically these are written to a http.Request.
*/
type UpdateCostReportParams struct {

	// CostReports.
	CostReports *models.PutCostReports

	// CostReportToken.
	CostReportToken string

	/* Groupings.

	   Grouping values for aggregating costs on the report. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tag:<tag_value>. If providing multiple groupings, join as comma separated values: groupings=provider,service,region
	*/
	Groupings []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update cost report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateCostReportParams) WithDefaults() *UpdateCostReportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update cost report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateCostReportParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update cost report params
func (o *UpdateCostReportParams) WithTimeout(timeout time.Duration) *UpdateCostReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update cost report params
func (o *UpdateCostReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update cost report params
func (o *UpdateCostReportParams) WithContext(ctx context.Context) *UpdateCostReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update cost report params
func (o *UpdateCostReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update cost report params
func (o *UpdateCostReportParams) WithHTTPClient(client *http.Client) *UpdateCostReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update cost report params
func (o *UpdateCostReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCostReports adds the costReports to the update cost report params
func (o *UpdateCostReportParams) WithCostReports(costReports *models.PutCostReports) *UpdateCostReportParams {
	o.SetCostReports(costReports)
	return o
}

// SetCostReports adds the costReports to the update cost report params
func (o *UpdateCostReportParams) SetCostReports(costReports *models.PutCostReports) {
	o.CostReports = costReports
}

// WithCostReportToken adds the costReportToken to the update cost report params
func (o *UpdateCostReportParams) WithCostReportToken(costReportToken string) *UpdateCostReportParams {
	o.SetCostReportToken(costReportToken)
	return o
}

// SetCostReportToken adds the costReportToken to the update cost report params
func (o *UpdateCostReportParams) SetCostReportToken(costReportToken string) {
	o.CostReportToken = costReportToken
}

// WithGroupings adds the groupings to the update cost report params
func (o *UpdateCostReportParams) WithGroupings(groupings []string) *UpdateCostReportParams {
	o.SetGroupings(groupings)
	return o
}

// SetGroupings adds the groupings to the update cost report params
func (o *UpdateCostReportParams) SetGroupings(groupings []string) {
	o.Groupings = groupings
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateCostReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.CostReports != nil {
		if err := r.SetBodyParam(o.CostReports); err != nil {
			return err
		}
	}

	// path param cost_report_token
	if err := r.SetPathParam("cost_report_token", o.CostReportToken); err != nil {
		return err
	}

	if o.Groupings != nil {

		// binding items for groupings
		joinedGroupings := o.bindParamGroupings(reg)

		// query array param groupings
		if err := r.SetQueryParam("groupings", joinedGroupings...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamUpdateCostReport binds the parameter groupings
func (o *UpdateCostReportParams) bindParamGroupings(formats strfmt.Registry) []string {
	groupingsIR := o.Groupings

	var groupingsIC []string
	for _, groupingsIIR := range groupingsIR { // explode []string

		groupingsIIV := groupingsIIR // string as string
		groupingsIC = append(groupingsIC, groupingsIIV)
	}

	// items.CollectionFormat: "csv"
	groupingsIS := swag.JoinByFormat(groupingsIC, "csv")

	return groupingsIS
}
