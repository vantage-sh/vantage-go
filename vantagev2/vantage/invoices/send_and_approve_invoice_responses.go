// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// SendAndApproveInvoiceReader is a Reader for the SendAndApproveInvoice structure.
type SendAndApproveInvoiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendAndApproveInvoiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSendAndApproveInvoiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSendAndApproveInvoiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSendAndApproveInvoiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /invoices/{invoice_token}/send_and_approve] sendAndApproveInvoice", response, response.Code())
	}
}

// NewSendAndApproveInvoiceOK creates a SendAndApproveInvoiceOK with default headers values
func NewSendAndApproveInvoiceOK() *SendAndApproveInvoiceOK {
	return &SendAndApproveInvoiceOK{}
}

/*
SendAndApproveInvoiceOK describes a response with status code 200, with default header values.

Invoice approved and sent successfully
*/
type SendAndApproveInvoiceOK struct {
	Payload *models.Invoice
}

// IsSuccess returns true when this send and approve invoice o k response has a 2xx status code
func (o *SendAndApproveInvoiceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this send and approve invoice o k response has a 3xx status code
func (o *SendAndApproveInvoiceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send and approve invoice o k response has a 4xx status code
func (o *SendAndApproveInvoiceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this send and approve invoice o k response has a 5xx status code
func (o *SendAndApproveInvoiceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this send and approve invoice o k response a status code equal to that given
func (o *SendAndApproveInvoiceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the send and approve invoice o k response
func (o *SendAndApproveInvoiceOK) Code() int {
	return 200
}

func (o *SendAndApproveInvoiceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /invoices/{invoice_token}/send_and_approve][%d] sendAndApproveInvoiceOK %s", 200, payload)
}

func (o *SendAndApproveInvoiceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /invoices/{invoice_token}/send_and_approve][%d] sendAndApproveInvoiceOK %s", 200, payload)
}

func (o *SendAndApproveInvoiceOK) GetPayload() *models.Invoice {
	return o.Payload
}

func (o *SendAndApproveInvoiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Invoice)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendAndApproveInvoiceBadRequest creates a SendAndApproveInvoiceBadRequest with default headers values
func NewSendAndApproveInvoiceBadRequest() *SendAndApproveInvoiceBadRequest {
	return &SendAndApproveInvoiceBadRequest{}
}

/*
SendAndApproveInvoiceBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type SendAndApproveInvoiceBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this send and approve invoice bad request response has a 2xx status code
func (o *SendAndApproveInvoiceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send and approve invoice bad request response has a 3xx status code
func (o *SendAndApproveInvoiceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send and approve invoice bad request response has a 4xx status code
func (o *SendAndApproveInvoiceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this send and approve invoice bad request response has a 5xx status code
func (o *SendAndApproveInvoiceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this send and approve invoice bad request response a status code equal to that given
func (o *SendAndApproveInvoiceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the send and approve invoice bad request response
func (o *SendAndApproveInvoiceBadRequest) Code() int {
	return 400
}

func (o *SendAndApproveInvoiceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /invoices/{invoice_token}/send_and_approve][%d] sendAndApproveInvoiceBadRequest %s", 400, payload)
}

func (o *SendAndApproveInvoiceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /invoices/{invoice_token}/send_and_approve][%d] sendAndApproveInvoiceBadRequest %s", 400, payload)
}

func (o *SendAndApproveInvoiceBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *SendAndApproveInvoiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendAndApproveInvoiceNotFound creates a SendAndApproveInvoiceNotFound with default headers values
func NewSendAndApproveInvoiceNotFound() *SendAndApproveInvoiceNotFound {
	return &SendAndApproveInvoiceNotFound{}
}

/*
SendAndApproveInvoiceNotFound describes a response with status code 404, with default header values.

NotFound
*/
type SendAndApproveInvoiceNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this send and approve invoice not found response has a 2xx status code
func (o *SendAndApproveInvoiceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send and approve invoice not found response has a 3xx status code
func (o *SendAndApproveInvoiceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send and approve invoice not found response has a 4xx status code
func (o *SendAndApproveInvoiceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this send and approve invoice not found response has a 5xx status code
func (o *SendAndApproveInvoiceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this send and approve invoice not found response a status code equal to that given
func (o *SendAndApproveInvoiceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the send and approve invoice not found response
func (o *SendAndApproveInvoiceNotFound) Code() int {
	return 404
}

func (o *SendAndApproveInvoiceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /invoices/{invoice_token}/send_and_approve][%d] sendAndApproveInvoiceNotFound %s", 404, payload)
}

func (o *SendAndApproveInvoiceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /invoices/{invoice_token}/send_and_approve][%d] sendAndApproveInvoiceNotFound %s", 404, payload)
}

func (o *SendAndApproveInvoiceNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *SendAndApproveInvoiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
