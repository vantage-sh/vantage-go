// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// DownloadInvoiceReader is a Reader for the DownloadInvoice structure.
type DownloadInvoiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadInvoiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadInvoiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDownloadInvoiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /invoices/{invoice_token}/download] downloadInvoice", response, response.Code())
	}
}

// NewDownloadInvoiceOK creates a DownloadInvoiceOK with default headers values
func NewDownloadInvoiceOK() *DownloadInvoiceOK {
	return &DownloadInvoiceOK{}
}

/*
DownloadInvoiceOK describes a response with status code 200, with default header values.

Returns download URL for the invoice file
*/
type DownloadInvoiceOK struct {
}

// IsSuccess returns true when this download invoice o k response has a 2xx status code
func (o *DownloadInvoiceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download invoice o k response has a 3xx status code
func (o *DownloadInvoiceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download invoice o k response has a 4xx status code
func (o *DownloadInvoiceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download invoice o k response has a 5xx status code
func (o *DownloadInvoiceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download invoice o k response a status code equal to that given
func (o *DownloadInvoiceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download invoice o k response
func (o *DownloadInvoiceOK) Code() int {
	return 200
}

func (o *DownloadInvoiceOK) Error() string {
	return fmt.Sprintf("[POST /invoices/{invoice_token}/download][%d] downloadInvoiceOK", 200)
}

func (o *DownloadInvoiceOK) String() string {
	return fmt.Sprintf("[POST /invoices/{invoice_token}/download][%d] downloadInvoiceOK", 200)
}

func (o *DownloadInvoiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadInvoiceNotFound creates a DownloadInvoiceNotFound with default headers values
func NewDownloadInvoiceNotFound() *DownloadInvoiceNotFound {
	return &DownloadInvoiceNotFound{}
}

/*
DownloadInvoiceNotFound describes a response with status code 404, with default header values.

NotFound
*/
type DownloadInvoiceNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this download invoice not found response has a 2xx status code
func (o *DownloadInvoiceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download invoice not found response has a 3xx status code
func (o *DownloadInvoiceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download invoice not found response has a 4xx status code
func (o *DownloadInvoiceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download invoice not found response has a 5xx status code
func (o *DownloadInvoiceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download invoice not found response a status code equal to that given
func (o *DownloadInvoiceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download invoice not found response
func (o *DownloadInvoiceNotFound) Code() int {
	return 404
}

func (o *DownloadInvoiceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /invoices/{invoice_token}/download][%d] downloadInvoiceNotFound %s", 404, payload)
}

func (o *DownloadInvoiceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /invoices/{invoice_token}/download][%d] downloadInvoiceNotFound %s", 404, payload)
}

func (o *DownloadInvoiceNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DownloadInvoiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
