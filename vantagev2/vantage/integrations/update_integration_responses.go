// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// UpdateIntegrationReader is a Reader for the UpdateIntegration structure.
type UpdateIntegrationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateIntegrationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateIntegrationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateIntegrationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateIntegrationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /integrations/{integration_token}] updateIntegration", response, response.Code())
	}
}

// NewUpdateIntegrationOK creates a UpdateIntegrationOK with default headers values
func NewUpdateIntegrationOK() *UpdateIntegrationOK {
	return &UpdateIntegrationOK{}
}

/*
UpdateIntegrationOK describes a response with status code 200, with default header values.

UpdateIntegrationOK update integration o k
*/
type UpdateIntegrationOK struct {
	Payload *models.Integration
}

// IsSuccess returns true when this update integration o k response has a 2xx status code
func (o *UpdateIntegrationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update integration o k response has a 3xx status code
func (o *UpdateIntegrationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration o k response has a 4xx status code
func (o *UpdateIntegrationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update integration o k response has a 5xx status code
func (o *UpdateIntegrationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration o k response a status code equal to that given
func (o *UpdateIntegrationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update integration o k response
func (o *UpdateIntegrationOK) Code() int {
	return 200
}

func (o *UpdateIntegrationOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /integrations/{integration_token}][%d] updateIntegrationOK %s", 200, payload)
}

func (o *UpdateIntegrationOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /integrations/{integration_token}][%d] updateIntegrationOK %s", 200, payload)
}

func (o *UpdateIntegrationOK) GetPayload() *models.Integration {
	return o.Payload
}

func (o *UpdateIntegrationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Integration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIntegrationBadRequest creates a UpdateIntegrationBadRequest with default headers values
func NewUpdateIntegrationBadRequest() *UpdateIntegrationBadRequest {
	return &UpdateIntegrationBadRequest{}
}

/*
UpdateIntegrationBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type UpdateIntegrationBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update integration bad request response has a 2xx status code
func (o *UpdateIntegrationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update integration bad request response has a 3xx status code
func (o *UpdateIntegrationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration bad request response has a 4xx status code
func (o *UpdateIntegrationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update integration bad request response has a 5xx status code
func (o *UpdateIntegrationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration bad request response a status code equal to that given
func (o *UpdateIntegrationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update integration bad request response
func (o *UpdateIntegrationBadRequest) Code() int {
	return 400
}

func (o *UpdateIntegrationBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /integrations/{integration_token}][%d] updateIntegrationBadRequest %s", 400, payload)
}

func (o *UpdateIntegrationBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /integrations/{integration_token}][%d] updateIntegrationBadRequest %s", 400, payload)
}

func (o *UpdateIntegrationBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateIntegrationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIntegrationNotFound creates a UpdateIntegrationNotFound with default headers values
func NewUpdateIntegrationNotFound() *UpdateIntegrationNotFound {
	return &UpdateIntegrationNotFound{}
}

/*
UpdateIntegrationNotFound describes a response with status code 404, with default header values.

NotFound
*/
type UpdateIntegrationNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update integration not found response has a 2xx status code
func (o *UpdateIntegrationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update integration not found response has a 3xx status code
func (o *UpdateIntegrationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration not found response has a 4xx status code
func (o *UpdateIntegrationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update integration not found response has a 5xx status code
func (o *UpdateIntegrationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration not found response a status code equal to that given
func (o *UpdateIntegrationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update integration not found response
func (o *UpdateIntegrationNotFound) Code() int {
	return 404
}

func (o *UpdateIntegrationNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /integrations/{integration_token}][%d] updateIntegrationNotFound %s", 404, payload)
}

func (o *UpdateIntegrationNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /integrations/{integration_token}][%d] updateIntegrationNotFound %s", 404, payload)
}

func (o *UpdateIntegrationNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateIntegrationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
