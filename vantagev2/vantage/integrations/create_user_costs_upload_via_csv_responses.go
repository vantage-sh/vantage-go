// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// CreateUserCostsUploadViaCsvReader is a Reader for the CreateUserCostsUploadViaCsv structure.
type CreateUserCostsUploadViaCsvReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateUserCostsUploadViaCsvReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateUserCostsUploadViaCsvCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateUserCostsUploadViaCsvBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateUserCostsUploadViaCsvForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateUserCostsUploadViaCsvNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateUserCostsUploadViaCsvUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /integrations/{integration_token}/costs.csv] createUserCostsUploadViaCsv", response, response.Code())
	}
}

// NewCreateUserCostsUploadViaCsvCreated creates a CreateUserCostsUploadViaCsvCreated with default headers values
func NewCreateUserCostsUploadViaCsvCreated() *CreateUserCostsUploadViaCsvCreated {
	return &CreateUserCostsUploadViaCsvCreated{}
}

/*
CreateUserCostsUploadViaCsvCreated describes a response with status code 201, with default header values.

CreateUserCostsUploadViaCsvCreated create user costs upload via csv created
*/
type CreateUserCostsUploadViaCsvCreated struct {
	Payload *models.UserCostsUpload
}

// IsSuccess returns true when this create user costs upload via csv created response has a 2xx status code
func (o *CreateUserCostsUploadViaCsvCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create user costs upload via csv created response has a 3xx status code
func (o *CreateUserCostsUploadViaCsvCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user costs upload via csv created response has a 4xx status code
func (o *CreateUserCostsUploadViaCsvCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create user costs upload via csv created response has a 5xx status code
func (o *CreateUserCostsUploadViaCsvCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create user costs upload via csv created response a status code equal to that given
func (o *CreateUserCostsUploadViaCsvCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create user costs upload via csv created response
func (o *CreateUserCostsUploadViaCsvCreated) Code() int {
	return 201
}

func (o *CreateUserCostsUploadViaCsvCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /integrations/{integration_token}/costs.csv][%d] createUserCostsUploadViaCsvCreated %s", 201, payload)
}

func (o *CreateUserCostsUploadViaCsvCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /integrations/{integration_token}/costs.csv][%d] createUserCostsUploadViaCsvCreated %s", 201, payload)
}

func (o *CreateUserCostsUploadViaCsvCreated) GetPayload() *models.UserCostsUpload {
	return o.Payload
}

func (o *CreateUserCostsUploadViaCsvCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserCostsUpload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserCostsUploadViaCsvBadRequest creates a CreateUserCostsUploadViaCsvBadRequest with default headers values
func NewCreateUserCostsUploadViaCsvBadRequest() *CreateUserCostsUploadViaCsvBadRequest {
	return &CreateUserCostsUploadViaCsvBadRequest{}
}

/*
CreateUserCostsUploadViaCsvBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type CreateUserCostsUploadViaCsvBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this create user costs upload via csv bad request response has a 2xx status code
func (o *CreateUserCostsUploadViaCsvBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create user costs upload via csv bad request response has a 3xx status code
func (o *CreateUserCostsUploadViaCsvBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user costs upload via csv bad request response has a 4xx status code
func (o *CreateUserCostsUploadViaCsvBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create user costs upload via csv bad request response has a 5xx status code
func (o *CreateUserCostsUploadViaCsvBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create user costs upload via csv bad request response a status code equal to that given
func (o *CreateUserCostsUploadViaCsvBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create user costs upload via csv bad request response
func (o *CreateUserCostsUploadViaCsvBadRequest) Code() int {
	return 400
}

func (o *CreateUserCostsUploadViaCsvBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /integrations/{integration_token}/costs.csv][%d] createUserCostsUploadViaCsvBadRequest %s", 400, payload)
}

func (o *CreateUserCostsUploadViaCsvBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /integrations/{integration_token}/costs.csv][%d] createUserCostsUploadViaCsvBadRequest %s", 400, payload)
}

func (o *CreateUserCostsUploadViaCsvBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateUserCostsUploadViaCsvBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserCostsUploadViaCsvForbidden creates a CreateUserCostsUploadViaCsvForbidden with default headers values
func NewCreateUserCostsUploadViaCsvForbidden() *CreateUserCostsUploadViaCsvForbidden {
	return &CreateUserCostsUploadViaCsvForbidden{}
}

/*
CreateUserCostsUploadViaCsvForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateUserCostsUploadViaCsvForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this create user costs upload via csv forbidden response has a 2xx status code
func (o *CreateUserCostsUploadViaCsvForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create user costs upload via csv forbidden response has a 3xx status code
func (o *CreateUserCostsUploadViaCsvForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user costs upload via csv forbidden response has a 4xx status code
func (o *CreateUserCostsUploadViaCsvForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create user costs upload via csv forbidden response has a 5xx status code
func (o *CreateUserCostsUploadViaCsvForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create user costs upload via csv forbidden response a status code equal to that given
func (o *CreateUserCostsUploadViaCsvForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create user costs upload via csv forbidden response
func (o *CreateUserCostsUploadViaCsvForbidden) Code() int {
	return 403
}

func (o *CreateUserCostsUploadViaCsvForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /integrations/{integration_token}/costs.csv][%d] createUserCostsUploadViaCsvForbidden %s", 403, payload)
}

func (o *CreateUserCostsUploadViaCsvForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /integrations/{integration_token}/costs.csv][%d] createUserCostsUploadViaCsvForbidden %s", 403, payload)
}

func (o *CreateUserCostsUploadViaCsvForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateUserCostsUploadViaCsvForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserCostsUploadViaCsvNotFound creates a CreateUserCostsUploadViaCsvNotFound with default headers values
func NewCreateUserCostsUploadViaCsvNotFound() *CreateUserCostsUploadViaCsvNotFound {
	return &CreateUserCostsUploadViaCsvNotFound{}
}

/*
CreateUserCostsUploadViaCsvNotFound describes a response with status code 404, with default header values.

NotFound
*/
type CreateUserCostsUploadViaCsvNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this create user costs upload via csv not found response has a 2xx status code
func (o *CreateUserCostsUploadViaCsvNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create user costs upload via csv not found response has a 3xx status code
func (o *CreateUserCostsUploadViaCsvNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user costs upload via csv not found response has a 4xx status code
func (o *CreateUserCostsUploadViaCsvNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create user costs upload via csv not found response has a 5xx status code
func (o *CreateUserCostsUploadViaCsvNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create user costs upload via csv not found response a status code equal to that given
func (o *CreateUserCostsUploadViaCsvNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create user costs upload via csv not found response
func (o *CreateUserCostsUploadViaCsvNotFound) Code() int {
	return 404
}

func (o *CreateUserCostsUploadViaCsvNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /integrations/{integration_token}/costs.csv][%d] createUserCostsUploadViaCsvNotFound %s", 404, payload)
}

func (o *CreateUserCostsUploadViaCsvNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /integrations/{integration_token}/costs.csv][%d] createUserCostsUploadViaCsvNotFound %s", 404, payload)
}

func (o *CreateUserCostsUploadViaCsvNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateUserCostsUploadViaCsvNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserCostsUploadViaCsvUnprocessableEntity creates a CreateUserCostsUploadViaCsvUnprocessableEntity with default headers values
func NewCreateUserCostsUploadViaCsvUnprocessableEntity() *CreateUserCostsUploadViaCsvUnprocessableEntity {
	return &CreateUserCostsUploadViaCsvUnprocessableEntity{}
}

/*
CreateUserCostsUploadViaCsvUnprocessableEntity describes a response with status code 422, with default header values.

UnprocessableEntity
*/
type CreateUserCostsUploadViaCsvUnprocessableEntity struct {
	Payload *models.Errors
}

// IsSuccess returns true when this create user costs upload via csv unprocessable entity response has a 2xx status code
func (o *CreateUserCostsUploadViaCsvUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create user costs upload via csv unprocessable entity response has a 3xx status code
func (o *CreateUserCostsUploadViaCsvUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user costs upload via csv unprocessable entity response has a 4xx status code
func (o *CreateUserCostsUploadViaCsvUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create user costs upload via csv unprocessable entity response has a 5xx status code
func (o *CreateUserCostsUploadViaCsvUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create user costs upload via csv unprocessable entity response a status code equal to that given
func (o *CreateUserCostsUploadViaCsvUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the create user costs upload via csv unprocessable entity response
func (o *CreateUserCostsUploadViaCsvUnprocessableEntity) Code() int {
	return 422
}

func (o *CreateUserCostsUploadViaCsvUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /integrations/{integration_token}/costs.csv][%d] createUserCostsUploadViaCsvUnprocessableEntity %s", 422, payload)
}

func (o *CreateUserCostsUploadViaCsvUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /integrations/{integration_token}/costs.csv][%d] createUserCostsUploadViaCsvUnprocessableEntity %s", 422, payload)
}

func (o *CreateUserCostsUploadViaCsvUnprocessableEntity) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateUserCostsUploadViaCsvUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
