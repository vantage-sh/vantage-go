// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateUserCostsUploadViaCsvParams creates a new CreateUserCostsUploadViaCsvParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateUserCostsUploadViaCsvParams() *CreateUserCostsUploadViaCsvParams {
	return &CreateUserCostsUploadViaCsvParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateUserCostsUploadViaCsvParamsWithTimeout creates a new CreateUserCostsUploadViaCsvParams object
// with the ability to set a timeout on a request.
func NewCreateUserCostsUploadViaCsvParamsWithTimeout(timeout time.Duration) *CreateUserCostsUploadViaCsvParams {
	return &CreateUserCostsUploadViaCsvParams{
		timeout: timeout,
	}
}

// NewCreateUserCostsUploadViaCsvParamsWithContext creates a new CreateUserCostsUploadViaCsvParams object
// with the ability to set a context for a request.
func NewCreateUserCostsUploadViaCsvParamsWithContext(ctx context.Context) *CreateUserCostsUploadViaCsvParams {
	return &CreateUserCostsUploadViaCsvParams{
		Context: ctx,
	}
}

// NewCreateUserCostsUploadViaCsvParamsWithHTTPClient creates a new CreateUserCostsUploadViaCsvParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateUserCostsUploadViaCsvParamsWithHTTPClient(client *http.Client) *CreateUserCostsUploadViaCsvParams {
	return &CreateUserCostsUploadViaCsvParams{
		HTTPClient: client,
	}
}

/*
CreateUserCostsUploadViaCsvParams contains all the parameters to send to the API endpoint

	for the create user costs upload via csv operation.

	Typically these are written to a http.Request.
*/
type CreateUserCostsUploadViaCsvParams struct {

	/* AutoTransform.

	   Attempt to automatically transform the CSV file to match the FOCUS format.
	*/
	AutoTransform *bool

	/* Csv.

	   CSV file containing custom costs
	*/
	Csv runtime.NamedReadCloser

	// IntegrationToken.
	IntegrationToken string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create user costs upload via csv params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateUserCostsUploadViaCsvParams) WithDefaults() *CreateUserCostsUploadViaCsvParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create user costs upload via csv params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateUserCostsUploadViaCsvParams) SetDefaults() {
	var (
		autoTransformDefault = bool(false)
	)

	val := CreateUserCostsUploadViaCsvParams{
		AutoTransform: &autoTransformDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the create user costs upload via csv params
func (o *CreateUserCostsUploadViaCsvParams) WithTimeout(timeout time.Duration) *CreateUserCostsUploadViaCsvParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create user costs upload via csv params
func (o *CreateUserCostsUploadViaCsvParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create user costs upload via csv params
func (o *CreateUserCostsUploadViaCsvParams) WithContext(ctx context.Context) *CreateUserCostsUploadViaCsvParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create user costs upload via csv params
func (o *CreateUserCostsUploadViaCsvParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create user costs upload via csv params
func (o *CreateUserCostsUploadViaCsvParams) WithHTTPClient(client *http.Client) *CreateUserCostsUploadViaCsvParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create user costs upload via csv params
func (o *CreateUserCostsUploadViaCsvParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAutoTransform adds the autoTransform to the create user costs upload via csv params
func (o *CreateUserCostsUploadViaCsvParams) WithAutoTransform(autoTransform *bool) *CreateUserCostsUploadViaCsvParams {
	o.SetAutoTransform(autoTransform)
	return o
}

// SetAutoTransform adds the autoTransform to the create user costs upload via csv params
func (o *CreateUserCostsUploadViaCsvParams) SetAutoTransform(autoTransform *bool) {
	o.AutoTransform = autoTransform
}

// WithCsv adds the csv to the create user costs upload via csv params
func (o *CreateUserCostsUploadViaCsvParams) WithCsv(csv runtime.NamedReadCloser) *CreateUserCostsUploadViaCsvParams {
	o.SetCsv(csv)
	return o
}

// SetCsv adds the csv to the create user costs upload via csv params
func (o *CreateUserCostsUploadViaCsvParams) SetCsv(csv runtime.NamedReadCloser) {
	o.Csv = csv
}

// WithIntegrationToken adds the integrationToken to the create user costs upload via csv params
func (o *CreateUserCostsUploadViaCsvParams) WithIntegrationToken(integrationToken string) *CreateUserCostsUploadViaCsvParams {
	o.SetIntegrationToken(integrationToken)
	return o
}

// SetIntegrationToken adds the integrationToken to the create user costs upload via csv params
func (o *CreateUserCostsUploadViaCsvParams) SetIntegrationToken(integrationToken string) {
	o.IntegrationToken = integrationToken
}

// WriteToRequest writes these params to a swagger request
func (o *CreateUserCostsUploadViaCsvParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AutoTransform != nil {

		// form param auto_transform
		var frAutoTransform bool
		if o.AutoTransform != nil {
			frAutoTransform = *o.AutoTransform
		}
		fAutoTransform := swag.FormatBool(frAutoTransform)
		if fAutoTransform != "" {
			if err := r.SetFormParam("auto_transform", fAutoTransform); err != nil {
				return err
			}
		}
	}
	// form file param csv
	if err := r.SetFileParam("csv", o.Csv); err != nil {
		return err
	}

	// path param integration_token
	if err := r.SetPathParam("integration_token", o.IntegrationToken); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
