// Code generated by go-swagger; DO NOT EDIT.

package data_exports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// GetDataExportReader is a Reader for the GetDataExport structure.
type GetDataExportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDataExportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDataExportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDataExportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewGetDataExportPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDataExportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /data_exports/{data_export_token}] getDataExport", response, response.Code())
	}
}

// NewGetDataExportOK creates a GetDataExportOK with default headers values
func NewGetDataExportOK() *GetDataExportOK {
	return &GetDataExportOK{}
}

/*
GetDataExportOK describes a response with status code 200, with default header values.

Returns the completed data export and its manifest. If it is still pending, the response will be a 202 and the caller should check the Location and Retry-After headers to determine where and how long to wait before polling again.
*/
type GetDataExportOK struct {
	Payload *models.DataExport
}

// IsSuccess returns true when this get data export o k response has a 2xx status code
func (o *GetDataExportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get data export o k response has a 3xx status code
func (o *GetDataExportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get data export o k response has a 4xx status code
func (o *GetDataExportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get data export o k response has a 5xx status code
func (o *GetDataExportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get data export o k response a status code equal to that given
func (o *GetDataExportOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get data export o k response
func (o *GetDataExportOK) Code() int {
	return 200
}

func (o *GetDataExportOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /data_exports/{data_export_token}][%d] getDataExportOK %s", 200, payload)
}

func (o *GetDataExportOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /data_exports/{data_export_token}][%d] getDataExportOK %s", 200, payload)
}

func (o *GetDataExportOK) GetPayload() *models.DataExport {
	return o.Payload
}

func (o *GetDataExportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DataExport)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataExportBadRequest creates a GetDataExportBadRequest with default headers values
func NewGetDataExportBadRequest() *GetDataExportBadRequest {
	return &GetDataExportBadRequest{}
}

/*
GetDataExportBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type GetDataExportBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get data export bad request response has a 2xx status code
func (o *GetDataExportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get data export bad request response has a 3xx status code
func (o *GetDataExportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get data export bad request response has a 4xx status code
func (o *GetDataExportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get data export bad request response has a 5xx status code
func (o *GetDataExportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get data export bad request response a status code equal to that given
func (o *GetDataExportBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get data export bad request response
func (o *GetDataExportBadRequest) Code() int {
	return 400
}

func (o *GetDataExportBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /data_exports/{data_export_token}][%d] getDataExportBadRequest %s", 400, payload)
}

func (o *GetDataExportBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /data_exports/{data_export_token}][%d] getDataExportBadRequest %s", 400, payload)
}

func (o *GetDataExportBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetDataExportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataExportPaymentRequired creates a GetDataExportPaymentRequired with default headers values
func NewGetDataExportPaymentRequired() *GetDataExportPaymentRequired {
	return &GetDataExportPaymentRequired{}
}

/*
GetDataExportPaymentRequired describes a response with status code 402, with default header values.

PaymentRequired
*/
type GetDataExportPaymentRequired struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get data export payment required response has a 2xx status code
func (o *GetDataExportPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get data export payment required response has a 3xx status code
func (o *GetDataExportPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get data export payment required response has a 4xx status code
func (o *GetDataExportPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this get data export payment required response has a 5xx status code
func (o *GetDataExportPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this get data export payment required response a status code equal to that given
func (o *GetDataExportPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the get data export payment required response
func (o *GetDataExportPaymentRequired) Code() int {
	return 402
}

func (o *GetDataExportPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /data_exports/{data_export_token}][%d] getDataExportPaymentRequired %s", 402, payload)
}

func (o *GetDataExportPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /data_exports/{data_export_token}][%d] getDataExportPaymentRequired %s", 402, payload)
}

func (o *GetDataExportPaymentRequired) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetDataExportPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataExportNotFound creates a GetDataExportNotFound with default headers values
func NewGetDataExportNotFound() *GetDataExportNotFound {
	return &GetDataExportNotFound{}
}

/*
GetDataExportNotFound describes a response with status code 404, with default header values.

NotFound
*/
type GetDataExportNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get data export not found response has a 2xx status code
func (o *GetDataExportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get data export not found response has a 3xx status code
func (o *GetDataExportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get data export not found response has a 4xx status code
func (o *GetDataExportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get data export not found response has a 5xx status code
func (o *GetDataExportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get data export not found response a status code equal to that given
func (o *GetDataExportNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get data export not found response
func (o *GetDataExportNotFound) Code() int {
	return 404
}

func (o *GetDataExportNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /data_exports/{data_export_token}][%d] getDataExportNotFound %s", 404, payload)
}

func (o *GetDataExportNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /data_exports/{data_export_token}][%d] getDataExportNotFound %s", 404, payload)
}

func (o *GetDataExportNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetDataExportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
