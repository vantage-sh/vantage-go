// Code generated by go-swagger; DO NOT EDIT.

package user_feedback

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// CreateUserFeedbackReader is a Reader for the CreateUserFeedback structure.
type CreateUserFeedbackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateUserFeedbackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateUserFeedbackCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateUserFeedbackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateUserFeedbackUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /user_feedback] createUserFeedback", response, response.Code())
	}
}

// NewCreateUserFeedbackCreated creates a CreateUserFeedbackCreated with default headers values
func NewCreateUserFeedbackCreated() *CreateUserFeedbackCreated {
	return &CreateUserFeedbackCreated{}
}

/*
CreateUserFeedbackCreated describes a response with status code 201, with default header values.

Provide UserFeedback for our product and features.
*/
type CreateUserFeedbackCreated struct {
	Payload *models.UserFeedback
}

// IsSuccess returns true when this create user feedback created response has a 2xx status code
func (o *CreateUserFeedbackCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create user feedback created response has a 3xx status code
func (o *CreateUserFeedbackCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user feedback created response has a 4xx status code
func (o *CreateUserFeedbackCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create user feedback created response has a 5xx status code
func (o *CreateUserFeedbackCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create user feedback created response a status code equal to that given
func (o *CreateUserFeedbackCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create user feedback created response
func (o *CreateUserFeedbackCreated) Code() int {
	return 201
}

func (o *CreateUserFeedbackCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user_feedback][%d] createUserFeedbackCreated %s", 201, payload)
}

func (o *CreateUserFeedbackCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user_feedback][%d] createUserFeedbackCreated %s", 201, payload)
}

func (o *CreateUserFeedbackCreated) GetPayload() *models.UserFeedback {
	return o.Payload
}

func (o *CreateUserFeedbackCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserFeedback)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserFeedbackBadRequest creates a CreateUserFeedbackBadRequest with default headers values
func NewCreateUserFeedbackBadRequest() *CreateUserFeedbackBadRequest {
	return &CreateUserFeedbackBadRequest{}
}

/*
CreateUserFeedbackBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type CreateUserFeedbackBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this create user feedback bad request response has a 2xx status code
func (o *CreateUserFeedbackBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create user feedback bad request response has a 3xx status code
func (o *CreateUserFeedbackBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user feedback bad request response has a 4xx status code
func (o *CreateUserFeedbackBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create user feedback bad request response has a 5xx status code
func (o *CreateUserFeedbackBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create user feedback bad request response a status code equal to that given
func (o *CreateUserFeedbackBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create user feedback bad request response
func (o *CreateUserFeedbackBadRequest) Code() int {
	return 400
}

func (o *CreateUserFeedbackBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user_feedback][%d] createUserFeedbackBadRequest %s", 400, payload)
}

func (o *CreateUserFeedbackBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user_feedback][%d] createUserFeedbackBadRequest %s", 400, payload)
}

func (o *CreateUserFeedbackBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateUserFeedbackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserFeedbackUnprocessableEntity creates a CreateUserFeedbackUnprocessableEntity with default headers values
func NewCreateUserFeedbackUnprocessableEntity() *CreateUserFeedbackUnprocessableEntity {
	return &CreateUserFeedbackUnprocessableEntity{}
}

/*
CreateUserFeedbackUnprocessableEntity describes a response with status code 422, with default header values.

UnprocessableEntity
*/
type CreateUserFeedbackUnprocessableEntity struct {
	Payload *models.Errors
}

// IsSuccess returns true when this create user feedback unprocessable entity response has a 2xx status code
func (o *CreateUserFeedbackUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create user feedback unprocessable entity response has a 3xx status code
func (o *CreateUserFeedbackUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create user feedback unprocessable entity response has a 4xx status code
func (o *CreateUserFeedbackUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create user feedback unprocessable entity response has a 5xx status code
func (o *CreateUserFeedbackUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create user feedback unprocessable entity response a status code equal to that given
func (o *CreateUserFeedbackUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the create user feedback unprocessable entity response
func (o *CreateUserFeedbackUnprocessableEntity) Code() int {
	return 422
}

func (o *CreateUserFeedbackUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user_feedback][%d] createUserFeedbackUnprocessableEntity %s", 422, payload)
}

func (o *CreateUserFeedbackUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user_feedback][%d] createUserFeedbackUnprocessableEntity %s", 422, payload)
}

func (o *CreateUserFeedbackUnprocessableEntity) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateUserFeedbackUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
