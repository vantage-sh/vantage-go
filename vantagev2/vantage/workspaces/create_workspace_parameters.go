// Code generated by go-swagger; DO NOT EDIT.

package workspaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateWorkspaceParams creates a new CreateWorkspaceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateWorkspaceParams() *CreateWorkspaceParams {
	return &CreateWorkspaceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateWorkspaceParamsWithTimeout creates a new CreateWorkspaceParams object
// with the ability to set a timeout on a request.
func NewCreateWorkspaceParamsWithTimeout(timeout time.Duration) *CreateWorkspaceParams {
	return &CreateWorkspaceParams{
		timeout: timeout,
	}
}

// NewCreateWorkspaceParamsWithContext creates a new CreateWorkspaceParams object
// with the ability to set a context for a request.
func NewCreateWorkspaceParamsWithContext(ctx context.Context) *CreateWorkspaceParams {
	return &CreateWorkspaceParams{
		Context: ctx,
	}
}

// NewCreateWorkspaceParamsWithHTTPClient creates a new CreateWorkspaceParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateWorkspaceParamsWithHTTPClient(client *http.Client) *CreateWorkspaceParams {
	return &CreateWorkspaceParams{
		HTTPClient: client,
	}
}

/*
CreateWorkspaceParams contains all the parameters to send to the API endpoint

	for the create workspace operation.

	Typically these are written to a http.Request.
*/
type CreateWorkspaceParams struct {

	/* Currency.

	   Currency code for the workspace.
	*/
	Currency *string

	/* EnableCurrencyConversion.

	   Enable currency conversion for the workspace.

	   Default: true
	*/
	EnableCurrencyConversion *bool

	/* ExchangeRateDate.

	   The date to use for currency conversion.

	   Default: "daily_rate"
	*/
	ExchangeRateDate *string

	/* Name.

	   Name of the workspace.
	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create workspace params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateWorkspaceParams) WithDefaults() *CreateWorkspaceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create workspace params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateWorkspaceParams) SetDefaults() {
	var (
		enableCurrencyConversionDefault = bool(true)

		exchangeRateDateDefault = string("daily_rate")
	)

	val := CreateWorkspaceParams{
		EnableCurrencyConversion: &enableCurrencyConversionDefault,
		ExchangeRateDate:         &exchangeRateDateDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the create workspace params
func (o *CreateWorkspaceParams) WithTimeout(timeout time.Duration) *CreateWorkspaceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create workspace params
func (o *CreateWorkspaceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create workspace params
func (o *CreateWorkspaceParams) WithContext(ctx context.Context) *CreateWorkspaceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create workspace params
func (o *CreateWorkspaceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create workspace params
func (o *CreateWorkspaceParams) WithHTTPClient(client *http.Client) *CreateWorkspaceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create workspace params
func (o *CreateWorkspaceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCurrency adds the currency to the create workspace params
func (o *CreateWorkspaceParams) WithCurrency(currency *string) *CreateWorkspaceParams {
	o.SetCurrency(currency)
	return o
}

// SetCurrency adds the currency to the create workspace params
func (o *CreateWorkspaceParams) SetCurrency(currency *string) {
	o.Currency = currency
}

// WithEnableCurrencyConversion adds the enableCurrencyConversion to the create workspace params
func (o *CreateWorkspaceParams) WithEnableCurrencyConversion(enableCurrencyConversion *bool) *CreateWorkspaceParams {
	o.SetEnableCurrencyConversion(enableCurrencyConversion)
	return o
}

// SetEnableCurrencyConversion adds the enableCurrencyConversion to the create workspace params
func (o *CreateWorkspaceParams) SetEnableCurrencyConversion(enableCurrencyConversion *bool) {
	o.EnableCurrencyConversion = enableCurrencyConversion
}

// WithExchangeRateDate adds the exchangeRateDate to the create workspace params
func (o *CreateWorkspaceParams) WithExchangeRateDate(exchangeRateDate *string) *CreateWorkspaceParams {
	o.SetExchangeRateDate(exchangeRateDate)
	return o
}

// SetExchangeRateDate adds the exchangeRateDate to the create workspace params
func (o *CreateWorkspaceParams) SetExchangeRateDate(exchangeRateDate *string) {
	o.ExchangeRateDate = exchangeRateDate
}

// WithName adds the name to the create workspace params
func (o *CreateWorkspaceParams) WithName(name string) *CreateWorkspaceParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the create workspace params
func (o *CreateWorkspaceParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *CreateWorkspaceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Currency != nil {

		// form param currency
		var frCurrency string
		if o.Currency != nil {
			frCurrency = *o.Currency
		}
		fCurrency := frCurrency
		if fCurrency != "" {
			if err := r.SetFormParam("currency", fCurrency); err != nil {
				return err
			}
		}
	}

	if o.EnableCurrencyConversion != nil {

		// form param enable_currency_conversion
		var frEnableCurrencyConversion bool
		if o.EnableCurrencyConversion != nil {
			frEnableCurrencyConversion = *o.EnableCurrencyConversion
		}
		fEnableCurrencyConversion := swag.FormatBool(frEnableCurrencyConversion)
		if fEnableCurrencyConversion != "" {
			if err := r.SetFormParam("enable_currency_conversion", fEnableCurrencyConversion); err != nil {
				return err
			}
		}
	}

	if o.ExchangeRateDate != nil {

		// form param exchange_rate_date
		var frExchangeRateDate string
		if o.ExchangeRateDate != nil {
			frExchangeRateDate = *o.ExchangeRateDate
		}
		fExchangeRateDate := frExchangeRateDate
		if fExchangeRateDate != "" {
			if err := r.SetFormParam("exchange_rate_date", fExchangeRateDate); err != nil {
				return err
			}
		}
	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
