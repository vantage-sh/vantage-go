// Code generated by go-swagger; DO NOT EDIT.

package workspaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUpdateWorkspaceParams creates a new UpdateWorkspaceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateWorkspaceParams() *UpdateWorkspaceParams {
	return &UpdateWorkspaceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateWorkspaceParamsWithTimeout creates a new UpdateWorkspaceParams object
// with the ability to set a timeout on a request.
func NewUpdateWorkspaceParamsWithTimeout(timeout time.Duration) *UpdateWorkspaceParams {
	return &UpdateWorkspaceParams{
		timeout: timeout,
	}
}

// NewUpdateWorkspaceParamsWithContext creates a new UpdateWorkspaceParams object
// with the ability to set a context for a request.
func NewUpdateWorkspaceParamsWithContext(ctx context.Context) *UpdateWorkspaceParams {
	return &UpdateWorkspaceParams{
		Context: ctx,
	}
}

// NewUpdateWorkspaceParamsWithHTTPClient creates a new UpdateWorkspaceParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateWorkspaceParamsWithHTTPClient(client *http.Client) *UpdateWorkspaceParams {
	return &UpdateWorkspaceParams{
		HTTPClient: client,
	}
}

/*
UpdateWorkspaceParams contains all the parameters to send to the API endpoint

	for the update workspace operation.

	Typically these are written to a http.Request.
*/
type UpdateWorkspaceParams struct {

	/* Currency.

	   Currency code for the workspace.
	*/
	Currency *string

	/* EnableCurrencyConversion.

	   Enable currency conversion for the workspace.

	   Default: true
	*/
	EnableCurrencyConversion *bool

	/* ExchangeRateDate.

	   The date to use for currency conversion.

	   Default: "daily_rate"
	*/
	ExchangeRateDate *string

	/* Name.

	   Name of the workspace.
	*/
	Name *string

	// WorkspaceToken.
	WorkspaceToken string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update workspace params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateWorkspaceParams) WithDefaults() *UpdateWorkspaceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update workspace params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateWorkspaceParams) SetDefaults() {
	var (
		enableCurrencyConversionDefault = bool(true)

		exchangeRateDateDefault = string("daily_rate")
	)

	val := UpdateWorkspaceParams{
		EnableCurrencyConversion: &enableCurrencyConversionDefault,
		ExchangeRateDate:         &exchangeRateDateDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the update workspace params
func (o *UpdateWorkspaceParams) WithTimeout(timeout time.Duration) *UpdateWorkspaceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update workspace params
func (o *UpdateWorkspaceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update workspace params
func (o *UpdateWorkspaceParams) WithContext(ctx context.Context) *UpdateWorkspaceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update workspace params
func (o *UpdateWorkspaceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update workspace params
func (o *UpdateWorkspaceParams) WithHTTPClient(client *http.Client) *UpdateWorkspaceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update workspace params
func (o *UpdateWorkspaceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCurrency adds the currency to the update workspace params
func (o *UpdateWorkspaceParams) WithCurrency(currency *string) *UpdateWorkspaceParams {
	o.SetCurrency(currency)
	return o
}

// SetCurrency adds the currency to the update workspace params
func (o *UpdateWorkspaceParams) SetCurrency(currency *string) {
	o.Currency = currency
}

// WithEnableCurrencyConversion adds the enableCurrencyConversion to the update workspace params
func (o *UpdateWorkspaceParams) WithEnableCurrencyConversion(enableCurrencyConversion *bool) *UpdateWorkspaceParams {
	o.SetEnableCurrencyConversion(enableCurrencyConversion)
	return o
}

// SetEnableCurrencyConversion adds the enableCurrencyConversion to the update workspace params
func (o *UpdateWorkspaceParams) SetEnableCurrencyConversion(enableCurrencyConversion *bool) {
	o.EnableCurrencyConversion = enableCurrencyConversion
}

// WithExchangeRateDate adds the exchangeRateDate to the update workspace params
func (o *UpdateWorkspaceParams) WithExchangeRateDate(exchangeRateDate *string) *UpdateWorkspaceParams {
	o.SetExchangeRateDate(exchangeRateDate)
	return o
}

// SetExchangeRateDate adds the exchangeRateDate to the update workspace params
func (o *UpdateWorkspaceParams) SetExchangeRateDate(exchangeRateDate *string) {
	o.ExchangeRateDate = exchangeRateDate
}

// WithName adds the name to the update workspace params
func (o *UpdateWorkspaceParams) WithName(name *string) *UpdateWorkspaceParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the update workspace params
func (o *UpdateWorkspaceParams) SetName(name *string) {
	o.Name = name
}

// WithWorkspaceToken adds the workspaceToken to the update workspace params
func (o *UpdateWorkspaceParams) WithWorkspaceToken(workspaceToken string) *UpdateWorkspaceParams {
	o.SetWorkspaceToken(workspaceToken)
	return o
}

// SetWorkspaceToken adds the workspaceToken to the update workspace params
func (o *UpdateWorkspaceParams) SetWorkspaceToken(workspaceToken string) {
	o.WorkspaceToken = workspaceToken
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateWorkspaceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Currency != nil {

		// form param currency
		var frCurrency string
		if o.Currency != nil {
			frCurrency = *o.Currency
		}
		fCurrency := frCurrency
		if fCurrency != "" {
			if err := r.SetFormParam("currency", fCurrency); err != nil {
				return err
			}
		}
	}

	if o.EnableCurrencyConversion != nil {

		// form param enable_currency_conversion
		var frEnableCurrencyConversion bool
		if o.EnableCurrencyConversion != nil {
			frEnableCurrencyConversion = *o.EnableCurrencyConversion
		}
		fEnableCurrencyConversion := swag.FormatBool(frEnableCurrencyConversion)
		if fEnableCurrencyConversion != "" {
			if err := r.SetFormParam("enable_currency_conversion", fEnableCurrencyConversion); err != nil {
				return err
			}
		}
	}

	if o.ExchangeRateDate != nil {

		// form param exchange_rate_date
		var frExchangeRateDate string
		if o.ExchangeRateDate != nil {
			frExchangeRateDate = *o.ExchangeRateDate
		}
		fExchangeRateDate := frExchangeRateDate
		if fExchangeRateDate != "" {
			if err := r.SetFormParam("exchange_rate_date", fExchangeRateDate); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}
	}

	// path param workspace_token
	if err := r.SetPathParam("workspace_token", o.WorkspaceToken); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
