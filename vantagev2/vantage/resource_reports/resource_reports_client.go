// Code generated by go-swagger; DO NOT EDIT.

package resource_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new resource reports API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new resource reports API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new resource reports API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for resource reports API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteResourceReport(params *DeleteResourceReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResourceReportNoContent, error)

	GetResourceReport(params *GetResourceReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceReportOK, error)

	GetResourceReports(params *GetResourceReportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceReportsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteResourceReport Delete a ResourceReport.
*/
func (a *Client) DeleteResourceReport(params *DeleteResourceReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResourceReportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourceReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteResourceReport",
		Method:             "DELETE",
		PathPattern:        "/resource_reports/{resource_report_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteResourceReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResourceReportNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteResourceReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceReport Return a ResourceReport.
*/
func (a *Client) GetResourceReport(params *GetResourceReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceReport",
		Method:             "GET",
		PathPattern:        "/resource_reports/{resource_report_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceReports Return all ResourceReports.
*/
func (a *Client) GetResourceReports(params *GetResourceReportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourceReportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceReportsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceReports",
		Method:             "GET",
		PathPattern:        "/resource_reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceReportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceReportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceReports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
