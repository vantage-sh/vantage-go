// Code generated by go-swagger; DO NOT EDIT.

package financial_commitment_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// NewUpdateFinancialCommitmentReportParams creates a new UpdateFinancialCommitmentReportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateFinancialCommitmentReportParams() *UpdateFinancialCommitmentReportParams {
	return &UpdateFinancialCommitmentReportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateFinancialCommitmentReportParamsWithTimeout creates a new UpdateFinancialCommitmentReportParams object
// with the ability to set a timeout on a request.
func NewUpdateFinancialCommitmentReportParamsWithTimeout(timeout time.Duration) *UpdateFinancialCommitmentReportParams {
	return &UpdateFinancialCommitmentReportParams{
		timeout: timeout,
	}
}

// NewUpdateFinancialCommitmentReportParamsWithContext creates a new UpdateFinancialCommitmentReportParams object
// with the ability to set a context for a request.
func NewUpdateFinancialCommitmentReportParamsWithContext(ctx context.Context) *UpdateFinancialCommitmentReportParams {
	return &UpdateFinancialCommitmentReportParams{
		Context: ctx,
	}
}

// NewUpdateFinancialCommitmentReportParamsWithHTTPClient creates a new UpdateFinancialCommitmentReportParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateFinancialCommitmentReportParamsWithHTTPClient(client *http.Client) *UpdateFinancialCommitmentReportParams {
	return &UpdateFinancialCommitmentReportParams{
		HTTPClient: client,
	}
}

/*
UpdateFinancialCommitmentReportParams contains all the parameters to send to the API endpoint

	for the update financial commitment report operation.

	Typically these are written to a http.Request.
*/
type UpdateFinancialCommitmentReportParams struct {

	// FinancialCommitmentReportToken.
	FinancialCommitmentReportToken string

	// UpdateFinancialCommitmentReport.
	UpdateFinancialCommitmentReport *models.UpdateFinancialCommitmentReport

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update financial commitment report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateFinancialCommitmentReportParams) WithDefaults() *UpdateFinancialCommitmentReportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update financial commitment report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateFinancialCommitmentReportParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update financial commitment report params
func (o *UpdateFinancialCommitmentReportParams) WithTimeout(timeout time.Duration) *UpdateFinancialCommitmentReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update financial commitment report params
func (o *UpdateFinancialCommitmentReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update financial commitment report params
func (o *UpdateFinancialCommitmentReportParams) WithContext(ctx context.Context) *UpdateFinancialCommitmentReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update financial commitment report params
func (o *UpdateFinancialCommitmentReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update financial commitment report params
func (o *UpdateFinancialCommitmentReportParams) WithHTTPClient(client *http.Client) *UpdateFinancialCommitmentReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update financial commitment report params
func (o *UpdateFinancialCommitmentReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFinancialCommitmentReportToken adds the financialCommitmentReportToken to the update financial commitment report params
func (o *UpdateFinancialCommitmentReportParams) WithFinancialCommitmentReportToken(financialCommitmentReportToken string) *UpdateFinancialCommitmentReportParams {
	o.SetFinancialCommitmentReportToken(financialCommitmentReportToken)
	return o
}

// SetFinancialCommitmentReportToken adds the financialCommitmentReportToken to the update financial commitment report params
func (o *UpdateFinancialCommitmentReportParams) SetFinancialCommitmentReportToken(financialCommitmentReportToken string) {
	o.FinancialCommitmentReportToken = financialCommitmentReportToken
}

// WithUpdateFinancialCommitmentReport adds the updateFinancialCommitmentReport to the update financial commitment report params
func (o *UpdateFinancialCommitmentReportParams) WithUpdateFinancialCommitmentReport(updateFinancialCommitmentReport *models.UpdateFinancialCommitmentReport) *UpdateFinancialCommitmentReportParams {
	o.SetUpdateFinancialCommitmentReport(updateFinancialCommitmentReport)
	return o
}

// SetUpdateFinancialCommitmentReport adds the updateFinancialCommitmentReport to the update financial commitment report params
func (o *UpdateFinancialCommitmentReportParams) SetUpdateFinancialCommitmentReport(updateFinancialCommitmentReport *models.UpdateFinancialCommitmentReport) {
	o.UpdateFinancialCommitmentReport = updateFinancialCommitmentReport
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateFinancialCommitmentReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param financial_commitment_report_token
	if err := r.SetPathParam("financial_commitment_report_token", o.FinancialCommitmentReportToken); err != nil {
		return err
	}
	if o.UpdateFinancialCommitmentReport != nil {
		if err := r.SetBodyParam(o.UpdateFinancialCommitmentReport); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
