// Code generated by go-swagger; DO NOT EDIT.

package exchange_rates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// CreateExchangeRatesViaCsvReader is a Reader for the CreateExchangeRatesViaCsv structure.
type CreateExchangeRatesViaCsvReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateExchangeRatesViaCsvReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateExchangeRatesViaCsvCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateExchangeRatesViaCsvBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateExchangeRatesViaCsvForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /exchange_rates/csv] createExchangeRatesViaCsv", response, response.Code())
	}
}

// NewCreateExchangeRatesViaCsvCreated creates a CreateExchangeRatesViaCsvCreated with default headers values
func NewCreateExchangeRatesViaCsvCreated() *CreateExchangeRatesViaCsvCreated {
	return &CreateExchangeRatesViaCsvCreated{}
}

/*
CreateExchangeRatesViaCsvCreated describes a response with status code 201, with default header values.

CSV uploaded successfully
*/
type CreateExchangeRatesViaCsvCreated struct {
}

// IsSuccess returns true when this create exchange rates via csv created response has a 2xx status code
func (o *CreateExchangeRatesViaCsvCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create exchange rates via csv created response has a 3xx status code
func (o *CreateExchangeRatesViaCsvCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create exchange rates via csv created response has a 4xx status code
func (o *CreateExchangeRatesViaCsvCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create exchange rates via csv created response has a 5xx status code
func (o *CreateExchangeRatesViaCsvCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create exchange rates via csv created response a status code equal to that given
func (o *CreateExchangeRatesViaCsvCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create exchange rates via csv created response
func (o *CreateExchangeRatesViaCsvCreated) Code() int {
	return 201
}

func (o *CreateExchangeRatesViaCsvCreated) Error() string {
	return fmt.Sprintf("[POST /exchange_rates/csv][%d] createExchangeRatesViaCsvCreated", 201)
}

func (o *CreateExchangeRatesViaCsvCreated) String() string {
	return fmt.Sprintf("[POST /exchange_rates/csv][%d] createExchangeRatesViaCsvCreated", 201)
}

func (o *CreateExchangeRatesViaCsvCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateExchangeRatesViaCsvBadRequest creates a CreateExchangeRatesViaCsvBadRequest with default headers values
func NewCreateExchangeRatesViaCsvBadRequest() *CreateExchangeRatesViaCsvBadRequest {
	return &CreateExchangeRatesViaCsvBadRequest{}
}

/*
CreateExchangeRatesViaCsvBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type CreateExchangeRatesViaCsvBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this create exchange rates via csv bad request response has a 2xx status code
func (o *CreateExchangeRatesViaCsvBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create exchange rates via csv bad request response has a 3xx status code
func (o *CreateExchangeRatesViaCsvBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create exchange rates via csv bad request response has a 4xx status code
func (o *CreateExchangeRatesViaCsvBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create exchange rates via csv bad request response has a 5xx status code
func (o *CreateExchangeRatesViaCsvBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create exchange rates via csv bad request response a status code equal to that given
func (o *CreateExchangeRatesViaCsvBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create exchange rates via csv bad request response
func (o *CreateExchangeRatesViaCsvBadRequest) Code() int {
	return 400
}

func (o *CreateExchangeRatesViaCsvBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /exchange_rates/csv][%d] createExchangeRatesViaCsvBadRequest %s", 400, payload)
}

func (o *CreateExchangeRatesViaCsvBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /exchange_rates/csv][%d] createExchangeRatesViaCsvBadRequest %s", 400, payload)
}

func (o *CreateExchangeRatesViaCsvBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateExchangeRatesViaCsvBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateExchangeRatesViaCsvForbidden creates a CreateExchangeRatesViaCsvForbidden with default headers values
func NewCreateExchangeRatesViaCsvForbidden() *CreateExchangeRatesViaCsvForbidden {
	return &CreateExchangeRatesViaCsvForbidden{}
}

/*
CreateExchangeRatesViaCsvForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateExchangeRatesViaCsvForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this create exchange rates via csv forbidden response has a 2xx status code
func (o *CreateExchangeRatesViaCsvForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create exchange rates via csv forbidden response has a 3xx status code
func (o *CreateExchangeRatesViaCsvForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create exchange rates via csv forbidden response has a 4xx status code
func (o *CreateExchangeRatesViaCsvForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create exchange rates via csv forbidden response has a 5xx status code
func (o *CreateExchangeRatesViaCsvForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create exchange rates via csv forbidden response a status code equal to that given
func (o *CreateExchangeRatesViaCsvForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create exchange rates via csv forbidden response
func (o *CreateExchangeRatesViaCsvForbidden) Code() int {
	return 403
}

func (o *CreateExchangeRatesViaCsvForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /exchange_rates/csv][%d] createExchangeRatesViaCsvForbidden %s", 403, payload)
}

func (o *CreateExchangeRatesViaCsvForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /exchange_rates/csv][%d] createExchangeRatesViaCsvForbidden %s", 403, payload)
}

func (o *CreateExchangeRatesViaCsvForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateExchangeRatesViaCsvForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
