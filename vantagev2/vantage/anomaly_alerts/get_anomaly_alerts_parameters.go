// Code generated by go-swagger; DO NOT EDIT.

package anomaly_alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAnomalyAlertsParams creates a new GetAnomalyAlertsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAnomalyAlertsParams() *GetAnomalyAlertsParams {
	return &GetAnomalyAlertsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAnomalyAlertsParamsWithTimeout creates a new GetAnomalyAlertsParams object
// with the ability to set a timeout on a request.
func NewGetAnomalyAlertsParamsWithTimeout(timeout time.Duration) *GetAnomalyAlertsParams {
	return &GetAnomalyAlertsParams{
		timeout: timeout,
	}
}

// NewGetAnomalyAlertsParamsWithContext creates a new GetAnomalyAlertsParams object
// with the ability to set a context for a request.
func NewGetAnomalyAlertsParamsWithContext(ctx context.Context) *GetAnomalyAlertsParams {
	return &GetAnomalyAlertsParams{
		Context: ctx,
	}
}

// NewGetAnomalyAlertsParamsWithHTTPClient creates a new GetAnomalyAlertsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAnomalyAlertsParamsWithHTTPClient(client *http.Client) *GetAnomalyAlertsParams {
	return &GetAnomalyAlertsParams{
		HTTPClient: client,
	}
}

/*
GetAnomalyAlertsParams contains all the parameters to send to the API endpoint

	for the get anomaly alerts operation.

	Typically these are written to a http.Request.
*/
type GetAnomalyAlertsParams struct {

	/* CostCategory.

	   The cost category of the anomalies to return.
	*/
	CostCategory *string

	/* CostReportToken.

	   The cost report token of the anomalies to return.
	*/
	CostReportToken *string

	/* EndDate.

	   The end date of the anomalies to return. ISO 8601 formatted.

	   Format: date-time
	*/
	EndDate *strfmt.DateTime

	/* Limit.

	   The amount of results to return. The maximum is 1000.

	   Format: int32
	*/
	Limit *int32

	/* Page.

	   The page of results to return.

	   Format: int32
	*/
	Page *int32

	/* Provider.

	   The provider of the anomalies to return.
	*/
	Provider *string

	/* Service.

	   The service of the anomalies to return.
	*/
	Service *string

	/* StartDate.

	   The start date of the anomalies to return. ISO 8601 formatted.

	   Format: date-time
	*/
	StartDate *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get anomaly alerts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAnomalyAlertsParams) WithDefaults() *GetAnomalyAlertsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get anomaly alerts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAnomalyAlertsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) WithTimeout(timeout time.Duration) *GetAnomalyAlertsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) WithContext(ctx context.Context) *GetAnomalyAlertsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) WithHTTPClient(client *http.Client) *GetAnomalyAlertsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCostCategory adds the costCategory to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) WithCostCategory(costCategory *string) *GetAnomalyAlertsParams {
	o.SetCostCategory(costCategory)
	return o
}

// SetCostCategory adds the costCategory to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) SetCostCategory(costCategory *string) {
	o.CostCategory = costCategory
}

// WithCostReportToken adds the costReportToken to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) WithCostReportToken(costReportToken *string) *GetAnomalyAlertsParams {
	o.SetCostReportToken(costReportToken)
	return o
}

// SetCostReportToken adds the costReportToken to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) SetCostReportToken(costReportToken *string) {
	o.CostReportToken = costReportToken
}

// WithEndDate adds the endDate to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) WithEndDate(endDate *strfmt.DateTime) *GetAnomalyAlertsParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) SetEndDate(endDate *strfmt.DateTime) {
	o.EndDate = endDate
}

// WithLimit adds the limit to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) WithLimit(limit *int32) *GetAnomalyAlertsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithPage adds the page to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) WithPage(page *int32) *GetAnomalyAlertsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) SetPage(page *int32) {
	o.Page = page
}

// WithProvider adds the provider to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) WithProvider(provider *string) *GetAnomalyAlertsParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) SetProvider(provider *string) {
	o.Provider = provider
}

// WithService adds the service to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) WithService(service *string) *GetAnomalyAlertsParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) SetService(service *string) {
	o.Service = service
}

// WithStartDate adds the startDate to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) WithStartDate(startDate *strfmt.DateTime) *GetAnomalyAlertsParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get anomaly alerts params
func (o *GetAnomalyAlertsParams) SetStartDate(startDate *strfmt.DateTime) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetAnomalyAlertsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CostCategory != nil {

		// query param cost_category
		var qrCostCategory string

		if o.CostCategory != nil {
			qrCostCategory = *o.CostCategory
		}
		qCostCategory := qrCostCategory
		if qCostCategory != "" {

			if err := r.SetQueryParam("cost_category", qCostCategory); err != nil {
				return err
			}
		}
	}

	if o.CostReportToken != nil {

		// query param cost_report_token
		var qrCostReportToken string

		if o.CostReportToken != nil {
			qrCostReportToken = *o.CostReportToken
		}
		qCostReportToken := qrCostReportToken
		if qCostReportToken != "" {

			if err := r.SetQueryParam("cost_report_token", qCostReportToken); err != nil {
				return err
			}
		}
	}

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate strfmt.DateTime

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate.String()
		if qEndDate != "" {

			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Provider != nil {

		// query param provider
		var qrProvider string

		if o.Provider != nil {
			qrProvider = *o.Provider
		}
		qProvider := qrProvider
		if qProvider != "" {

			if err := r.SetQueryParam("provider", qProvider); err != nil {
				return err
			}
		}
	}

	if o.Service != nil {

		// query param service
		var qrService string

		if o.Service != nil {
			qrService = *o.Service
		}
		qService := qrService
		if qService != "" {

			if err := r.SetQueryParam("service", qService); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate strfmt.DateTime

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {

			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
