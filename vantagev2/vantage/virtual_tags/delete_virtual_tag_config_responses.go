// Code generated by go-swagger; DO NOT EDIT.

package virtual_tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// DeleteVirtualTagConfigReader is a Reader for the DeleteVirtualTagConfig structure.
type DeleteVirtualTagConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVirtualTagConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteVirtualTagConfigNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteVirtualTagConfigForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteVirtualTagConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /virtual_tag_configs/{token}] deleteVirtualTagConfig", response, response.Code())
	}
}

// NewDeleteVirtualTagConfigNoContent creates a DeleteVirtualTagConfigNoContent with default headers values
func NewDeleteVirtualTagConfigNoContent() *DeleteVirtualTagConfigNoContent {
	return &DeleteVirtualTagConfigNoContent{}
}

/*
DeleteVirtualTagConfigNoContent describes a response with status code 204, with default header values.

DeleteVirtualTagConfigNoContent delete virtual tag config no content
*/
type DeleteVirtualTagConfigNoContent struct {
	Payload *models.VirtualTagConfig
}

// IsSuccess returns true when this delete virtual tag config no content response has a 2xx status code
func (o *DeleteVirtualTagConfigNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete virtual tag config no content response has a 3xx status code
func (o *DeleteVirtualTagConfigNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete virtual tag config no content response has a 4xx status code
func (o *DeleteVirtualTagConfigNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete virtual tag config no content response has a 5xx status code
func (o *DeleteVirtualTagConfigNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete virtual tag config no content response a status code equal to that given
func (o *DeleteVirtualTagConfigNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete virtual tag config no content response
func (o *DeleteVirtualTagConfigNoContent) Code() int {
	return 204
}

func (o *DeleteVirtualTagConfigNoContent) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /virtual_tag_configs/{token}][%d] deleteVirtualTagConfigNoContent %s", 204, payload)
}

func (o *DeleteVirtualTagConfigNoContent) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /virtual_tag_configs/{token}][%d] deleteVirtualTagConfigNoContent %s", 204, payload)
}

func (o *DeleteVirtualTagConfigNoContent) GetPayload() *models.VirtualTagConfig {
	return o.Payload
}

func (o *DeleteVirtualTagConfigNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VirtualTagConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVirtualTagConfigForbidden creates a DeleteVirtualTagConfigForbidden with default headers values
func NewDeleteVirtualTagConfigForbidden() *DeleteVirtualTagConfigForbidden {
	return &DeleteVirtualTagConfigForbidden{}
}

/*
DeleteVirtualTagConfigForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteVirtualTagConfigForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this delete virtual tag config forbidden response has a 2xx status code
func (o *DeleteVirtualTagConfigForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete virtual tag config forbidden response has a 3xx status code
func (o *DeleteVirtualTagConfigForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete virtual tag config forbidden response has a 4xx status code
func (o *DeleteVirtualTagConfigForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete virtual tag config forbidden response has a 5xx status code
func (o *DeleteVirtualTagConfigForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete virtual tag config forbidden response a status code equal to that given
func (o *DeleteVirtualTagConfigForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete virtual tag config forbidden response
func (o *DeleteVirtualTagConfigForbidden) Code() int {
	return 403
}

func (o *DeleteVirtualTagConfigForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /virtual_tag_configs/{token}][%d] deleteVirtualTagConfigForbidden %s", 403, payload)
}

func (o *DeleteVirtualTagConfigForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /virtual_tag_configs/{token}][%d] deleteVirtualTagConfigForbidden %s", 403, payload)
}

func (o *DeleteVirtualTagConfigForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DeleteVirtualTagConfigForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVirtualTagConfigNotFound creates a DeleteVirtualTagConfigNotFound with default headers values
func NewDeleteVirtualTagConfigNotFound() *DeleteVirtualTagConfigNotFound {
	return &DeleteVirtualTagConfigNotFound{}
}

/*
DeleteVirtualTagConfigNotFound describes a response with status code 404, with default header values.

NotFound
*/
type DeleteVirtualTagConfigNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this delete virtual tag config not found response has a 2xx status code
func (o *DeleteVirtualTagConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete virtual tag config not found response has a 3xx status code
func (o *DeleteVirtualTagConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete virtual tag config not found response has a 4xx status code
func (o *DeleteVirtualTagConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete virtual tag config not found response has a 5xx status code
func (o *DeleteVirtualTagConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete virtual tag config not found response a status code equal to that given
func (o *DeleteVirtualTagConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete virtual tag config not found response
func (o *DeleteVirtualTagConfigNotFound) Code() int {
	return 404
}

func (o *DeleteVirtualTagConfigNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /virtual_tag_configs/{token}][%d] deleteVirtualTagConfigNotFound %s", 404, payload)
}

func (o *DeleteVirtualTagConfigNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /virtual_tag_configs/{token}][%d] deleteVirtualTagConfigNotFound %s", 404, payload)
}

func (o *DeleteVirtualTagConfigNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DeleteVirtualTagConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
