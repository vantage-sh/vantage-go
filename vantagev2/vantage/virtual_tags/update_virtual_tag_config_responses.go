// Code generated by go-swagger; DO NOT EDIT.

package virtual_tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// UpdateVirtualTagConfigReader is a Reader for the UpdateVirtualTagConfig structure.
type UpdateVirtualTagConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVirtualTagConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVirtualTagConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVirtualTagConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateVirtualTagConfigForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVirtualTagConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateVirtualTagConfigUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /virtual_tag_configs/{token}] updateVirtualTagConfig", response, response.Code())
	}
}

// NewUpdateVirtualTagConfigOK creates a UpdateVirtualTagConfigOK with default headers values
func NewUpdateVirtualTagConfigOK() *UpdateVirtualTagConfigOK {
	return &UpdateVirtualTagConfigOK{}
}

/*
UpdateVirtualTagConfigOK describes a response with status code 200, with default header values.

UpdateVirtualTagConfigOK update virtual tag config o k
*/
type UpdateVirtualTagConfigOK struct {
	Payload *models.VirtualTagConfig
}

// IsSuccess returns true when this update virtual tag config o k response has a 2xx status code
func (o *UpdateVirtualTagConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update virtual tag config o k response has a 3xx status code
func (o *UpdateVirtualTagConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update virtual tag config o k response has a 4xx status code
func (o *UpdateVirtualTagConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update virtual tag config o k response has a 5xx status code
func (o *UpdateVirtualTagConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update virtual tag config o k response a status code equal to that given
func (o *UpdateVirtualTagConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update virtual tag config o k response
func (o *UpdateVirtualTagConfigOK) Code() int {
	return 200
}

func (o *UpdateVirtualTagConfigOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /virtual_tag_configs/{token}][%d] updateVirtualTagConfigOK %s", 200, payload)
}

func (o *UpdateVirtualTagConfigOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /virtual_tag_configs/{token}][%d] updateVirtualTagConfigOK %s", 200, payload)
}

func (o *UpdateVirtualTagConfigOK) GetPayload() *models.VirtualTagConfig {
	return o.Payload
}

func (o *UpdateVirtualTagConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VirtualTagConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualTagConfigBadRequest creates a UpdateVirtualTagConfigBadRequest with default headers values
func NewUpdateVirtualTagConfigBadRequest() *UpdateVirtualTagConfigBadRequest {
	return &UpdateVirtualTagConfigBadRequest{}
}

/*
UpdateVirtualTagConfigBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type UpdateVirtualTagConfigBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update virtual tag config bad request response has a 2xx status code
func (o *UpdateVirtualTagConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update virtual tag config bad request response has a 3xx status code
func (o *UpdateVirtualTagConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update virtual tag config bad request response has a 4xx status code
func (o *UpdateVirtualTagConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update virtual tag config bad request response has a 5xx status code
func (o *UpdateVirtualTagConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update virtual tag config bad request response a status code equal to that given
func (o *UpdateVirtualTagConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update virtual tag config bad request response
func (o *UpdateVirtualTagConfigBadRequest) Code() int {
	return 400
}

func (o *UpdateVirtualTagConfigBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /virtual_tag_configs/{token}][%d] updateVirtualTagConfigBadRequest %s", 400, payload)
}

func (o *UpdateVirtualTagConfigBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /virtual_tag_configs/{token}][%d] updateVirtualTagConfigBadRequest %s", 400, payload)
}

func (o *UpdateVirtualTagConfigBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateVirtualTagConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualTagConfigForbidden creates a UpdateVirtualTagConfigForbidden with default headers values
func NewUpdateVirtualTagConfigForbidden() *UpdateVirtualTagConfigForbidden {
	return &UpdateVirtualTagConfigForbidden{}
}

/*
UpdateVirtualTagConfigForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateVirtualTagConfigForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update virtual tag config forbidden response has a 2xx status code
func (o *UpdateVirtualTagConfigForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update virtual tag config forbidden response has a 3xx status code
func (o *UpdateVirtualTagConfigForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update virtual tag config forbidden response has a 4xx status code
func (o *UpdateVirtualTagConfigForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update virtual tag config forbidden response has a 5xx status code
func (o *UpdateVirtualTagConfigForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update virtual tag config forbidden response a status code equal to that given
func (o *UpdateVirtualTagConfigForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update virtual tag config forbidden response
func (o *UpdateVirtualTagConfigForbidden) Code() int {
	return 403
}

func (o *UpdateVirtualTagConfigForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /virtual_tag_configs/{token}][%d] updateVirtualTagConfigForbidden %s", 403, payload)
}

func (o *UpdateVirtualTagConfigForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /virtual_tag_configs/{token}][%d] updateVirtualTagConfigForbidden %s", 403, payload)
}

func (o *UpdateVirtualTagConfigForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateVirtualTagConfigForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualTagConfigNotFound creates a UpdateVirtualTagConfigNotFound with default headers values
func NewUpdateVirtualTagConfigNotFound() *UpdateVirtualTagConfigNotFound {
	return &UpdateVirtualTagConfigNotFound{}
}

/*
UpdateVirtualTagConfigNotFound describes a response with status code 404, with default header values.

NotFound
*/
type UpdateVirtualTagConfigNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update virtual tag config not found response has a 2xx status code
func (o *UpdateVirtualTagConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update virtual tag config not found response has a 3xx status code
func (o *UpdateVirtualTagConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update virtual tag config not found response has a 4xx status code
func (o *UpdateVirtualTagConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update virtual tag config not found response has a 5xx status code
func (o *UpdateVirtualTagConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update virtual tag config not found response a status code equal to that given
func (o *UpdateVirtualTagConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update virtual tag config not found response
func (o *UpdateVirtualTagConfigNotFound) Code() int {
	return 404
}

func (o *UpdateVirtualTagConfigNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /virtual_tag_configs/{token}][%d] updateVirtualTagConfigNotFound %s", 404, payload)
}

func (o *UpdateVirtualTagConfigNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /virtual_tag_configs/{token}][%d] updateVirtualTagConfigNotFound %s", 404, payload)
}

func (o *UpdateVirtualTagConfigNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateVirtualTagConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualTagConfigUnprocessableEntity creates a UpdateVirtualTagConfigUnprocessableEntity with default headers values
func NewUpdateVirtualTagConfigUnprocessableEntity() *UpdateVirtualTagConfigUnprocessableEntity {
	return &UpdateVirtualTagConfigUnprocessableEntity{}
}

/*
UpdateVirtualTagConfigUnprocessableEntity describes a response with status code 422, with default header values.

UnprocessableEntity
*/
type UpdateVirtualTagConfigUnprocessableEntity struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update virtual tag config unprocessable entity response has a 2xx status code
func (o *UpdateVirtualTagConfigUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update virtual tag config unprocessable entity response has a 3xx status code
func (o *UpdateVirtualTagConfigUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update virtual tag config unprocessable entity response has a 4xx status code
func (o *UpdateVirtualTagConfigUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update virtual tag config unprocessable entity response has a 5xx status code
func (o *UpdateVirtualTagConfigUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update virtual tag config unprocessable entity response a status code equal to that given
func (o *UpdateVirtualTagConfigUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update virtual tag config unprocessable entity response
func (o *UpdateVirtualTagConfigUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateVirtualTagConfigUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /virtual_tag_configs/{token}][%d] updateVirtualTagConfigUnprocessableEntity %s", 422, payload)
}

func (o *UpdateVirtualTagConfigUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /virtual_tag_configs/{token}][%d] updateVirtualTagConfigUnprocessableEntity %s", 422, payload)
}

func (o *UpdateVirtualTagConfigUnprocessableEntity) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateVirtualTagConfigUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
