// Code generated by go-swagger; DO NOT EDIT.

package unit_costs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUnitCostsParams creates a new GetUnitCostsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetUnitCostsParams() *GetUnitCostsParams {
	return &GetUnitCostsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetUnitCostsParamsWithTimeout creates a new GetUnitCostsParams object
// with the ability to set a timeout on a request.
func NewGetUnitCostsParamsWithTimeout(timeout time.Duration) *GetUnitCostsParams {
	return &GetUnitCostsParams{
		timeout: timeout,
	}
}

// NewGetUnitCostsParamsWithContext creates a new GetUnitCostsParams object
// with the ability to set a context for a request.
func NewGetUnitCostsParamsWithContext(ctx context.Context) *GetUnitCostsParams {
	return &GetUnitCostsParams{
		Context: ctx,
	}
}

// NewGetUnitCostsParamsWithHTTPClient creates a new GetUnitCostsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetUnitCostsParamsWithHTTPClient(client *http.Client) *GetUnitCostsParams {
	return &GetUnitCostsParams{
		HTTPClient: client,
	}
}

/*
GetUnitCostsParams contains all the parameters to send to the API endpoint

	for the get unit costs operation.

	Typically these are written to a http.Request.
*/
type GetUnitCostsParams struct {

	/* CostReportToken.

	   The CostReport token.
	*/
	CostReportToken string

	/* DateBin.

	   The date bin of the unit costs. Defaults to the report's default or day.
	*/
	DateBin *string

	/* EndDate.

	   Last date you would like to filter unit costs to. Defaults to the report's default. ISO 8601 formatted.
	*/
	EndDate *string

	/* Limit.

	   The amount of results to return. The maximum is 1000.

	   Format: int32
	*/
	Limit *int32

	/* Order.

	   Whether to order unit costs by date in an ascending or descending manner.

	   Default: "desc"
	*/
	Order *string

	/* Page.

	   The page of results to return.

	   Format: int32
	*/
	Page *int32

	/* StartDate.

	   First date you would like to filter unit costs from. Defaults to the report's default. ISO 8601 formatted.
	*/
	StartDate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get unit costs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUnitCostsParams) WithDefaults() *GetUnitCostsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get unit costs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUnitCostsParams) SetDefaults() {
	var (
		orderDefault = string("desc")
	)

	val := GetUnitCostsParams{
		Order: &orderDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get unit costs params
func (o *GetUnitCostsParams) WithTimeout(timeout time.Duration) *GetUnitCostsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get unit costs params
func (o *GetUnitCostsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get unit costs params
func (o *GetUnitCostsParams) WithContext(ctx context.Context) *GetUnitCostsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get unit costs params
func (o *GetUnitCostsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get unit costs params
func (o *GetUnitCostsParams) WithHTTPClient(client *http.Client) *GetUnitCostsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get unit costs params
func (o *GetUnitCostsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCostReportToken adds the costReportToken to the get unit costs params
func (o *GetUnitCostsParams) WithCostReportToken(costReportToken string) *GetUnitCostsParams {
	o.SetCostReportToken(costReportToken)
	return o
}

// SetCostReportToken adds the costReportToken to the get unit costs params
func (o *GetUnitCostsParams) SetCostReportToken(costReportToken string) {
	o.CostReportToken = costReportToken
}

// WithDateBin adds the dateBin to the get unit costs params
func (o *GetUnitCostsParams) WithDateBin(dateBin *string) *GetUnitCostsParams {
	o.SetDateBin(dateBin)
	return o
}

// SetDateBin adds the dateBin to the get unit costs params
func (o *GetUnitCostsParams) SetDateBin(dateBin *string) {
	o.DateBin = dateBin
}

// WithEndDate adds the endDate to the get unit costs params
func (o *GetUnitCostsParams) WithEndDate(endDate *string) *GetUnitCostsParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get unit costs params
func (o *GetUnitCostsParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithLimit adds the limit to the get unit costs params
func (o *GetUnitCostsParams) WithLimit(limit *int32) *GetUnitCostsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get unit costs params
func (o *GetUnitCostsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOrder adds the order to the get unit costs params
func (o *GetUnitCostsParams) WithOrder(order *string) *GetUnitCostsParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the get unit costs params
func (o *GetUnitCostsParams) SetOrder(order *string) {
	o.Order = order
}

// WithPage adds the page to the get unit costs params
func (o *GetUnitCostsParams) WithPage(page *int32) *GetUnitCostsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get unit costs params
func (o *GetUnitCostsParams) SetPage(page *int32) {
	o.Page = page
}

// WithStartDate adds the startDate to the get unit costs params
func (o *GetUnitCostsParams) WithStartDate(startDate *string) *GetUnitCostsParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get unit costs params
func (o *GetUnitCostsParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetUnitCostsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param cost_report_token
	qrCostReportToken := o.CostReportToken
	qCostReportToken := qrCostReportToken
	if qCostReportToken != "" {

		if err := r.SetQueryParam("cost_report_token", qCostReportToken); err != nil {
			return err
		}
	}

	if o.DateBin != nil {

		// query param date_bin
		var qrDateBin string

		if o.DateBin != nil {
			qrDateBin = *o.DateBin
		}
		qDateBin := qrDateBin
		if qDateBin != "" {

			if err := r.SetQueryParam("date_bin", qDateBin); err != nil {
				return err
			}
		}
	}

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate string

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {

			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate string

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {

			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
