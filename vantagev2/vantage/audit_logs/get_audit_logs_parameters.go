// Code generated by go-swagger; DO NOT EDIT.

package audit_logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAuditLogsParams creates a new GetAuditLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAuditLogsParams() *GetAuditLogsParams {
	return &GetAuditLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuditLogsParamsWithTimeout creates a new GetAuditLogsParams object
// with the ability to set a timeout on a request.
func NewGetAuditLogsParamsWithTimeout(timeout time.Duration) *GetAuditLogsParams {
	return &GetAuditLogsParams{
		timeout: timeout,
	}
}

// NewGetAuditLogsParamsWithContext creates a new GetAuditLogsParams object
// with the ability to set a context for a request.
func NewGetAuditLogsParamsWithContext(ctx context.Context) *GetAuditLogsParams {
	return &GetAuditLogsParams{
		Context: ctx,
	}
}

// NewGetAuditLogsParamsWithHTTPClient creates a new GetAuditLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAuditLogsParamsWithHTTPClient(client *http.Client) *GetAuditLogsParams {
	return &GetAuditLogsParams{
		HTTPClient: client,
	}
}

/*
GetAuditLogsParams contains all the parameters to send to the API endpoint

	for the get audit logs operation.

	Typically these are written to a http.Request.
*/
type GetAuditLogsParams struct {

	/* Action.

	   Filter by action type (e.g., create, update, delete).
	*/
	Action *string

	/* EndDate.

	   Filter by end date (ISO 8601 format) for the time period.
	*/
	EndDate *string

	/* Limit.

	   The amount of results to return. The maximum is 1000.

	   Format: int32
	*/
	Limit *int32

	/* ObjectName.

	   Filter by object name.
	*/
	ObjectName *string

	/* ObjectToken.

	   Filter by object token (auditable_token).
	*/
	ObjectToken *string

	/* ObjectType.

	   Filter by object type (e.g., virtual_tag, cost_report).
	*/
	ObjectType *string

	/* Page.

	   The page of results to return.

	   Format: int32
	*/
	Page *int32

	/* Source.

	   Filter by source (e.g., console, api).
	*/
	Source *string

	/* StartDate.

	   Filter by start date (ISO 8601 format) for the time period.
	*/
	StartDate *string

	/* Token.

	   Filter by audit log token.
	*/
	Token *string

	/* User.

	   Filter by personal or service API token that performed the action.

	   Format: int32
	*/
	User *int32

	/* WorkspaceToken.

	   Filter by workspace token.
	*/
	WorkspaceToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get audit logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditLogsParams) WithDefaults() *GetAuditLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get audit logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuditLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get audit logs params
func (o *GetAuditLogsParams) WithTimeout(timeout time.Duration) *GetAuditLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get audit logs params
func (o *GetAuditLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get audit logs params
func (o *GetAuditLogsParams) WithContext(ctx context.Context) *GetAuditLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get audit logs params
func (o *GetAuditLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get audit logs params
func (o *GetAuditLogsParams) WithHTTPClient(client *http.Client) *GetAuditLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get audit logs params
func (o *GetAuditLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the get audit logs params
func (o *GetAuditLogsParams) WithAction(action *string) *GetAuditLogsParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the get audit logs params
func (o *GetAuditLogsParams) SetAction(action *string) {
	o.Action = action
}

// WithEndDate adds the endDate to the get audit logs params
func (o *GetAuditLogsParams) WithEndDate(endDate *string) *GetAuditLogsParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get audit logs params
func (o *GetAuditLogsParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithLimit adds the limit to the get audit logs params
func (o *GetAuditLogsParams) WithLimit(limit *int32) *GetAuditLogsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get audit logs params
func (o *GetAuditLogsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithObjectName adds the objectName to the get audit logs params
func (o *GetAuditLogsParams) WithObjectName(objectName *string) *GetAuditLogsParams {
	o.SetObjectName(objectName)
	return o
}

// SetObjectName adds the objectName to the get audit logs params
func (o *GetAuditLogsParams) SetObjectName(objectName *string) {
	o.ObjectName = objectName
}

// WithObjectToken adds the objectToken to the get audit logs params
func (o *GetAuditLogsParams) WithObjectToken(objectToken *string) *GetAuditLogsParams {
	o.SetObjectToken(objectToken)
	return o
}

// SetObjectToken adds the objectToken to the get audit logs params
func (o *GetAuditLogsParams) SetObjectToken(objectToken *string) {
	o.ObjectToken = objectToken
}

// WithObjectType adds the objectType to the get audit logs params
func (o *GetAuditLogsParams) WithObjectType(objectType *string) *GetAuditLogsParams {
	o.SetObjectType(objectType)
	return o
}

// SetObjectType adds the objectType to the get audit logs params
func (o *GetAuditLogsParams) SetObjectType(objectType *string) {
	o.ObjectType = objectType
}

// WithPage adds the page to the get audit logs params
func (o *GetAuditLogsParams) WithPage(page *int32) *GetAuditLogsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get audit logs params
func (o *GetAuditLogsParams) SetPage(page *int32) {
	o.Page = page
}

// WithSource adds the source to the get audit logs params
func (o *GetAuditLogsParams) WithSource(source *string) *GetAuditLogsParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the get audit logs params
func (o *GetAuditLogsParams) SetSource(source *string) {
	o.Source = source
}

// WithStartDate adds the startDate to the get audit logs params
func (o *GetAuditLogsParams) WithStartDate(startDate *string) *GetAuditLogsParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get audit logs params
func (o *GetAuditLogsParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WithToken adds the token to the get audit logs params
func (o *GetAuditLogsParams) WithToken(token *string) *GetAuditLogsParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the get audit logs params
func (o *GetAuditLogsParams) SetToken(token *string) {
	o.Token = token
}

// WithUser adds the user to the get audit logs params
func (o *GetAuditLogsParams) WithUser(user *int32) *GetAuditLogsParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the get audit logs params
func (o *GetAuditLogsParams) SetUser(user *int32) {
	o.User = user
}

// WithWorkspaceToken adds the workspaceToken to the get audit logs params
func (o *GetAuditLogsParams) WithWorkspaceToken(workspaceToken *string) *GetAuditLogsParams {
	o.SetWorkspaceToken(workspaceToken)
	return o
}

// SetWorkspaceToken adds the workspaceToken to the get audit logs params
func (o *GetAuditLogsParams) SetWorkspaceToken(workspaceToken *string) {
	o.WorkspaceToken = workspaceToken
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuditLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Action != nil {

		// query param action
		var qrAction string

		if o.Action != nil {
			qrAction = *o.Action
		}
		qAction := qrAction
		if qAction != "" {

			if err := r.SetQueryParam("action", qAction); err != nil {
				return err
			}
		}
	}

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate string

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {

			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.ObjectName != nil {

		// query param object_name
		var qrObjectName string

		if o.ObjectName != nil {
			qrObjectName = *o.ObjectName
		}
		qObjectName := qrObjectName
		if qObjectName != "" {

			if err := r.SetQueryParam("object_name", qObjectName); err != nil {
				return err
			}
		}
	}

	if o.ObjectToken != nil {

		// query param object_token
		var qrObjectToken string

		if o.ObjectToken != nil {
			qrObjectToken = *o.ObjectToken
		}
		qObjectToken := qrObjectToken
		if qObjectToken != "" {

			if err := r.SetQueryParam("object_token", qObjectToken); err != nil {
				return err
			}
		}
	}

	if o.ObjectType != nil {

		// query param object_type
		var qrObjectType string

		if o.ObjectType != nil {
			qrObjectType = *o.ObjectType
		}
		qObjectType := qrObjectType
		if qObjectType != "" {

			if err := r.SetQueryParam("object_type", qObjectType); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Source != nil {

		// query param source
		var qrSource string

		if o.Source != nil {
			qrSource = *o.Source
		}
		qSource := qrSource
		if qSource != "" {

			if err := r.SetQueryParam("source", qSource); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate string

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {

			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}
	}

	if o.Token != nil {

		// query param token
		var qrToken string

		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {

			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}
	}

	if o.User != nil {

		// query param user
		var qrUser int32

		if o.User != nil {
			qrUser = *o.User
		}
		qUser := swag.FormatInt32(qrUser)
		if qUser != "" {

			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}
	}

	if o.WorkspaceToken != nil {

		// query param workspace_token
		var qrWorkspaceToken string

		if o.WorkspaceToken != nil {
			qrWorkspaceToken = *o.WorkspaceToken
		}
		qWorkspaceToken := qrWorkspaceToken
		if qWorkspaceToken != "" {

			if err := r.SetQueryParam("workspace_token", qWorkspaceToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
