// Code generated by go-swagger; DO NOT EDIT.

package anomaly_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// CreateAnomalyNotificationReader is a Reader for the CreateAnomalyNotification structure.
type CreateAnomalyNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateAnomalyNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateAnomalyNotificationCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateAnomalyNotificationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /anomaly_notifications] createAnomalyNotification", response, response.Code())
	}
}

// NewCreateAnomalyNotificationCreated creates a CreateAnomalyNotificationCreated with default headers values
func NewCreateAnomalyNotificationCreated() *CreateAnomalyNotificationCreated {
	return &CreateAnomalyNotificationCreated{}
}

/*
CreateAnomalyNotificationCreated describes a response with status code 201, with default header values.

CreateAnomalyNotificationCreated create anomaly notification created
*/
type CreateAnomalyNotificationCreated struct {
	Payload *models.AnomalyNotification
}

// IsSuccess returns true when this create anomaly notification created response has a 2xx status code
func (o *CreateAnomalyNotificationCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create anomaly notification created response has a 3xx status code
func (o *CreateAnomalyNotificationCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create anomaly notification created response has a 4xx status code
func (o *CreateAnomalyNotificationCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create anomaly notification created response has a 5xx status code
func (o *CreateAnomalyNotificationCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create anomaly notification created response a status code equal to that given
func (o *CreateAnomalyNotificationCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create anomaly notification created response
func (o *CreateAnomalyNotificationCreated) Code() int {
	return 201
}

func (o *CreateAnomalyNotificationCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /anomaly_notifications][%d] createAnomalyNotificationCreated %s", 201, payload)
}

func (o *CreateAnomalyNotificationCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /anomaly_notifications][%d] createAnomalyNotificationCreated %s", 201, payload)
}

func (o *CreateAnomalyNotificationCreated) GetPayload() *models.AnomalyNotification {
	return o.Payload
}

func (o *CreateAnomalyNotificationCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AnomalyNotification)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAnomalyNotificationBadRequest creates a CreateAnomalyNotificationBadRequest with default headers values
func NewCreateAnomalyNotificationBadRequest() *CreateAnomalyNotificationBadRequest {
	return &CreateAnomalyNotificationBadRequest{}
}

/*
CreateAnomalyNotificationBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type CreateAnomalyNotificationBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this create anomaly notification bad request response has a 2xx status code
func (o *CreateAnomalyNotificationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create anomaly notification bad request response has a 3xx status code
func (o *CreateAnomalyNotificationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create anomaly notification bad request response has a 4xx status code
func (o *CreateAnomalyNotificationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create anomaly notification bad request response has a 5xx status code
func (o *CreateAnomalyNotificationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create anomaly notification bad request response a status code equal to that given
func (o *CreateAnomalyNotificationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create anomaly notification bad request response
func (o *CreateAnomalyNotificationBadRequest) Code() int {
	return 400
}

func (o *CreateAnomalyNotificationBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /anomaly_notifications][%d] createAnomalyNotificationBadRequest %s", 400, payload)
}

func (o *CreateAnomalyNotificationBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /anomaly_notifications][%d] createAnomalyNotificationBadRequest %s", 400, payload)
}

func (o *CreateAnomalyNotificationBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateAnomalyNotificationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
