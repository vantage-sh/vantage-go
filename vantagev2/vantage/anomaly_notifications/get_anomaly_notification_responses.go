// Code generated by go-swagger; DO NOT EDIT.

package anomaly_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// GetAnomalyNotificationReader is a Reader for the GetAnomalyNotification structure.
type GetAnomalyNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAnomalyNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAnomalyNotificationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetAnomalyNotificationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /anomaly_notifications/{anomaly_notification_token}] getAnomalyNotification", response, response.Code())
	}
}

// NewGetAnomalyNotificationOK creates a GetAnomalyNotificationOK with default headers values
func NewGetAnomalyNotificationOK() *GetAnomalyNotificationOK {
	return &GetAnomalyNotificationOK{}
}

/*
GetAnomalyNotificationOK describes a response with status code 200, with default header values.

GetAnomalyNotificationOK get anomaly notification o k
*/
type GetAnomalyNotificationOK struct {
	Payload *models.AnomalyNotification
}

// IsSuccess returns true when this get anomaly notification o k response has a 2xx status code
func (o *GetAnomalyNotificationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get anomaly notification o k response has a 3xx status code
func (o *GetAnomalyNotificationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get anomaly notification o k response has a 4xx status code
func (o *GetAnomalyNotificationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get anomaly notification o k response has a 5xx status code
func (o *GetAnomalyNotificationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get anomaly notification o k response a status code equal to that given
func (o *GetAnomalyNotificationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get anomaly notification o k response
func (o *GetAnomalyNotificationOK) Code() int {
	return 200
}

func (o *GetAnomalyNotificationOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /anomaly_notifications/{anomaly_notification_token}][%d] getAnomalyNotificationOK %s", 200, payload)
}

func (o *GetAnomalyNotificationOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /anomaly_notifications/{anomaly_notification_token}][%d] getAnomalyNotificationOK %s", 200, payload)
}

func (o *GetAnomalyNotificationOK) GetPayload() *models.AnomalyNotification {
	return o.Payload
}

func (o *GetAnomalyNotificationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AnomalyNotification)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnomalyNotificationNotFound creates a GetAnomalyNotificationNotFound with default headers values
func NewGetAnomalyNotificationNotFound() *GetAnomalyNotificationNotFound {
	return &GetAnomalyNotificationNotFound{}
}

/*
GetAnomalyNotificationNotFound describes a response with status code 404, with default header values.

NotFound
*/
type GetAnomalyNotificationNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get anomaly notification not found response has a 2xx status code
func (o *GetAnomalyNotificationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get anomaly notification not found response has a 3xx status code
func (o *GetAnomalyNotificationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get anomaly notification not found response has a 4xx status code
func (o *GetAnomalyNotificationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get anomaly notification not found response has a 5xx status code
func (o *GetAnomalyNotificationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get anomaly notification not found response a status code equal to that given
func (o *GetAnomalyNotificationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get anomaly notification not found response
func (o *GetAnomalyNotificationNotFound) Code() int {
	return 404
}

func (o *GetAnomalyNotificationNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /anomaly_notifications/{anomaly_notification_token}][%d] getAnomalyNotificationNotFound %s", 404, payload)
}

func (o *GetAnomalyNotificationNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /anomaly_notifications/{anomaly_notification_token}][%d] getAnomalyNotificationNotFound %s", 404, payload)
}

func (o *GetAnomalyNotificationNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetAnomalyNotificationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
