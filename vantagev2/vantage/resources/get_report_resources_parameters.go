// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetReportResourcesParams creates a new GetReportResourcesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetReportResourcesParams() *GetReportResourcesParams {
	return &GetReportResourcesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetReportResourcesParamsWithTimeout creates a new GetReportResourcesParams object
// with the ability to set a timeout on a request.
func NewGetReportResourcesParamsWithTimeout(timeout time.Duration) *GetReportResourcesParams {
	return &GetReportResourcesParams{
		timeout: timeout,
	}
}

// NewGetReportResourcesParamsWithContext creates a new GetReportResourcesParams object
// with the ability to set a context for a request.
func NewGetReportResourcesParamsWithContext(ctx context.Context) *GetReportResourcesParams {
	return &GetReportResourcesParams{
		Context: ctx,
	}
}

// NewGetReportResourcesParamsWithHTTPClient creates a new GetReportResourcesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetReportResourcesParamsWithHTTPClient(client *http.Client) *GetReportResourcesParams {
	return &GetReportResourcesParams{
		HTTPClient: client,
	}
}

/*
GetReportResourcesParams contains all the parameters to send to the API endpoint

	for the get report resources operation.

	Typically these are written to a http.Request.
*/
type GetReportResourcesParams struct {

	/* Filter.

	   The filter query language to apply to the Resources. Additional documentation available at https://docs.vantage.sh/vql.
	*/
	Filter *string

	/* IncludeCost.

	   Include cost information in the response.
	*/
	IncludeCost *bool

	/* ResourceReportToken.

	   The ResourceReport token.
	*/
	ResourceReportToken *string

	/* WorkspaceToken.

	   The Workspace in which the Resources are located.
	*/
	WorkspaceToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get report resources params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetReportResourcesParams) WithDefaults() *GetReportResourcesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get report resources params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetReportResourcesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get report resources params
func (o *GetReportResourcesParams) WithTimeout(timeout time.Duration) *GetReportResourcesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get report resources params
func (o *GetReportResourcesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get report resources params
func (o *GetReportResourcesParams) WithContext(ctx context.Context) *GetReportResourcesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get report resources params
func (o *GetReportResourcesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get report resources params
func (o *GetReportResourcesParams) WithHTTPClient(client *http.Client) *GetReportResourcesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get report resources params
func (o *GetReportResourcesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the get report resources params
func (o *GetReportResourcesParams) WithFilter(filter *string) *GetReportResourcesParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get report resources params
func (o *GetReportResourcesParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithIncludeCost adds the includeCost to the get report resources params
func (o *GetReportResourcesParams) WithIncludeCost(includeCost *bool) *GetReportResourcesParams {
	o.SetIncludeCost(includeCost)
	return o
}

// SetIncludeCost adds the includeCost to the get report resources params
func (o *GetReportResourcesParams) SetIncludeCost(includeCost *bool) {
	o.IncludeCost = includeCost
}

// WithResourceReportToken adds the resourceReportToken to the get report resources params
func (o *GetReportResourcesParams) WithResourceReportToken(resourceReportToken *string) *GetReportResourcesParams {
	o.SetResourceReportToken(resourceReportToken)
	return o
}

// SetResourceReportToken adds the resourceReportToken to the get report resources params
func (o *GetReportResourcesParams) SetResourceReportToken(resourceReportToken *string) {
	o.ResourceReportToken = resourceReportToken
}

// WithWorkspaceToken adds the workspaceToken to the get report resources params
func (o *GetReportResourcesParams) WithWorkspaceToken(workspaceToken *string) *GetReportResourcesParams {
	o.SetWorkspaceToken(workspaceToken)
	return o
}

// SetWorkspaceToken adds the workspaceToken to the get report resources params
func (o *GetReportResourcesParams) SetWorkspaceToken(workspaceToken *string) {
	o.WorkspaceToken = workspaceToken
}

// WriteToRequest writes these params to a swagger request
func (o *GetReportResourcesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.IncludeCost != nil {

		// query param include_cost
		var qrIncludeCost bool

		if o.IncludeCost != nil {
			qrIncludeCost = *o.IncludeCost
		}
		qIncludeCost := swag.FormatBool(qrIncludeCost)
		if qIncludeCost != "" {

			if err := r.SetQueryParam("include_cost", qIncludeCost); err != nil {
				return err
			}
		}
	}

	if o.ResourceReportToken != nil {

		// query param resource_report_token
		var qrResourceReportToken string

		if o.ResourceReportToken != nil {
			qrResourceReportToken = *o.ResourceReportToken
		}
		qResourceReportToken := qrResourceReportToken
		if qResourceReportToken != "" {

			if err := r.SetQueryParam("resource_report_token", qResourceReportToken); err != nil {
				return err
			}
		}
	}

	if o.WorkspaceToken != nil {

		// query param workspace_token
		var qrWorkspaceToken string

		if o.WorkspaceToken != nil {
			qrWorkspaceToken = *o.WorkspaceToken
		}
		qWorkspaceToken := qrWorkspaceToken
		if qWorkspaceToken != "" {

			if err := r.SetQueryParam("workspace_token", qWorkspaceToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
