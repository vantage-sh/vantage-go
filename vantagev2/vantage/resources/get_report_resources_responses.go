// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// GetReportResourcesReader is a Reader for the GetReportResources structure.
type GetReportResourcesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportResourcesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReportResourcesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReportResourcesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewGetReportResourcesPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReportResourcesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /resources] getReportResources", response, response.Code())
	}
}

// NewGetReportResourcesOK creates a GetReportResourcesOK with default headers values
func NewGetReportResourcesOK() *GetReportResourcesOK {
	return &GetReportResourcesOK{}
}

/*
GetReportResourcesOK describes a response with status code 200, with default header values.

GetReportResourcesOK get report resources o k
*/
type GetReportResourcesOK struct {
	Payload *models.Resources
}

// IsSuccess returns true when this get report resources o k response has a 2xx status code
func (o *GetReportResourcesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get report resources o k response has a 3xx status code
func (o *GetReportResourcesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report resources o k response has a 4xx status code
func (o *GetReportResourcesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report resources o k response has a 5xx status code
func (o *GetReportResourcesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get report resources o k response a status code equal to that given
func (o *GetReportResourcesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get report resources o k response
func (o *GetReportResourcesOK) Code() int {
	return 200
}

func (o *GetReportResourcesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /resources][%d] getReportResourcesOK %s", 200, payload)
}

func (o *GetReportResourcesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /resources][%d] getReportResourcesOK %s", 200, payload)
}

func (o *GetReportResourcesOK) GetPayload() *models.Resources {
	return o.Payload
}

func (o *GetReportResourcesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Resources)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportResourcesBadRequest creates a GetReportResourcesBadRequest with default headers values
func NewGetReportResourcesBadRequest() *GetReportResourcesBadRequest {
	return &GetReportResourcesBadRequest{}
}

/*
GetReportResourcesBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type GetReportResourcesBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get report resources bad request response has a 2xx status code
func (o *GetReportResourcesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report resources bad request response has a 3xx status code
func (o *GetReportResourcesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report resources bad request response has a 4xx status code
func (o *GetReportResourcesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report resources bad request response has a 5xx status code
func (o *GetReportResourcesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get report resources bad request response a status code equal to that given
func (o *GetReportResourcesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get report resources bad request response
func (o *GetReportResourcesBadRequest) Code() int {
	return 400
}

func (o *GetReportResourcesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /resources][%d] getReportResourcesBadRequest %s", 400, payload)
}

func (o *GetReportResourcesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /resources][%d] getReportResourcesBadRequest %s", 400, payload)
}

func (o *GetReportResourcesBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetReportResourcesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportResourcesPaymentRequired creates a GetReportResourcesPaymentRequired with default headers values
func NewGetReportResourcesPaymentRequired() *GetReportResourcesPaymentRequired {
	return &GetReportResourcesPaymentRequired{}
}

/*
GetReportResourcesPaymentRequired describes a response with status code 402, with default header values.

PaymentRequired
*/
type GetReportResourcesPaymentRequired struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get report resources payment required response has a 2xx status code
func (o *GetReportResourcesPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report resources payment required response has a 3xx status code
func (o *GetReportResourcesPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report resources payment required response has a 4xx status code
func (o *GetReportResourcesPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report resources payment required response has a 5xx status code
func (o *GetReportResourcesPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this get report resources payment required response a status code equal to that given
func (o *GetReportResourcesPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the get report resources payment required response
func (o *GetReportResourcesPaymentRequired) Code() int {
	return 402
}

func (o *GetReportResourcesPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /resources][%d] getReportResourcesPaymentRequired %s", 402, payload)
}

func (o *GetReportResourcesPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /resources][%d] getReportResourcesPaymentRequired %s", 402, payload)
}

func (o *GetReportResourcesPaymentRequired) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetReportResourcesPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportResourcesNotFound creates a GetReportResourcesNotFound with default headers values
func NewGetReportResourcesNotFound() *GetReportResourcesNotFound {
	return &GetReportResourcesNotFound{}
}

/*
GetReportResourcesNotFound describes a response with status code 404, with default header values.

NotFound
*/
type GetReportResourcesNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get report resources not found response has a 2xx status code
func (o *GetReportResourcesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report resources not found response has a 3xx status code
func (o *GetReportResourcesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report resources not found response has a 4xx status code
func (o *GetReportResourcesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report resources not found response has a 5xx status code
func (o *GetReportResourcesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get report resources not found response a status code equal to that given
func (o *GetReportResourcesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get report resources not found response
func (o *GetReportResourcesNotFound) Code() int {
	return 404
}

func (o *GetReportResourcesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /resources][%d] getReportResourcesNotFound %s", 404, payload)
}

func (o *GetReportResourcesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /resources][%d] getReportResourcesNotFound %s", 404, payload)
}

func (o *GetReportResourcesNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetReportResourcesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
