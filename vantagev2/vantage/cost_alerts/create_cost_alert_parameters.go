// Code generated by go-swagger; DO NOT EDIT.

package cost_alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateCostAlertParams creates a new CreateCostAlertParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateCostAlertParams() *CreateCostAlertParams {
	return &CreateCostAlertParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateCostAlertParamsWithTimeout creates a new CreateCostAlertParams object
// with the ability to set a timeout on a request.
func NewCreateCostAlertParamsWithTimeout(timeout time.Duration) *CreateCostAlertParams {
	return &CreateCostAlertParams{
		timeout: timeout,
	}
}

// NewCreateCostAlertParamsWithContext creates a new CreateCostAlertParams object
// with the ability to set a context for a request.
func NewCreateCostAlertParamsWithContext(ctx context.Context) *CreateCostAlertParams {
	return &CreateCostAlertParams{
		Context: ctx,
	}
}

// NewCreateCostAlertParamsWithHTTPClient creates a new CreateCostAlertParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateCostAlertParamsWithHTTPClient(client *http.Client) *CreateCostAlertParams {
	return &CreateCostAlertParams{
		HTTPClient: client,
	}
}

/*
CreateCostAlertParams contains all the parameters to send to the API endpoint

	for the create cost alert operation.

	Typically these are written to a http.Request.
*/
type CreateCostAlertParams struct {

	/* EmailRecipients.

	   The email recipients for the Cost Alert.
	*/
	EmailRecipients []string

	/* Interval.

	   The period of time used to compare costs. Options are 'day', 'week', 'month', 'quarter'.
	*/
	Interval string

	/* ReportTokens.

	   The tokens of the reports to alert on.
	*/
	ReportTokens []string

	/* SlackChannels.

	   The Slack channels that will receive the alert.
	*/
	SlackChannels []string

	/* TeamsChannels.

	   The Microsoft Teams channels that will receive the alert.
	*/
	TeamsChannels []string

	/* Threshold.

	   The threshold value for the Cost Alert.

	   Format: float
	*/
	Threshold float32

	/* Title.

	   The title of the Cost Alert.
	*/
	Title string

	/* UnitType.

	   The unit type used to compare costs. Options are 'currency' or 'percentage'.
	*/
	UnitType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create cost alert params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateCostAlertParams) WithDefaults() *CreateCostAlertParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create cost alert params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateCostAlertParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create cost alert params
func (o *CreateCostAlertParams) WithTimeout(timeout time.Duration) *CreateCostAlertParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create cost alert params
func (o *CreateCostAlertParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create cost alert params
func (o *CreateCostAlertParams) WithContext(ctx context.Context) *CreateCostAlertParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create cost alert params
func (o *CreateCostAlertParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create cost alert params
func (o *CreateCostAlertParams) WithHTTPClient(client *http.Client) *CreateCostAlertParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create cost alert params
func (o *CreateCostAlertParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmailRecipients adds the emailRecipients to the create cost alert params
func (o *CreateCostAlertParams) WithEmailRecipients(emailRecipients []string) *CreateCostAlertParams {
	o.SetEmailRecipients(emailRecipients)
	return o
}

// SetEmailRecipients adds the emailRecipients to the create cost alert params
func (o *CreateCostAlertParams) SetEmailRecipients(emailRecipients []string) {
	o.EmailRecipients = emailRecipients
}

// WithInterval adds the interval to the create cost alert params
func (o *CreateCostAlertParams) WithInterval(interval string) *CreateCostAlertParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the create cost alert params
func (o *CreateCostAlertParams) SetInterval(interval string) {
	o.Interval = interval
}

// WithReportTokens adds the reportTokens to the create cost alert params
func (o *CreateCostAlertParams) WithReportTokens(reportTokens []string) *CreateCostAlertParams {
	o.SetReportTokens(reportTokens)
	return o
}

// SetReportTokens adds the reportTokens to the create cost alert params
func (o *CreateCostAlertParams) SetReportTokens(reportTokens []string) {
	o.ReportTokens = reportTokens
}

// WithSlackChannels adds the slackChannels to the create cost alert params
func (o *CreateCostAlertParams) WithSlackChannels(slackChannels []string) *CreateCostAlertParams {
	o.SetSlackChannels(slackChannels)
	return o
}

// SetSlackChannels adds the slackChannels to the create cost alert params
func (o *CreateCostAlertParams) SetSlackChannels(slackChannels []string) {
	o.SlackChannels = slackChannels
}

// WithTeamsChannels adds the teamsChannels to the create cost alert params
func (o *CreateCostAlertParams) WithTeamsChannels(teamsChannels []string) *CreateCostAlertParams {
	o.SetTeamsChannels(teamsChannels)
	return o
}

// SetTeamsChannels adds the teamsChannels to the create cost alert params
func (o *CreateCostAlertParams) SetTeamsChannels(teamsChannels []string) {
	o.TeamsChannels = teamsChannels
}

// WithThreshold adds the threshold to the create cost alert params
func (o *CreateCostAlertParams) WithThreshold(threshold float32) *CreateCostAlertParams {
	o.SetThreshold(threshold)
	return o
}

// SetThreshold adds the threshold to the create cost alert params
func (o *CreateCostAlertParams) SetThreshold(threshold float32) {
	o.Threshold = threshold
}

// WithTitle adds the title to the create cost alert params
func (o *CreateCostAlertParams) WithTitle(title string) *CreateCostAlertParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the create cost alert params
func (o *CreateCostAlertParams) SetTitle(title string) {
	o.Title = title
}

// WithUnitType adds the unitType to the create cost alert params
func (o *CreateCostAlertParams) WithUnitType(unitType string) *CreateCostAlertParams {
	o.SetUnitType(unitType)
	return o
}

// SetUnitType adds the unitType to the create cost alert params
func (o *CreateCostAlertParams) SetUnitType(unitType string) {
	o.UnitType = unitType
}

// WriteToRequest writes these params to a swagger request
func (o *CreateCostAlertParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EmailRecipients != nil {

		// binding items for email_recipients
		joinedEmailRecipients := o.bindParamEmailRecipients(reg)

		// form array param email_recipients
		if err := r.SetFormParam("email_recipients", joinedEmailRecipients...); err != nil {
			return err
		}
	}

	// form param interval
	frInterval := o.Interval
	fInterval := frInterval
	if fInterval != "" {
		if err := r.SetFormParam("interval", fInterval); err != nil {
			return err
		}
	}

	if o.ReportTokens != nil {

		// binding items for report_tokens
		joinedReportTokens := o.bindParamReportTokens(reg)

		// form array param report_tokens
		if err := r.SetFormParam("report_tokens", joinedReportTokens...); err != nil {
			return err
		}
	}

	if o.SlackChannels != nil {

		// binding items for slack_channels
		joinedSlackChannels := o.bindParamSlackChannels(reg)

		// form array param slack_channels
		if err := r.SetFormParam("slack_channels", joinedSlackChannels...); err != nil {
			return err
		}
	}

	if o.TeamsChannels != nil {

		// binding items for teams_channels
		joinedTeamsChannels := o.bindParamTeamsChannels(reg)

		// form array param teams_channels
		if err := r.SetFormParam("teams_channels", joinedTeamsChannels...); err != nil {
			return err
		}
	}

	// form param threshold
	frThreshold := o.Threshold
	fThreshold := swag.FormatFloat32(frThreshold)
	if fThreshold != "" {
		if err := r.SetFormParam("threshold", fThreshold); err != nil {
			return err
		}
	}

	// form param title
	frTitle := o.Title
	fTitle := frTitle
	if fTitle != "" {
		if err := r.SetFormParam("title", fTitle); err != nil {
			return err
		}
	}

	// form param unit_type
	frUnitType := o.UnitType
	fUnitType := frUnitType
	if fUnitType != "" {
		if err := r.SetFormParam("unit_type", fUnitType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCreateCostAlert binds the parameter email_recipients
func (o *CreateCostAlertParams) bindParamEmailRecipients(formats strfmt.Registry) []string {
	emailRecipientsIR := o.EmailRecipients

	var emailRecipientsIC []string
	for _, emailRecipientsIIR := range emailRecipientsIR { // explode []string

		emailRecipientsIIV := emailRecipientsIIR // string as string
		emailRecipientsIC = append(emailRecipientsIC, emailRecipientsIIV)
	}

	// items.CollectionFormat: ""
	emailRecipientsIS := swag.JoinByFormat(emailRecipientsIC, "")

	return emailRecipientsIS
}

// bindParamCreateCostAlert binds the parameter report_tokens
func (o *CreateCostAlertParams) bindParamReportTokens(formats strfmt.Registry) []string {
	reportTokensIR := o.ReportTokens

	var reportTokensIC []string
	for _, reportTokensIIR := range reportTokensIR { // explode []string

		reportTokensIIV := reportTokensIIR // string as string
		reportTokensIC = append(reportTokensIC, reportTokensIIV)
	}

	// items.CollectionFormat: ""
	reportTokensIS := swag.JoinByFormat(reportTokensIC, "")

	return reportTokensIS
}

// bindParamCreateCostAlert binds the parameter slack_channels
func (o *CreateCostAlertParams) bindParamSlackChannels(formats strfmt.Registry) []string {
	slackChannelsIR := o.SlackChannels

	var slackChannelsIC []string
	for _, slackChannelsIIR := range slackChannelsIR { // explode []string

		slackChannelsIIV := slackChannelsIIR // string as string
		slackChannelsIC = append(slackChannelsIC, slackChannelsIIV)
	}

	// items.CollectionFormat: ""
	slackChannelsIS := swag.JoinByFormat(slackChannelsIC, "")

	return slackChannelsIS
}

// bindParamCreateCostAlert binds the parameter teams_channels
func (o *CreateCostAlertParams) bindParamTeamsChannels(formats strfmt.Registry) []string {
	teamsChannelsIR := o.TeamsChannels

	var teamsChannelsIC []string
	for _, teamsChannelsIIR := range teamsChannelsIR { // explode []string

		teamsChannelsIIV := teamsChannelsIIR // string as string
		teamsChannelsIC = append(teamsChannelsIC, teamsChannelsIIV)
	}

	// items.CollectionFormat: ""
	teamsChannelsIS := swag.JoinByFormat(teamsChannelsIC, "")

	return teamsChannelsIS
}
