// Code generated by go-swagger; DO NOT EDIT.

package cost_alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// GetCostAlertReader is a Reader for the GetCostAlert structure.
type GetCostAlertReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCostAlertReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCostAlertOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetCostAlertNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cost_alerts/{cost_alert_token}] getCostAlert", response, response.Code())
	}
}

// NewGetCostAlertOK creates a GetCostAlertOK with default headers values
func NewGetCostAlertOK() *GetCostAlertOK {
	return &GetCostAlertOK{}
}

/*
GetCostAlertOK describes a response with status code 200, with default header values.

Get a Cost Alert
*/
type GetCostAlertOK struct {
	Payload *models.CostAlert
}

// IsSuccess returns true when this get cost alert o k response has a 2xx status code
func (o *GetCostAlertOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get cost alert o k response has a 3xx status code
func (o *GetCostAlertOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cost alert o k response has a 4xx status code
func (o *GetCostAlertOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get cost alert o k response has a 5xx status code
func (o *GetCostAlertOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get cost alert o k response a status code equal to that given
func (o *GetCostAlertOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get cost alert o k response
func (o *GetCostAlertOK) Code() int {
	return 200
}

func (o *GetCostAlertOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cost_alerts/{cost_alert_token}][%d] getCostAlertOK %s", 200, payload)
}

func (o *GetCostAlertOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cost_alerts/{cost_alert_token}][%d] getCostAlertOK %s", 200, payload)
}

func (o *GetCostAlertOK) GetPayload() *models.CostAlert {
	return o.Payload
}

func (o *GetCostAlertOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CostAlert)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostAlertNotFound creates a GetCostAlertNotFound with default headers values
func NewGetCostAlertNotFound() *GetCostAlertNotFound {
	return &GetCostAlertNotFound{}
}

/*
GetCostAlertNotFound describes a response with status code 404, with default header values.

NotFound
*/
type GetCostAlertNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get cost alert not found response has a 2xx status code
func (o *GetCostAlertNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cost alert not found response has a 3xx status code
func (o *GetCostAlertNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cost alert not found response has a 4xx status code
func (o *GetCostAlertNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cost alert not found response has a 5xx status code
func (o *GetCostAlertNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get cost alert not found response a status code equal to that given
func (o *GetCostAlertNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get cost alert not found response
func (o *GetCostAlertNotFound) Code() int {
	return 404
}

func (o *GetCostAlertNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cost_alerts/{cost_alert_token}][%d] getCostAlertNotFound %s", 404, payload)
}

func (o *GetCostAlertNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cost_alerts/{cost_alert_token}][%d] getCostAlertNotFound %s", 404, payload)
}

func (o *GetCostAlertNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetCostAlertNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
