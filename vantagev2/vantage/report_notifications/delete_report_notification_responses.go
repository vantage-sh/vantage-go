// Code generated by go-swagger; DO NOT EDIT.

package report_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// DeleteReportNotificationReader is a Reader for the DeleteReportNotification structure.
type DeleteReportNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteReportNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteReportNotificationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteReportNotificationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /report_notifications/{report_notification_token}] deleteReportNotification", response, response.Code())
	}
}

// NewDeleteReportNotificationNoContent creates a DeleteReportNotificationNoContent with default headers values
func NewDeleteReportNotificationNoContent() *DeleteReportNotificationNoContent {
	return &DeleteReportNotificationNoContent{}
}

/*
DeleteReportNotificationNoContent describes a response with status code 204, with default header values.

DeleteReportNotificationNoContent delete report notification no content
*/
type DeleteReportNotificationNoContent struct {
	Payload *models.ReportNotification
}

// IsSuccess returns true when this delete report notification no content response has a 2xx status code
func (o *DeleteReportNotificationNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete report notification no content response has a 3xx status code
func (o *DeleteReportNotificationNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete report notification no content response has a 4xx status code
func (o *DeleteReportNotificationNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete report notification no content response has a 5xx status code
func (o *DeleteReportNotificationNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete report notification no content response a status code equal to that given
func (o *DeleteReportNotificationNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete report notification no content response
func (o *DeleteReportNotificationNoContent) Code() int {
	return 204
}

func (o *DeleteReportNotificationNoContent) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /report_notifications/{report_notification_token}][%d] deleteReportNotificationNoContent %s", 204, payload)
}

func (o *DeleteReportNotificationNoContent) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /report_notifications/{report_notification_token}][%d] deleteReportNotificationNoContent %s", 204, payload)
}

func (o *DeleteReportNotificationNoContent) GetPayload() *models.ReportNotification {
	return o.Payload
}

func (o *DeleteReportNotificationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportNotification)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteReportNotificationNotFound creates a DeleteReportNotificationNotFound with default headers values
func NewDeleteReportNotificationNotFound() *DeleteReportNotificationNotFound {
	return &DeleteReportNotificationNotFound{}
}

/*
DeleteReportNotificationNotFound describes a response with status code 404, with default header values.

NotFound
*/
type DeleteReportNotificationNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this delete report notification not found response has a 2xx status code
func (o *DeleteReportNotificationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete report notification not found response has a 3xx status code
func (o *DeleteReportNotificationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete report notification not found response has a 4xx status code
func (o *DeleteReportNotificationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete report notification not found response has a 5xx status code
func (o *DeleteReportNotificationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete report notification not found response a status code equal to that given
func (o *DeleteReportNotificationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete report notification not found response
func (o *DeleteReportNotificationNotFound) Code() int {
	return 404
}

func (o *DeleteReportNotificationNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /report_notifications/{report_notification_token}][%d] deleteReportNotificationNotFound %s", 404, payload)
}

func (o *DeleteReportNotificationNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /report_notifications/{report_notification_token}][%d] deleteReportNotificationNotFound %s", 404, payload)
}

func (o *DeleteReportNotificationNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DeleteReportNotificationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
