// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new integrations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new integrations API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new integrations API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for integrations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateIntegrationsAWS(params *CreateIntegrationsAWSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIntegrationsAWSCreated, error)

	DeleteIntegrationsAWS(params *DeleteIntegrationsAWSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIntegrationsAWSNoContent, error)

	GetIntegrationsAWS(params *GetIntegrationsAWSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntegrationsAWSOK, error)

	GetIntegrationsAWSInfo(params *GetIntegrationsAWSInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntegrationsAWSInfoOK, error)

	PostIntegrationsTerraformWorkspacesWorkspaceIDIntegrationType(params *PostIntegrationsTerraformWorkspacesWorkspaceIDIntegrationTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostIntegrationsTerraformWorkspacesWorkspaceIDIntegrationTypeCreated, error)

	PutIntegrationsAWS(params *PutIntegrationsAWSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutIntegrationsAWSOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateIntegrationsAWS Create AWS integration.
*/
func (a *Client) CreateIntegrationsAWS(params *CreateIntegrationsAWSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIntegrationsAWSCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIntegrationsAWSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createIntegrationsAWS",
		Method:             "POST",
		PathPattern:        "/integrations/aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIntegrationsAWSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIntegrationsAWSCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createIntegrationsAWS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIntegrationsAWS Delete access credential information for aws account
*/
func (a *Client) DeleteIntegrationsAWS(params *DeleteIntegrationsAWSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIntegrationsAWSNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIntegrationsAWSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteIntegrationsAWS",
		Method:             "DELETE",
		PathPattern:        "/integrations/aws/{access_credential_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIntegrationsAWSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIntegrationsAWSNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIntegrationsAWS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrationsAWS Get access credential information for aws account
*/
func (a *Client) GetIntegrationsAWS(params *GetIntegrationsAWSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntegrationsAWSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationsAWSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIntegrationsAWS",
		Method:             "GET",
		PathPattern:        "/integrations/aws/{access_credential_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsAWSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationsAWSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIntegrationsAWS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrationsAWSInfo Get provider information
*/
func (a *Client) GetIntegrationsAWSInfo(params *GetIntegrationsAWSInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntegrationsAWSInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationsAWSInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIntegrationsAWSInfo",
		Method:             "GET",
		PathPattern:        "/integrations/aws/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsAWSInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationsAWSInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIntegrationsAWSInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostIntegrationsTerraformWorkspacesWorkspaceIDIntegrationType post integrations terraform workspaces workspace Id integration type API
*/
func (a *Client) PostIntegrationsTerraformWorkspacesWorkspaceIDIntegrationType(params *PostIntegrationsTerraformWorkspacesWorkspaceIDIntegrationTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostIntegrationsTerraformWorkspacesWorkspaceIDIntegrationTypeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIntegrationsTerraformWorkspacesWorkspaceIDIntegrationTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postIntegrationsTerraformWorkspacesWorkspaceIdIntegrationType",
		Method:             "POST",
		PathPattern:        "/integrations/terraform/workspaces/{workspace_id}/{integration_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIntegrationsTerraformWorkspacesWorkspaceIDIntegrationTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIntegrationsTerraformWorkspacesWorkspaceIDIntegrationTypeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIntegrationsTerraformWorkspacesWorkspaceIdIntegrationType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutIntegrationsAWS Update AWS integration.
*/
func (a *Client) PutIntegrationsAWS(params *PutIntegrationsAWSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutIntegrationsAWSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIntegrationsAWSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putIntegrationsAWS",
		Method:             "PUT",
		PathPattern:        "/integrations/aws/{access_credential_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIntegrationsAWSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutIntegrationsAWSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putIntegrationsAWS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
